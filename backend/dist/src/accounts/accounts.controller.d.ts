import { AccountsService } from './accounts.service';
import { AuditLoggingService } from '../common/services/audit-logging.service';
export declare class AccountsController {
    private readonly accountsService;
    private readonly auditService;
    constructor(accountsService: AccountsService, auditService: AuditLoggingService);
    create(createAccountDto: any, req: any): Promise<{
        assignedAgent: {
            id: string;
            email: string;
            firstName: string;
            lastName: string;
        };
    } & {
        id: string;
        email: string | null;
        firstName: string;
        lastName: string;
        createdAt: Date;
        updatedAt: Date;
        accountNumber: string;
        fullName: string;
        address1: string | null;
        address2: string | null;
        city: string | null;
        state: string | null;
        zipCode: string | null;
        country: string | null;
        originalAmount: number;
        currentBalance: number;
        amountPaid: number;
        interestRate: number | null;
        lastPaymentDate: Date | null;
        lastPaymentAmount: number | null;
        status: string;
        priority: string;
        assignedDate: Date | null;
        preferredContactMethod: string | null;
        bestTimeToCall: string | null;
        timezone: string | null;
        language: string | null;
        daysPastDue: number;
        lastContactDate: Date | null;
        nextContactDate: Date | null;
        contactAttempts: number;
        doNotCall: boolean;
        disputeFlag: boolean;
        bankruptcyFlag: boolean;
        deceasedFlag: boolean;
        notes: string | null;
        source: string | null;
        batchId: string | null;
        assignedAgentId: string | null;
    }>;
    findAll(filterDto: any, req: any): Promise<{
        accounts: ({
            assignedAgent: {
                id: string;
                email: string;
                firstName: string;
                lastName: string;
            };
        } & {
            id: string;
            email: string | null;
            firstName: string;
            lastName: string;
            createdAt: Date;
            updatedAt: Date;
            accountNumber: string;
            fullName: string;
            address1: string | null;
            address2: string | null;
            city: string | null;
            state: string | null;
            zipCode: string | null;
            country: string | null;
            originalAmount: number;
            currentBalance: number;
            amountPaid: number;
            interestRate: number | null;
            lastPaymentDate: Date | null;
            lastPaymentAmount: number | null;
            status: string;
            priority: string;
            assignedDate: Date | null;
            preferredContactMethod: string | null;
            bestTimeToCall: string | null;
            timezone: string | null;
            language: string | null;
            daysPastDue: number;
            lastContactDate: Date | null;
            nextContactDate: Date | null;
            contactAttempts: number;
            doNotCall: boolean;
            disputeFlag: boolean;
            bankruptcyFlag: boolean;
            deceasedFlag: boolean;
            notes: string | null;
            source: string | null;
            batchId: string | null;
            assignedAgentId: string | null;
        })[];
        pagination: {
            page: number;
            limit: number;
            total: number;
            totalPages: number;
        };
    }>;
    getStatistics(req: any): Promise<{
        totalAccounts: number;
        accountsByStatus: {
            active: number;
            new: number;
            ptp: number;
            paid: number;
        };
    }>;
    exportAccounts(queryParams: any, req: any): Promise<{
        success: boolean;
        data: string;
        filename: string;
        contentType: string;
    }>;
    findOne(id: string, req: any): Promise<{
        assignedAgent: {
            id: string;
            email: string;
            firstName: string;
            lastName: string;
        };
    } & {
        id: string;
        email: string | null;
        firstName: string;
        lastName: string;
        createdAt: Date;
        updatedAt: Date;
        accountNumber: string;
        fullName: string;
        address1: string | null;
        address2: string | null;
        city: string | null;
        state: string | null;
        zipCode: string | null;
        country: string | null;
        originalAmount: number;
        currentBalance: number;
        amountPaid: number;
        interestRate: number | null;
        lastPaymentDate: Date | null;
        lastPaymentAmount: number | null;
        status: string;
        priority: string;
        assignedDate: Date | null;
        preferredContactMethod: string | null;
        bestTimeToCall: string | null;
        timezone: string | null;
        language: string | null;
        daysPastDue: number;
        lastContactDate: Date | null;
        nextContactDate: Date | null;
        contactAttempts: number;
        doNotCall: boolean;
        disputeFlag: boolean;
        bankruptcyFlag: boolean;
        deceasedFlag: boolean;
        notes: string | null;
        source: string | null;
        batchId: string | null;
        assignedAgentId: string | null;
    }>;
    update(id: string, updateAccountDto: any, req: any): Promise<{
        id: string;
        email: string | null;
        firstName: string;
        lastName: string;
        createdAt: Date;
        updatedAt: Date;
        accountNumber: string;
        fullName: string;
        address1: string | null;
        address2: string | null;
        city: string | null;
        state: string | null;
        zipCode: string | null;
        country: string | null;
        originalAmount: number;
        currentBalance: number;
        amountPaid: number;
        interestRate: number | null;
        lastPaymentDate: Date | null;
        lastPaymentAmount: number | null;
        status: string;
        priority: string;
        assignedDate: Date | null;
        preferredContactMethod: string | null;
        bestTimeToCall: string | null;
        timezone: string | null;
        language: string | null;
        daysPastDue: number;
        lastContactDate: Date | null;
        nextContactDate: Date | null;
        contactAttempts: number;
        doNotCall: boolean;
        disputeFlag: boolean;
        bankruptcyFlag: boolean;
        deceasedFlag: boolean;
        notes: string | null;
        source: string | null;
        batchId: string | null;
        assignedAgentId: string | null;
    }>;
    remove(id: string, req: any): Promise<{
        message: string;
        id: string;
    }>;
    bulkUpload(file: Express.Multer.File, req: any): Promise<{
        message: string;
        summary: {
            total: number;
            processed: number;
            failed: number;
        };
    }>;
    assignToAgent(id: string, agentId: string, req: any): Promise<{
        assignedAgent: {
            id: string;
            email: string;
            firstName: string;
            lastName: string;
        };
    } & {
        id: string;
        email: string | null;
        firstName: string;
        lastName: string;
        createdAt: Date;
        updatedAt: Date;
        accountNumber: string;
        fullName: string;
        address1: string | null;
        address2: string | null;
        city: string | null;
        state: string | null;
        zipCode: string | null;
        country: string | null;
        originalAmount: number;
        currentBalance: number;
        amountPaid: number;
        interestRate: number | null;
        lastPaymentDate: Date | null;
        lastPaymentAmount: number | null;
        status: string;
        priority: string;
        assignedDate: Date | null;
        preferredContactMethod: string | null;
        bestTimeToCall: string | null;
        timezone: string | null;
        language: string | null;
        daysPastDue: number;
        lastContactDate: Date | null;
        nextContactDate: Date | null;
        contactAttempts: number;
        doNotCall: boolean;
        disputeFlag: boolean;
        bankruptcyFlag: boolean;
        deceasedFlag: boolean;
        notes: string | null;
        source: string | null;
        batchId: string | null;
        assignedAgentId: string | null;
    }>;
    addNote(id: string, note: string, req: any): Promise<{
        message: string;
        accountId: string;
        note: string;
        userId: string;
        createdAt: Date;
    }>;
    getCallHistory(id: string, req: any): Promise<any[]>;
}
