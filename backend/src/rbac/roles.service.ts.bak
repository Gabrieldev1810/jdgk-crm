import { Injectable, NotFoundException, ConflictException, Logger } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { CreateRoleDto, UpdateRoleDto, AssignPermissionsDto, AssignRoleDto } from './dto';
import { Role, Permission, UserRole } from '@prisma/client';

@Injectable()
export class RolesService {
  private readonly logger = new Logger(RolesService.name);

  constructor(
    private prisma: PrismaService,
  ) {}

  // ================================
  // ROLE CRUD OPERATIONS
  // ================================

  async create(createRoleDto: CreateRoleDto, createdById: string): Promise<Role> {
    const role = await this.prisma.role.create({
      data: {
        ...createRoleDto,
        createdById,
      },
      include: {
        permissions: {
          include: {
            permission: true,
          },
        },
        _count: {
          select: {
            userRoles: true,
          },
        },
      },
    });

    // Audit log
    await this.auditService.log({
      actorId: createdById,
      action: 'CREATE',
      entity: 'Role',
      entityId: role.id,
      newValue: JSON.stringify(role),
    });

    return role;
  }

  async findAll(includeInactive = false) {
    return this.prisma.role.findMany({
      where: includeInactive ? {} : { isActive: true },
      include: {
        permissions: {
          include: {
            permission: true,
          },
        },
        _count: {
          select: {
            userRoles: {
              where: { isActive: true },
            },
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });
  }

  async findOne(id: string) {
    return this.prisma.role.findUnique({
      where: { id },
      include: {
        permissions: {
          include: {
            permission: true,
          },
        },
        userRoles: {
          where: { isActive: true },
          include: {
            user: {
              select: {
                id: true,
                email: true,
                firstName: true,
                lastName: true,
              },
            },
          },
        },
        _count: {
          select: {
            userRoles: {
              where: { isActive: true },
            },
          },
        },
      },
    });
  }

  async update(id: string, updateRoleDto: UpdateRoleDto, updatedById: string) {
    const oldRole = await this.findOne(id);
    
    const updatedRole = await this.prisma.role.update({
      where: { id },
      data: updateRoleDto,
      include: {
        permissions: {
          include: {
            permission: true,
          },
        },
        _count: {
          select: {
            userRoles: {
              where: { isActive: true },
            },
          },
        },
      },
    });

    // Audit log
    await this.auditService.log({
      actorId: updatedById,
      action: 'UPDATE',
      entity: 'Role',
      entityId: id,
      oldValue: JSON.stringify(oldRole),
      newValue: JSON.stringify(updatedRole),
    });

    return updatedRole;
  }

  async remove(id: string, deletedById: string) {
    const role = await this.findOne(id);
    
    if (role.isSystem) {
      throw new Error('Cannot delete system roles');
    }

    // Soft delete - deactivate instead of removing
    const deactivatedRole = await this.prisma.role.update({
      where: { id },
      data: { isActive: false },
    });

    // Deactivate all user role assignments
    await this.prisma.userRole.updateMany({
      where: { roleId: id },
      data: { isActive: false },
    });

    // Audit log
    await this.auditService.log({
      actorId: deletedById,
      action: 'DELETE',
      entity: 'Role',
      entityId: id,
      oldValue: JSON.stringify(role),
    });

    return deactivatedRole;
  }

  // ================================
  // PERMISSION ASSIGNMENT
  // ================================

  async assignPermissions(roleId: string, assignPermissionsDto: AssignPermissionsDto, assignedById: string) {
    const { permissionIds } = assignPermissionsDto;

    // Remove existing permissions
    await this.prisma.rolePermission.deleteMany({
      where: { roleId },
    });

    // Add new permissions
    const rolePermissions = await Promise.all(
      permissionIds.map(permissionId =>
        this.prisma.rolePermission.create({
          data: {
            roleId,
            permissionId,
            grantedById: assignedById,
          },
        })
      )
    );

    const updatedRole = await this.findOne(roleId);

    // Audit log
    await this.auditService.log({
      actorId: assignedById,
      action: 'ASSIGN_PERMISSIONS',
      entity: 'Role',
      entityId: roleId,
      newValue: JSON.stringify({ permissionIds }),
    });

    return updatedRole;
  }

  // ================================
  // USER ROLE ASSIGNMENT
  // ================================

  async assignRole(userId: string, roleId: string, assignedById: string, expiresAt?: Date): Promise<UserRole> {
    // Deactivate existing role assignment if exists
    await this.prisma.userRole.updateMany({
      where: { userId, roleId },
      data: { isActive: false },
    });

    // Create new role assignment
    const userRole = await this.prisma.userRole.create({
      data: {
        userId,
        roleId,
        assignedById,
        expiresAt,
      },
      include: {
        role: true,
        user: {
          select: {
            id: true,
            email: true,
            firstName: true,
            lastName: true,
          },
        },
      },
    });

    // Audit log
    await this.auditService.log({
      actorId: assignedById,
      action: 'ASSIGN_ROLE',
      entity: 'UserRole',
      entityId: userRole.id,
      newValue: JSON.stringify({ userId, roleId, expiresAt }),
    });

    return userRole;
  }

  async revokeRole(userId: string, roleId: string, revokedById: string) {
    const userRole = await this.prisma.userRole.findFirst({
      where: { userId, roleId, isActive: true },
    });

    if (!userRole) {
      throw new Error('User role assignment not found');
    }

    const updatedUserRole = await this.prisma.userRole.update({
      where: { id: userRole.id },
      data: { isActive: false },
    });

    // Audit log  
    await this.auditService.log({
      actorId: revokedById,
      action: 'REVOKE_ROLE',
      entity: 'UserRole',
      entityId: userRole.id,
      oldValue: JSON.stringify(userRole),
    });

    return updatedUserRole;
  }

  // ================================
  // UTILITY METHODS
  // ================================

  async getUserRoles(userId: string) {
    return this.prisma.userRole.findMany({
      where: { 
        userId, 
        isActive: true,
        OR: [
          { expiresAt: null },
          { expiresAt: { gt: new Date() } }
        ]
      },
      include: {
        role: {
          include: {
            permissions: {
              include: {
                permission: true,
              },
            },
          },
        },
      },
    });
  }

  async getUserPermissions(userId: string): Promise<string[]> {
    const userRoles = await this.getUserRoles(userId);
    
    const permissions = new Set<string>();
    
    for (const userRole of userRoles) {
      for (const rolePermission of userRole.role.permissions) {
        permissions.add(rolePermission.permission.code);
      }
    }
    
    return Array.from(permissions);
  }
}