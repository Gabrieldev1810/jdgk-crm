
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  isActive: 'isActive',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  emailVerified: 'emailVerified',
  emailVerifyToken: 'emailVerifyToken',
  emailVerifyExpires: 'emailVerifyExpires',
  passwordResetToken: 'passwordResetToken',
  passwordResetExpires: 'passwordResetExpires',
  failedLoginAttempts: 'failedLoginAttempts',
  accountLockedUntil: 'accountLockedUntil',
  lastFailedLogin: 'lastFailedLogin',
  passwordChangedAt: 'passwordChangedAt',
  mustChangePassword: 'mustChangePassword'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountNumber: 'accountNumber',
  firstName: 'firstName',
  lastName: 'lastName',
  fullName: 'fullName',
  email: 'email',
  address1: 'address1',
  address2: 'address2',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  originalAmount: 'originalAmount',
  currentBalance: 'currentBalance',
  amountPaid: 'amountPaid',
  interestRate: 'interestRate',
  lastPaymentDate: 'lastPaymentDate',
  lastPaymentAmount: 'lastPaymentAmount',
  status: 'status',
  priority: 'priority',
  assignedAgentId: 'assignedAgentId',
  assignedDate: 'assignedDate',
  preferredContactMethod: 'preferredContactMethod',
  bestTimeToCall: 'bestTimeToCall',
  timezone: 'timezone',
  language: 'language',
  daysPastDue: 'daysPastDue',
  lastContactDate: 'lastContactDate',
  nextContactDate: 'nextContactDate',
  contactAttempts: 'contactAttempts',
  doNotCall: 'doNotCall',
  disputeFlag: 'disputeFlag',
  bankruptcyFlag: 'bankruptcyFlag',
  deceasedFlag: 'deceasedFlag',
  notes: 'notes',
  source: 'source',
  batchId: 'batchId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountPhoneScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  phoneNumber: 'phoneNumber',
  phoneType: 'phoneType',
  isValid: 'isValid',
  doNotCall: 'doNotCall',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CallScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  accountPhoneId: 'accountPhoneId',
  agentId: 'agentId',
  direction: 'direction',
  startTime: 'startTime',
  endTime: 'endTime',
  duration: 'duration',
  status: 'status',
  disposition: 'disposition',
  notes: 'notes',
  followUpDate: 'followUpDate',
  amountPromised: 'amountPromised',
  amountCollected: 'amountCollected',
  recordingPath: 'recordingPath',
  callerId: 'callerId',
  campaignId: 'campaignId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountActionScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  agentId: 'agentId',
  actionType: 'actionType',
  description: 'description',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.UploadBatchScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  originalFilename: 'originalFilename',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  totalRecords: 'totalRecords',
  processedRecords: 'processedRecords',
  successCount: 'successCount',
  errorCount: 'errorCount',
  skipCount: 'skipCount',
  duplicateCount: 'duplicateCount',
  status: 'status',
  uploadedById: 'uploadedById',
  batchName: 'batchName',
  skipErrors: 'skipErrors',
  updateExisting: 'updateExisting',
  processingStarted: 'processingStarted',
  processingCompleted: 'processingCompleted',
  errorLog: 'errorLog',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isSystem: 'isSystem',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  category: 'category',
  resource: 'resource',
  action: 'action',
  isSystem: 'isSystem',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  permissionId: 'permissionId',
  grantedAt: 'grantedAt',
  grantedById: 'grantedById',
  expiresAt: 'expiresAt'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId',
  assignedAt: 'assignedAt',
  assignedById: 'assignedById',
  expiresAt: 'expiresAt',
  isActive: 'isActive'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  actorId: 'actorId',
  action: 'action',
  entity: 'entity',
  entityId: 'entityId',
  oldValue: 'oldValue',
  newValue: 'newValue',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  sessionId: 'sessionId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.DispositionCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  color: 'color',
  icon: 'icon',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DispositionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  categoryId: 'categoryId',
  requiresFollowUp: 'requiresFollowUp',
  requiresPayment: 'requiresPayment',
  requiresNotes: 'requiresNotes',
  isSuccessful: 'isSuccessful',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  usageCount: 'usageCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserMFAScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  secret: 'secret',
  backupCodes: 'backupCodes',
  isEnabled: 'isEnabled',
  lastUsedAt: 'lastUsedAt',
  setupAt: 'setupAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionToken: 'sessionToken',
  deviceFingerprint: 'deviceFingerprint',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  location: 'location',
  riskScore: 'riskScore',
  isActive: 'isActive',
  lastActivityAt: 'lastActivityAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  loginMethod: 'loginMethod',
  deviceType: 'deviceType',
  browserInfo: 'browserInfo'
};

exports.Prisma.EncryptionKeyScalarFieldEnum = {
  id: 'id',
  keyId: 'keyId',
  algorithm: 'algorithm',
  purpose: 'purpose',
  isActive: 'isActive',
  rotatedAt: 'rotatedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  version: 'version'
};

exports.Prisma.SecurityEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  eventType: 'eventType',
  severity: 'severity',
  description: 'description',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  location: 'location',
  riskScore: 'riskScore',
  isBlocked: 'isBlocked',
  resolvedAt: 'resolvedAt',
  resolvedById: 'resolvedById',
  createdAt: 'createdAt'
};

exports.Prisma.PermissionContextScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissionId: 'permissionId',
  context: 'context',
  grantedAt: 'grantedAt',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  ipRange: 'ipRange',
  timeRestriction: 'timeRestriction',
  locationRestriction: 'locationRestriction',
  deviceRestriction: 'deviceRestriction'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  RefreshToken: 'RefreshToken',
  Account: 'Account',
  AccountPhone: 'AccountPhone',
  Call: 'Call',
  AccountAction: 'AccountAction',
  UploadBatch: 'UploadBatch',
  Role: 'Role',
  Permission: 'Permission',
  RolePermission: 'RolePermission',
  UserRole: 'UserRole',
  AuditLog: 'AuditLog',
  DispositionCategory: 'DispositionCategory',
  Disposition: 'Disposition',
  UserMFA: 'UserMFA',
  UserSession: 'UserSession',
  EncryptionKey: 'EncryptionKey',
  SecurityEvent: 'SecurityEvent',
  PermissionContext: 'PermissionContext'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
