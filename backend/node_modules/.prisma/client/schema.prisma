generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   String          @id @default(uuid())
  email                String          @unique
  password             String
  firstName            String
  lastName             String
  role                 String          @default("AGENT")
  isActive             Boolean         @default(true)
  lastLogin            DateTime?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  emailVerified        Boolean         @default(false)
  emailVerifyToken     String?         @unique
  emailVerifyExpires   DateTime?
  passwordResetToken   String?         @unique
  passwordResetExpires DateTime?
  failedLoginAttempts  Int             @default(0)
  accountLockedUntil   DateTime?
  lastFailedLogin      DateTime?
  passwordChangedAt    DateTime        @default(now())
  mustChangePassword   Boolean         @default(false)
  accountActions       AccountAction[]
  assignedAccounts     Account[]       @relation("AssignedAgent")
  calls                Call[]
  refreshTokens        RefreshToken[]
  uploadBatches        UploadBatch[]

  // RBAC Relationships
  createdRoles       Role[]           @relation("RoleCreatedBy")
  userRoles          UserRole[]       @relation("UserRoleAssignment")
  assignedRoles      UserRole[]       @relation("RoleAssignedBy")
  grantedPermissions RolePermission[] @relation("PermissionGrantedBy")

  // Audit Log Relationships
  auditLogs AuditLog[] @relation("AuditLogActor")

  // Phase 4 Security Relationships
  mfaConfig              UserMFA?            @relation("UserMFA")
  sessions               UserSession[]       @relation("UserSessions")
  securityEvents         SecurityEvent[]     @relation("UserSecurityEvents")
  resolvedSecurityEvents SecurityEvent[]     @relation("SecurityEventResolver")
  permissionContexts     PermissionContext[] @relation("UserPermissionContexts")

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Account {
  id                     String          @id @default(uuid())
  accountNumber          String          @unique
  firstName              String
  lastName               String
  fullName               String
  email                  String?
  address1               String?
  address2               String?
  city                   String?
  state                  String?
  zipCode                String?
  country                String?         @default("US")
  originalAmount         Float
  currentBalance         Float
  amountPaid             Float           @default(0)
  interestRate           Float?
  lastPaymentDate        DateTime?
  lastPaymentAmount      Float?
  status                 String          @default("NEW")
  priority               String          @default("MEDIUM")
  assignedAgentId        String?
  assignedDate           DateTime?
  preferredContactMethod String?         @default("PHONE")
  bestTimeToCall         String?
  timezone               String?         @default("EST")
  language               String?         @default("EN")
  daysPastDue            Int             @default(0)
  lastContactDate        DateTime?
  nextContactDate        DateTime?
  contactAttempts        Int             @default(0)
  doNotCall              Boolean         @default(false)
  disputeFlag            Boolean         @default(false)
  bankruptcyFlag         Boolean         @default(false)
  deceasedFlag           Boolean         @default(false)
  notes                  String?
  source                 String?
  batchId                String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  actions                AccountAction[]
  phoneNumbers           AccountPhone[]
  assignedAgent          User?           @relation("AssignedAgent", fields: [assignedAgentId], references: [id])
  calls                  Call[]

  @@index([accountNumber])
  @@index([status])
  @@index([assignedAgentId])
  @@index([lastContactDate])
  @@index([nextContactDate])
  @@map("accounts")
}

model AccountPhone {
  id          String   @id @default(uuid())
  accountId   String
  phoneNumber String
  phoneType   String   @default("PRIMARY")
  isValid     Boolean  @default(true)
  doNotCall   Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  calls       Call[]

  @@unique([accountId, phoneNumber])
  @@index([phoneNumber])
  @@map("account_phones")
}

model Call {
  id              String        @id @default(uuid())
  accountId       String
  accountPhoneId  String?
  agentId         String
  direction       String
  startTime       DateTime
  endTime         DateTime?
  duration        Int?
  status          String
  disposition     String?
  notes           String?
  followUpDate    DateTime?
  amountPromised  Float?
  amountCollected Float?
  recordingPath   String?
  callerId        String?
  campaignId      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  agent           User          @relation(fields: [agentId], references: [id])
  accountPhone    AccountPhone? @relation(fields: [accountPhoneId], references: [id])
  account         Account       @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@index([agentId])
  @@index([startTime])
  @@index([disposition])
  @@map("calls")
}

model AccountAction {
  id          String   @id @default(uuid())
  accountId   String
  agentId     String
  actionType  String
  description String
  details     String?
  createdAt   DateTime @default(now())
  agent       User     @relation(fields: [agentId], references: [id])
  account     Account  @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@index([agentId])
  @@index([createdAt])
  @@map("account_actions")
}

model UploadBatch {
  id                  String    @id @default(uuid())
  filename            String
  originalFilename    String
  fileSize            Int
  mimeType            String
  totalRecords        Int       @default(0)
  processedRecords    Int       @default(0)
  successCount        Int       @default(0)
  errorCount          Int       @default(0)
  skipCount           Int       @default(0)
  duplicateCount      Int       @default(0)
  status              String    @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  uploadedById        String
  batchName           String?
  skipErrors          Boolean   @default(false)
  updateExisting      Boolean   @default(false)
  processingStarted   DateTime?
  processingCompleted DateTime?
  errorLog            String? // JSON string of errors
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  uploadedBy          User      @relation(fields: [uploadedById], references: [id])

  @@index([status])
  @@index([uploadedById])
  @@index([createdAt])
  @@map("upload_batches")
}

// ================================
// RBAC SYSTEM MODELS
// ================================

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?

  // Relationships
  permissions RolePermission[]
  userRoles   UserRole[]
  createdBy   User?            @relation("RoleCreatedBy", fields: [createdById], references: [id])

  @@index([name])
  @@index([isActive])
  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid())
  code        String   @unique // e.g., "accounts.view", "calls.create"
  name        String
  description String?
  category    String // e.g., "Accounts", "Calls", "Users", "RBAC"
  resource    String // e.g., "accounts", "calls", "users"
  action      String // e.g., "view", "create", "edit", "delete"
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  rolePermissions RolePermission[]
  contexts        PermissionContext[] @relation("PermissionContexts")

  @@index([code])
  @@index([category])
  @@index([resource])
  @@map("permissions")
}

model RolePermission {
  id           String    @id @default(uuid())
  roleId       String
  permissionId String
  grantedAt    DateTime  @default(now())
  grantedById  String?
  expiresAt    DateTime?

  // Relationships
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  grantedBy  User?      @relation("PermissionGrantedBy", fields: [grantedById], references: [id])

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

model UserRole {
  id           String    @id @default(uuid())
  userId       String
  roleId       String
  assignedAt   DateTime  @default(now())
  assignedById String?
  expiresAt    DateTime?
  isActive     Boolean   @default(true)

  // Relationships
  user       User  @relation("UserRoleAssignment", fields: [userId], references: [id], onDelete: Cascade)
  role       Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedBy User? @relation("RoleAssignedBy", fields: [assignedById], references: [id])

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([isActive])
  @@map("user_roles")
}

// ================================
// AUDIT LOG SYSTEM
// ================================

model AuditLog {
  id        String   @id @default(uuid())
  actorId   String?
  action    String // e.g., "CREATE", "UPDATE", "DELETE", "LOGIN", "LOGOUT"
  entity    String // e.g., "User", "Role", "Account", "Call"
  entityId  String?
  oldValue  String? // JSON string of old values
  newValue  String? // JSON string of new values
  ipAddress String?
  userAgent String?
  sessionId String?
  metadata  String? // Additional context as JSON
  createdAt DateTime @default(now())

  // Relationships
  actor User? @relation("AuditLogActor", fields: [actorId], references: [id])

  @@index([actorId])
  @@index([action])
  @@index([entity])
  @@index([entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

// ================================
// DISPOSITION MANAGEMENT SYSTEM
// ================================

model DispositionCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  color       String? // Hex color for UI
  icon        String? // Icon name
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  dispositions Disposition[]

  @@index([sortOrder])
  @@index([isActive])
  @@map("disposition_categories")
}

model Disposition {
  id               String   @id @default(uuid())
  code             String   @unique
  name             String
  description      String?
  categoryId       String
  requiresFollowUp Boolean  @default(false)
  requiresPayment  Boolean  @default(false)
  requiresNotes    Boolean  @default(false)
  isSuccessful     Boolean  @default(false) // Indicates positive outcome
  sortOrder        Int      @default(0)
  isActive         Boolean  @default(true)
  usageCount       Int      @default(0) // Track how often used
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  category DispositionCategory @relation(fields: [categoryId], references: [id])

  @@index([code])
  @@index([categoryId])
  @@index([isActive])
  @@index([sortOrder])
  @@map("dispositions")
}

// ================================
// PHASE 4: ADVANCED SECURITY FEATURES
// ================================

// Multi-Factor Authentication
model UserMFA {
  id          String    @id @default(uuid())
  userId      String    @unique
  secret      String // Encrypted TOTP secret
  backupCodes String? // JSON array of encrypted backup codes
  isEnabled   Boolean   @default(false)
  lastUsedAt  DateTime?
  setupAt     DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  user User @relation("UserMFA", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_mfa")
}

// Enhanced Session Security
model UserSession {
  id                String   @id @default(uuid())
  userId            String
  sessionToken      String   @unique
  deviceFingerprint String
  ipAddress         String
  userAgent         String
  location          String? // Geo location
  riskScore         Float    @default(0.0)
  isActive          Boolean  @default(true)
  lastActivityAt    DateTime @default(now())
  expiresAt         DateTime
  createdAt         DateTime @default(now())

  // Security metadata
  loginMethod String? // password, mfa, sso
  deviceType  String? // desktop, mobile, tablet
  browserInfo String? // JSON with browser details

  // Relationships
  user User @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@index([deviceFingerprint])
  @@index([isActive])
  @@index([expiresAt])
  @@map("user_sessions")
}

// Data Encryption Keys Management
model EncryptionKey {
  id        String    @id @default(uuid())
  keyId     String    @unique
  algorithm String    @default("AES-256-CBC")
  purpose   String // field_encryption, file_encryption, etc.
  isActive  Boolean   @default(true)
  rotatedAt DateTime?
  expiresAt DateTime?
  createdAt DateTime  @default(now())

  // Key metadata (actual keys stored in environment/secrets)
  version Int @default(1)

  @@index([keyId])
  @@index([purpose])
  @@index([isActive])
  @@map("encryption_keys")
}

// Risk Assessment and Anomaly Detection
model SecurityEvent {
  id           String    @id @default(uuid())
  userId       String?
  sessionId    String?
  eventType    String // LOGIN_ATTEMPT, PERMISSION_DENIED, SUSPICIOUS_ACTIVITY, etc.
  severity     String // LOW, MEDIUM, HIGH, CRITICAL
  description  String
  details      String? // JSON with event details
  ipAddress    String?
  userAgent    String?
  location     String?
  riskScore    Float     @default(0.0)
  isBlocked    Boolean   @default(false)
  resolvedAt   DateTime?
  resolvedById String?
  createdAt    DateTime  @default(now())

  // Relationships
  user       User? @relation("UserSecurityEvents", fields: [userId], references: [id])
  resolvedBy User? @relation("SecurityEventResolver", fields: [resolvedById], references: [id])

  @@index([userId])
  @@index([eventType])
  @@index([severity])
  @@index([createdAt])
  @@index([isBlocked])
  @@map("security_events")
}

// Dynamic Permission Context
model PermissionContext {
  id           String    @id @default(uuid())
  userId       String
  permissionId String
  context      String // JSON with contextual data
  grantedAt    DateTime  @default(now())
  expiresAt    DateTime?
  isActive     Boolean   @default(true)

  // Context metadata
  ipRange             String? // Allowed IP ranges
  timeRestriction     String? // JSON with time-based restrictions
  locationRestriction String? // JSON with geo restrictions
  deviceRestriction   String? // JSON with device restrictions

  // Relationships
  user       User       @relation("UserPermissionContexts", fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation("PermissionContexts", fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
  @@index([isActive])
  @@index([expiresAt])
  @@map("permission_contexts")
}
