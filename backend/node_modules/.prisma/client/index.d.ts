
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model RefreshToken
 * 
 */
export type RefreshToken = $Result.DefaultSelection<Prisma.$RefreshTokenPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model AccountPhone
 * 
 */
export type AccountPhone = $Result.DefaultSelection<Prisma.$AccountPhonePayload>
/**
 * Model Call
 * 
 */
export type Call = $Result.DefaultSelection<Prisma.$CallPayload>
/**
 * Model AccountAction
 * 
 */
export type AccountAction = $Result.DefaultSelection<Prisma.$AccountActionPayload>
/**
 * Model UploadBatch
 * 
 */
export type UploadBatch = $Result.DefaultSelection<Prisma.$UploadBatchPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model RolePermission
 * 
 */
export type RolePermission = $Result.DefaultSelection<Prisma.$RolePermissionPayload>
/**
 * Model UserRole
 * 
 */
export type UserRole = $Result.DefaultSelection<Prisma.$UserRolePayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model DispositionCategory
 * 
 */
export type DispositionCategory = $Result.DefaultSelection<Prisma.$DispositionCategoryPayload>
/**
 * Model Disposition
 * 
 */
export type Disposition = $Result.DefaultSelection<Prisma.$DispositionPayload>
/**
 * Model UserMFA
 * 
 */
export type UserMFA = $Result.DefaultSelection<Prisma.$UserMFAPayload>
/**
 * Model UserSession
 * 
 */
export type UserSession = $Result.DefaultSelection<Prisma.$UserSessionPayload>
/**
 * Model EncryptionKey
 * 
 */
export type EncryptionKey = $Result.DefaultSelection<Prisma.$EncryptionKeyPayload>
/**
 * Model SecurityEvent
 * 
 */
export type SecurityEvent = $Result.DefaultSelection<Prisma.$SecurityEventPayload>
/**
 * Model PermissionContext
 * 
 */
export type PermissionContext = $Result.DefaultSelection<Prisma.$PermissionContextPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.refreshToken`: Exposes CRUD operations for the **RefreshToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefreshTokens
    * const refreshTokens = await prisma.refreshToken.findMany()
    * ```
    */
  get refreshToken(): Prisma.RefreshTokenDelegate<ExtArgs>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.accountPhone`: Exposes CRUD operations for the **AccountPhone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountPhones
    * const accountPhones = await prisma.accountPhone.findMany()
    * ```
    */
  get accountPhone(): Prisma.AccountPhoneDelegate<ExtArgs>;

  /**
   * `prisma.call`: Exposes CRUD operations for the **Call** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Calls
    * const calls = await prisma.call.findMany()
    * ```
    */
  get call(): Prisma.CallDelegate<ExtArgs>;

  /**
   * `prisma.accountAction`: Exposes CRUD operations for the **AccountAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountActions
    * const accountActions = await prisma.accountAction.findMany()
    * ```
    */
  get accountAction(): Prisma.AccountActionDelegate<ExtArgs>;

  /**
   * `prisma.uploadBatch`: Exposes CRUD operations for the **UploadBatch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UploadBatches
    * const uploadBatches = await prisma.uploadBatch.findMany()
    * ```
    */
  get uploadBatch(): Prisma.UploadBatchDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs>;

  /**
   * `prisma.rolePermission`: Exposes CRUD operations for the **RolePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RolePermissions
    * const rolePermissions = await prisma.rolePermission.findMany()
    * ```
    */
  get rolePermission(): Prisma.RolePermissionDelegate<ExtArgs>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.UserRoleDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;

  /**
   * `prisma.dispositionCategory`: Exposes CRUD operations for the **DispositionCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DispositionCategories
    * const dispositionCategories = await prisma.dispositionCategory.findMany()
    * ```
    */
  get dispositionCategory(): Prisma.DispositionCategoryDelegate<ExtArgs>;

  /**
   * `prisma.disposition`: Exposes CRUD operations for the **Disposition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dispositions
    * const dispositions = await prisma.disposition.findMany()
    * ```
    */
  get disposition(): Prisma.DispositionDelegate<ExtArgs>;

  /**
   * `prisma.userMFA`: Exposes CRUD operations for the **UserMFA** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserMFAS
    * const userMFAS = await prisma.userMFA.findMany()
    * ```
    */
  get userMFA(): Prisma.UserMFADelegate<ExtArgs>;

  /**
   * `prisma.userSession`: Exposes CRUD operations for the **UserSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSessions
    * const userSessions = await prisma.userSession.findMany()
    * ```
    */
  get userSession(): Prisma.UserSessionDelegate<ExtArgs>;

  /**
   * `prisma.encryptionKey`: Exposes CRUD operations for the **EncryptionKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EncryptionKeys
    * const encryptionKeys = await prisma.encryptionKey.findMany()
    * ```
    */
  get encryptionKey(): Prisma.EncryptionKeyDelegate<ExtArgs>;

  /**
   * `prisma.securityEvent`: Exposes CRUD operations for the **SecurityEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SecurityEvents
    * const securityEvents = await prisma.securityEvent.findMany()
    * ```
    */
  get securityEvent(): Prisma.SecurityEventDelegate<ExtArgs>;

  /**
   * `prisma.permissionContext`: Exposes CRUD operations for the **PermissionContext** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PermissionContexts
    * const permissionContexts = await prisma.permissionContext.findMany()
    * ```
    */
  get permissionContext(): Prisma.PermissionContextDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    RefreshToken: 'RefreshToken',
    Account: 'Account',
    AccountPhone: 'AccountPhone',
    Call: 'Call',
    AccountAction: 'AccountAction',
    UploadBatch: 'UploadBatch',
    Role: 'Role',
    Permission: 'Permission',
    RolePermission: 'RolePermission',
    UserRole: 'UserRole',
    AuditLog: 'AuditLog',
    DispositionCategory: 'DispositionCategory',
    Disposition: 'Disposition',
    UserMFA: 'UserMFA',
    UserSession: 'UserSession',
    EncryptionKey: 'EncryptionKey',
    SecurityEvent: 'SecurityEvent',
    PermissionContext: 'PermissionContext'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "refreshToken" | "account" | "accountPhone" | "call" | "accountAction" | "uploadBatch" | "role" | "permission" | "rolePermission" | "userRole" | "auditLog" | "dispositionCategory" | "disposition" | "userMFA" | "userSession" | "encryptionKey" | "securityEvent" | "permissionContext"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      RefreshToken: {
        payload: Prisma.$RefreshTokenPayload<ExtArgs>
        fields: Prisma.RefreshTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefreshTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefreshTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findFirst: {
            args: Prisma.RefreshTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefreshTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findMany: {
            args: Prisma.RefreshTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          create: {
            args: Prisma.RefreshTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          createMany: {
            args: Prisma.RefreshTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RefreshTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          delete: {
            args: Prisma.RefreshTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          update: {
            args: Prisma.RefreshTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          deleteMany: {
            args: Prisma.RefreshTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RefreshTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RefreshTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          aggregate: {
            args: Prisma.RefreshTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefreshToken>
          }
          groupBy: {
            args: Prisma.RefreshTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefreshTokenCountArgs<ExtArgs>
            result: $Utils.Optional<RefreshTokenCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      AccountPhone: {
        payload: Prisma.$AccountPhonePayload<ExtArgs>
        fields: Prisma.AccountPhoneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountPhoneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPhonePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountPhoneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPhonePayload>
          }
          findFirst: {
            args: Prisma.AccountPhoneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPhonePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountPhoneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPhonePayload>
          }
          findMany: {
            args: Prisma.AccountPhoneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPhonePayload>[]
          }
          create: {
            args: Prisma.AccountPhoneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPhonePayload>
          }
          createMany: {
            args: Prisma.AccountPhoneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountPhoneCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPhonePayload>[]
          }
          delete: {
            args: Prisma.AccountPhoneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPhonePayload>
          }
          update: {
            args: Prisma.AccountPhoneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPhonePayload>
          }
          deleteMany: {
            args: Prisma.AccountPhoneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountPhoneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountPhoneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPhonePayload>
          }
          aggregate: {
            args: Prisma.AccountPhoneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountPhone>
          }
          groupBy: {
            args: Prisma.AccountPhoneGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountPhoneGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountPhoneCountArgs<ExtArgs>
            result: $Utils.Optional<AccountPhoneCountAggregateOutputType> | number
          }
        }
      }
      Call: {
        payload: Prisma.$CallPayload<ExtArgs>
        fields: Prisma.CallFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CallFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CallFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallPayload>
          }
          findFirst: {
            args: Prisma.CallFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CallFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallPayload>
          }
          findMany: {
            args: Prisma.CallFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallPayload>[]
          }
          create: {
            args: Prisma.CallCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallPayload>
          }
          createMany: {
            args: Prisma.CallCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CallCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallPayload>[]
          }
          delete: {
            args: Prisma.CallDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallPayload>
          }
          update: {
            args: Prisma.CallUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallPayload>
          }
          deleteMany: {
            args: Prisma.CallDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CallUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CallUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CallPayload>
          }
          aggregate: {
            args: Prisma.CallAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCall>
          }
          groupBy: {
            args: Prisma.CallGroupByArgs<ExtArgs>
            result: $Utils.Optional<CallGroupByOutputType>[]
          }
          count: {
            args: Prisma.CallCountArgs<ExtArgs>
            result: $Utils.Optional<CallCountAggregateOutputType> | number
          }
        }
      }
      AccountAction: {
        payload: Prisma.$AccountActionPayload<ExtArgs>
        fields: Prisma.AccountActionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountActionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountActionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountActionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountActionPayload>
          }
          findFirst: {
            args: Prisma.AccountActionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountActionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountActionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountActionPayload>
          }
          findMany: {
            args: Prisma.AccountActionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountActionPayload>[]
          }
          create: {
            args: Prisma.AccountActionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountActionPayload>
          }
          createMany: {
            args: Prisma.AccountActionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountActionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountActionPayload>[]
          }
          delete: {
            args: Prisma.AccountActionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountActionPayload>
          }
          update: {
            args: Prisma.AccountActionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountActionPayload>
          }
          deleteMany: {
            args: Prisma.AccountActionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountActionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountActionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountActionPayload>
          }
          aggregate: {
            args: Prisma.AccountActionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountAction>
          }
          groupBy: {
            args: Prisma.AccountActionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountActionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountActionCountArgs<ExtArgs>
            result: $Utils.Optional<AccountActionCountAggregateOutputType> | number
          }
        }
      }
      UploadBatch: {
        payload: Prisma.$UploadBatchPayload<ExtArgs>
        fields: Prisma.UploadBatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UploadBatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadBatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UploadBatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadBatchPayload>
          }
          findFirst: {
            args: Prisma.UploadBatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadBatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UploadBatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadBatchPayload>
          }
          findMany: {
            args: Prisma.UploadBatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadBatchPayload>[]
          }
          create: {
            args: Prisma.UploadBatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadBatchPayload>
          }
          createMany: {
            args: Prisma.UploadBatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UploadBatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadBatchPayload>[]
          }
          delete: {
            args: Prisma.UploadBatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadBatchPayload>
          }
          update: {
            args: Prisma.UploadBatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadBatchPayload>
          }
          deleteMany: {
            args: Prisma.UploadBatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UploadBatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UploadBatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadBatchPayload>
          }
          aggregate: {
            args: Prisma.UploadBatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUploadBatch>
          }
          groupBy: {
            args: Prisma.UploadBatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<UploadBatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.UploadBatchCountArgs<ExtArgs>
            result: $Utils.Optional<UploadBatchCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      RolePermission: {
        payload: Prisma.$RolePermissionPayload<ExtArgs>
        fields: Prisma.RolePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolePermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolePermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findFirst: {
            args: Prisma.RolePermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolePermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findMany: {
            args: Prisma.RolePermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          create: {
            args: Prisma.RolePermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          createMany: {
            args: Prisma.RolePermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RolePermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          delete: {
            args: Prisma.RolePermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          update: {
            args: Prisma.RolePermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          deleteMany: {
            args: Prisma.RolePermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RolePermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RolePermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          aggregate: {
            args: Prisma.RolePermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRolePermission>
          }
          groupBy: {
            args: Prisma.RolePermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolePermissionCountArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionCountAggregateOutputType> | number
          }
        }
      }
      UserRole: {
        payload: Prisma.$UserRolePayload<ExtArgs>
        fields: Prisma.UserRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findFirst: {
            args: Prisma.UserRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findMany: {
            args: Prisma.UserRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          create: {
            args: Prisma.UserRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          createMany: {
            args: Prisma.UserRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          delete: {
            args: Prisma.UserRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          update: {
            args: Prisma.UserRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          deleteMany: {
            args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          aggregate: {
            args: Prisma.UserRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRole>
          }
          groupBy: {
            args: Prisma.UserRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRoleCountArgs<ExtArgs>
            result: $Utils.Optional<UserRoleCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      DispositionCategory: {
        payload: Prisma.$DispositionCategoryPayload<ExtArgs>
        fields: Prisma.DispositionCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DispositionCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DispositionCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionCategoryPayload>
          }
          findFirst: {
            args: Prisma.DispositionCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DispositionCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionCategoryPayload>
          }
          findMany: {
            args: Prisma.DispositionCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionCategoryPayload>[]
          }
          create: {
            args: Prisma.DispositionCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionCategoryPayload>
          }
          createMany: {
            args: Prisma.DispositionCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DispositionCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionCategoryPayload>[]
          }
          delete: {
            args: Prisma.DispositionCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionCategoryPayload>
          }
          update: {
            args: Prisma.DispositionCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionCategoryPayload>
          }
          deleteMany: {
            args: Prisma.DispositionCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DispositionCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DispositionCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionCategoryPayload>
          }
          aggregate: {
            args: Prisma.DispositionCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDispositionCategory>
          }
          groupBy: {
            args: Prisma.DispositionCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<DispositionCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.DispositionCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<DispositionCategoryCountAggregateOutputType> | number
          }
        }
      }
      Disposition: {
        payload: Prisma.$DispositionPayload<ExtArgs>
        fields: Prisma.DispositionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DispositionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DispositionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionPayload>
          }
          findFirst: {
            args: Prisma.DispositionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DispositionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionPayload>
          }
          findMany: {
            args: Prisma.DispositionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionPayload>[]
          }
          create: {
            args: Prisma.DispositionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionPayload>
          }
          createMany: {
            args: Prisma.DispositionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DispositionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionPayload>[]
          }
          delete: {
            args: Prisma.DispositionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionPayload>
          }
          update: {
            args: Prisma.DispositionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionPayload>
          }
          deleteMany: {
            args: Prisma.DispositionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DispositionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DispositionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DispositionPayload>
          }
          aggregate: {
            args: Prisma.DispositionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDisposition>
          }
          groupBy: {
            args: Prisma.DispositionGroupByArgs<ExtArgs>
            result: $Utils.Optional<DispositionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DispositionCountArgs<ExtArgs>
            result: $Utils.Optional<DispositionCountAggregateOutputType> | number
          }
        }
      }
      UserMFA: {
        payload: Prisma.$UserMFAPayload<ExtArgs>
        fields: Prisma.UserMFAFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserMFAFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMFAPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserMFAFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMFAPayload>
          }
          findFirst: {
            args: Prisma.UserMFAFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMFAPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserMFAFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMFAPayload>
          }
          findMany: {
            args: Prisma.UserMFAFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMFAPayload>[]
          }
          create: {
            args: Prisma.UserMFACreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMFAPayload>
          }
          createMany: {
            args: Prisma.UserMFACreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserMFACreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMFAPayload>[]
          }
          delete: {
            args: Prisma.UserMFADeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMFAPayload>
          }
          update: {
            args: Prisma.UserMFAUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMFAPayload>
          }
          deleteMany: {
            args: Prisma.UserMFADeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserMFAUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserMFAUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserMFAPayload>
          }
          aggregate: {
            args: Prisma.UserMFAAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserMFA>
          }
          groupBy: {
            args: Prisma.UserMFAGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserMFAGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserMFACountArgs<ExtArgs>
            result: $Utils.Optional<UserMFACountAggregateOutputType> | number
          }
        }
      }
      UserSession: {
        payload: Prisma.$UserSessionPayload<ExtArgs>
        fields: Prisma.UserSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findFirst: {
            args: Prisma.UserSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findMany: {
            args: Prisma.UserSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          create: {
            args: Prisma.UserSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          createMany: {
            args: Prisma.UserSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          delete: {
            args: Prisma.UserSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          update: {
            args: Prisma.UserSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          deleteMany: {
            args: Prisma.UserSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          aggregate: {
            args: Prisma.UserSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSession>
          }
          groupBy: {
            args: Prisma.UserSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSessionCountArgs<ExtArgs>
            result: $Utils.Optional<UserSessionCountAggregateOutputType> | number
          }
        }
      }
      EncryptionKey: {
        payload: Prisma.$EncryptionKeyPayload<ExtArgs>
        fields: Prisma.EncryptionKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EncryptionKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EncryptionKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>
          }
          findFirst: {
            args: Prisma.EncryptionKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EncryptionKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>
          }
          findMany: {
            args: Prisma.EncryptionKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>[]
          }
          create: {
            args: Prisma.EncryptionKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>
          }
          createMany: {
            args: Prisma.EncryptionKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EncryptionKeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>[]
          }
          delete: {
            args: Prisma.EncryptionKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>
          }
          update: {
            args: Prisma.EncryptionKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>
          }
          deleteMany: {
            args: Prisma.EncryptionKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EncryptionKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EncryptionKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EncryptionKeyPayload>
          }
          aggregate: {
            args: Prisma.EncryptionKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEncryptionKey>
          }
          groupBy: {
            args: Prisma.EncryptionKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<EncryptionKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.EncryptionKeyCountArgs<ExtArgs>
            result: $Utils.Optional<EncryptionKeyCountAggregateOutputType> | number
          }
        }
      }
      SecurityEvent: {
        payload: Prisma.$SecurityEventPayload<ExtArgs>
        fields: Prisma.SecurityEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SecurityEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SecurityEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityEventPayload>
          }
          findFirst: {
            args: Prisma.SecurityEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SecurityEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityEventPayload>
          }
          findMany: {
            args: Prisma.SecurityEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityEventPayload>[]
          }
          create: {
            args: Prisma.SecurityEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityEventPayload>
          }
          createMany: {
            args: Prisma.SecurityEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SecurityEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityEventPayload>[]
          }
          delete: {
            args: Prisma.SecurityEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityEventPayload>
          }
          update: {
            args: Prisma.SecurityEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityEventPayload>
          }
          deleteMany: {
            args: Prisma.SecurityEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SecurityEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SecurityEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SecurityEventPayload>
          }
          aggregate: {
            args: Prisma.SecurityEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSecurityEvent>
          }
          groupBy: {
            args: Prisma.SecurityEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<SecurityEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.SecurityEventCountArgs<ExtArgs>
            result: $Utils.Optional<SecurityEventCountAggregateOutputType> | number
          }
        }
      }
      PermissionContext: {
        payload: Prisma.$PermissionContextPayload<ExtArgs>
        fields: Prisma.PermissionContextFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionContextFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionContextPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionContextFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionContextPayload>
          }
          findFirst: {
            args: Prisma.PermissionContextFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionContextPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionContextFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionContextPayload>
          }
          findMany: {
            args: Prisma.PermissionContextFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionContextPayload>[]
          }
          create: {
            args: Prisma.PermissionContextCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionContextPayload>
          }
          createMany: {
            args: Prisma.PermissionContextCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PermissionContextCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionContextPayload>[]
          }
          delete: {
            args: Prisma.PermissionContextDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionContextPayload>
          }
          update: {
            args: Prisma.PermissionContextUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionContextPayload>
          }
          deleteMany: {
            args: Prisma.PermissionContextDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionContextUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PermissionContextUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionContextPayload>
          }
          aggregate: {
            args: Prisma.PermissionContextAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermissionContext>
          }
          groupBy: {
            args: Prisma.PermissionContextGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionContextGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionContextCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionContextCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accountActions: number
    assignedAccounts: number
    calls: number
    refreshTokens: number
    uploadBatches: number
    createdRoles: number
    userRoles: number
    assignedRoles: number
    grantedPermissions: number
    auditLogs: number
    sessions: number
    securityEvents: number
    resolvedSecurityEvents: number
    permissionContexts: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accountActions?: boolean | UserCountOutputTypeCountAccountActionsArgs
    assignedAccounts?: boolean | UserCountOutputTypeCountAssignedAccountsArgs
    calls?: boolean | UserCountOutputTypeCountCallsArgs
    refreshTokens?: boolean | UserCountOutputTypeCountRefreshTokensArgs
    uploadBatches?: boolean | UserCountOutputTypeCountUploadBatchesArgs
    createdRoles?: boolean | UserCountOutputTypeCountCreatedRolesArgs
    userRoles?: boolean | UserCountOutputTypeCountUserRolesArgs
    assignedRoles?: boolean | UserCountOutputTypeCountAssignedRolesArgs
    grantedPermissions?: boolean | UserCountOutputTypeCountGrantedPermissionsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    securityEvents?: boolean | UserCountOutputTypeCountSecurityEventsArgs
    resolvedSecurityEvents?: boolean | UserCountOutputTypeCountResolvedSecurityEventsArgs
    permissionContexts?: boolean | UserCountOutputTypeCountPermissionContextsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountActionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CallWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRefreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUploadBatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UploadBatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGrantedPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSecurityEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SecurityEventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResolvedSecurityEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SecurityEventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPermissionContextsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionContextWhereInput
  }


  /**
   * Count Type AccountCountOutputType
   */

  export type AccountCountOutputType = {
    actions: number
    phoneNumbers: number
    calls: number
  }

  export type AccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actions?: boolean | AccountCountOutputTypeCountActionsArgs
    phoneNumbers?: boolean | AccountCountOutputTypeCountPhoneNumbersArgs
    calls?: boolean | AccountCountOutputTypeCountCallsArgs
  }

  // Custom InputTypes
  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     */
    select?: AccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountActionWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountPhoneNumbersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountPhoneWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountCallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CallWhereInput
  }


  /**
   * Count Type AccountPhoneCountOutputType
   */

  export type AccountPhoneCountOutputType = {
    calls: number
  }

  export type AccountPhoneCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    calls?: boolean | AccountPhoneCountOutputTypeCountCallsArgs
  }

  // Custom InputTypes
  /**
   * AccountPhoneCountOutputType without action
   */
  export type AccountPhoneCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPhoneCountOutputType
     */
    select?: AccountPhoneCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccountPhoneCountOutputType without action
   */
  export type AccountPhoneCountOutputTypeCountCallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CallWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    permissions: number
    userRoles: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | RoleCountOutputTypeCountPermissionsArgs
    userRoles?: boolean | RoleCountOutputTypeCountUserRolesArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUserRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    rolePermissions: number
    contexts: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rolePermissions?: boolean | PermissionCountOutputTypeCountRolePermissionsArgs
    contexts?: boolean | PermissionCountOutputTypeCountContextsArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountRolePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountContextsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionContextWhereInput
  }


  /**
   * Count Type DispositionCategoryCountOutputType
   */

  export type DispositionCategoryCountOutputType = {
    dispositions: number
  }

  export type DispositionCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dispositions?: boolean | DispositionCategoryCountOutputTypeCountDispositionsArgs
  }

  // Custom InputTypes
  /**
   * DispositionCategoryCountOutputType without action
   */
  export type DispositionCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispositionCategoryCountOutputType
     */
    select?: DispositionCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DispositionCategoryCountOutputType without action
   */
  export type DispositionCategoryCountOutputTypeCountDispositionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DispositionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    failedLoginAttempts: number | null
  }

  export type UserSumAggregateOutputType = {
    failedLoginAttempts: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    isActive: boolean | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    emailVerified: boolean | null
    emailVerifyToken: string | null
    emailVerifyExpires: Date | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    failedLoginAttempts: number | null
    accountLockedUntil: Date | null
    lastFailedLogin: Date | null
    passwordChangedAt: Date | null
    mustChangePassword: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    isActive: boolean | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    emailVerified: boolean | null
    emailVerifyToken: string | null
    emailVerifyExpires: Date | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    failedLoginAttempts: number | null
    accountLockedUntil: Date | null
    lastFailedLogin: Date | null
    passwordChangedAt: Date | null
    mustChangePassword: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    role: number
    isActive: number
    lastLogin: number
    createdAt: number
    updatedAt: number
    emailVerified: number
    emailVerifyToken: number
    emailVerifyExpires: number
    passwordResetToken: number
    passwordResetExpires: number
    failedLoginAttempts: number
    accountLockedUntil: number
    lastFailedLogin: number
    passwordChangedAt: number
    mustChangePassword: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    failedLoginAttempts?: true
  }

  export type UserSumAggregateInputType = {
    failedLoginAttempts?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    emailVerified?: true
    emailVerifyToken?: true
    emailVerifyExpires?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    failedLoginAttempts?: true
    accountLockedUntil?: true
    lastFailedLogin?: true
    passwordChangedAt?: true
    mustChangePassword?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    emailVerified?: true
    emailVerifyToken?: true
    emailVerifyExpires?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    failedLoginAttempts?: true
    accountLockedUntil?: true
    lastFailedLogin?: true
    passwordChangedAt?: true
    mustChangePassword?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    emailVerified?: true
    emailVerifyToken?: true
    emailVerifyExpires?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    failedLoginAttempts?: true
    accountLockedUntil?: true
    lastFailedLogin?: true
    passwordChangedAt?: true
    mustChangePassword?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: string
    isActive: boolean
    lastLogin: Date | null
    createdAt: Date
    updatedAt: Date
    emailVerified: boolean
    emailVerifyToken: string | null
    emailVerifyExpires: Date | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    failedLoginAttempts: number
    accountLockedUntil: Date | null
    lastFailedLogin: Date | null
    passwordChangedAt: Date
    mustChangePassword: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    emailVerified?: boolean
    emailVerifyToken?: boolean
    emailVerifyExpires?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    failedLoginAttempts?: boolean
    accountLockedUntil?: boolean
    lastFailedLogin?: boolean
    passwordChangedAt?: boolean
    mustChangePassword?: boolean
    accountActions?: boolean | User$accountActionsArgs<ExtArgs>
    assignedAccounts?: boolean | User$assignedAccountsArgs<ExtArgs>
    calls?: boolean | User$callsArgs<ExtArgs>
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    uploadBatches?: boolean | User$uploadBatchesArgs<ExtArgs>
    createdRoles?: boolean | User$createdRolesArgs<ExtArgs>
    userRoles?: boolean | User$userRolesArgs<ExtArgs>
    assignedRoles?: boolean | User$assignedRolesArgs<ExtArgs>
    grantedPermissions?: boolean | User$grantedPermissionsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    mfaConfig?: boolean | User$mfaConfigArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    securityEvents?: boolean | User$securityEventsArgs<ExtArgs>
    resolvedSecurityEvents?: boolean | User$resolvedSecurityEventsArgs<ExtArgs>
    permissionContexts?: boolean | User$permissionContextsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    emailVerified?: boolean
    emailVerifyToken?: boolean
    emailVerifyExpires?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    failedLoginAttempts?: boolean
    accountLockedUntil?: boolean
    lastFailedLogin?: boolean
    passwordChangedAt?: boolean
    mustChangePassword?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    emailVerified?: boolean
    emailVerifyToken?: boolean
    emailVerifyExpires?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    failedLoginAttempts?: boolean
    accountLockedUntil?: boolean
    lastFailedLogin?: boolean
    passwordChangedAt?: boolean
    mustChangePassword?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accountActions?: boolean | User$accountActionsArgs<ExtArgs>
    assignedAccounts?: boolean | User$assignedAccountsArgs<ExtArgs>
    calls?: boolean | User$callsArgs<ExtArgs>
    refreshTokens?: boolean | User$refreshTokensArgs<ExtArgs>
    uploadBatches?: boolean | User$uploadBatchesArgs<ExtArgs>
    createdRoles?: boolean | User$createdRolesArgs<ExtArgs>
    userRoles?: boolean | User$userRolesArgs<ExtArgs>
    assignedRoles?: boolean | User$assignedRolesArgs<ExtArgs>
    grantedPermissions?: boolean | User$grantedPermissionsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    mfaConfig?: boolean | User$mfaConfigArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    securityEvents?: boolean | User$securityEventsArgs<ExtArgs>
    resolvedSecurityEvents?: boolean | User$resolvedSecurityEventsArgs<ExtArgs>
    permissionContexts?: boolean | User$permissionContextsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accountActions: Prisma.$AccountActionPayload<ExtArgs>[]
      assignedAccounts: Prisma.$AccountPayload<ExtArgs>[]
      calls: Prisma.$CallPayload<ExtArgs>[]
      refreshTokens: Prisma.$RefreshTokenPayload<ExtArgs>[]
      uploadBatches: Prisma.$UploadBatchPayload<ExtArgs>[]
      createdRoles: Prisma.$RolePayload<ExtArgs>[]
      userRoles: Prisma.$UserRolePayload<ExtArgs>[]
      assignedRoles: Prisma.$UserRolePayload<ExtArgs>[]
      grantedPermissions: Prisma.$RolePermissionPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      mfaConfig: Prisma.$UserMFAPayload<ExtArgs> | null
      sessions: Prisma.$UserSessionPayload<ExtArgs>[]
      securityEvents: Prisma.$SecurityEventPayload<ExtArgs>[]
      resolvedSecurityEvents: Prisma.$SecurityEventPayload<ExtArgs>[]
      permissionContexts: Prisma.$PermissionContextPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      firstName: string
      lastName: string
      role: string
      isActive: boolean
      lastLogin: Date | null
      createdAt: Date
      updatedAt: Date
      emailVerified: boolean
      emailVerifyToken: string | null
      emailVerifyExpires: Date | null
      passwordResetToken: string | null
      passwordResetExpires: Date | null
      failedLoginAttempts: number
      accountLockedUntil: Date | null
      lastFailedLogin: Date | null
      passwordChangedAt: Date
      mustChangePassword: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accountActions<T extends User$accountActionsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountActionPayload<ExtArgs>, T, "findMany"> | Null>
    assignedAccounts<T extends User$assignedAccountsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedAccountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany"> | Null>
    calls<T extends User$callsArgs<ExtArgs> = {}>(args?: Subset<T, User$callsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "findMany"> | Null>
    refreshTokens<T extends User$refreshTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$refreshTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany"> | Null>
    uploadBatches<T extends User$uploadBatchesArgs<ExtArgs> = {}>(args?: Subset<T, User$uploadBatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UploadBatchPayload<ExtArgs>, T, "findMany"> | Null>
    createdRoles<T extends User$createdRolesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany"> | Null>
    userRoles<T extends User$userRolesArgs<ExtArgs> = {}>(args?: Subset<T, User$userRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany"> | Null>
    assignedRoles<T extends User$assignedRolesArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany"> | Null>
    grantedPermissions<T extends User$grantedPermissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$grantedPermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    mfaConfig<T extends User$mfaConfigArgs<ExtArgs> = {}>(args?: Subset<T, User$mfaConfigArgs<ExtArgs>>): Prisma__UserMFAClient<$Result.GetResult<Prisma.$UserMFAPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany"> | Null>
    securityEvents<T extends User$securityEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$securityEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecurityEventPayload<ExtArgs>, T, "findMany"> | Null>
    resolvedSecurityEvents<T extends User$resolvedSecurityEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$resolvedSecurityEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecurityEventPayload<ExtArgs>, T, "findMany"> | Null>
    permissionContexts<T extends User$permissionContextsArgs<ExtArgs> = {}>(args?: Subset<T, User$permissionContextsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionContextPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly emailVerifyToken: FieldRef<"User", 'String'>
    readonly emailVerifyExpires: FieldRef<"User", 'DateTime'>
    readonly passwordResetToken: FieldRef<"User", 'String'>
    readonly passwordResetExpires: FieldRef<"User", 'DateTime'>
    readonly failedLoginAttempts: FieldRef<"User", 'Int'>
    readonly accountLockedUntil: FieldRef<"User", 'DateTime'>
    readonly lastFailedLogin: FieldRef<"User", 'DateTime'>
    readonly passwordChangedAt: FieldRef<"User", 'DateTime'>
    readonly mustChangePassword: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.accountActions
   */
  export type User$accountActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountAction
     */
    select?: AccountActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountActionInclude<ExtArgs> | null
    where?: AccountActionWhereInput
    orderBy?: AccountActionOrderByWithRelationInput | AccountActionOrderByWithRelationInput[]
    cursor?: AccountActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountActionScalarFieldEnum | AccountActionScalarFieldEnum[]
  }

  /**
   * User.assignedAccounts
   */
  export type User$assignedAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.calls
   */
  export type User$callsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Call
     */
    select?: CallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CallInclude<ExtArgs> | null
    where?: CallWhereInput
    orderBy?: CallOrderByWithRelationInput | CallOrderByWithRelationInput[]
    cursor?: CallWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CallScalarFieldEnum | CallScalarFieldEnum[]
  }

  /**
   * User.refreshTokens
   */
  export type User$refreshTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    cursor?: RefreshTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * User.uploadBatches
   */
  export type User$uploadBatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadBatch
     */
    select?: UploadBatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadBatchInclude<ExtArgs> | null
    where?: UploadBatchWhereInput
    orderBy?: UploadBatchOrderByWithRelationInput | UploadBatchOrderByWithRelationInput[]
    cursor?: UploadBatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UploadBatchScalarFieldEnum | UploadBatchScalarFieldEnum[]
  }

  /**
   * User.createdRoles
   */
  export type User$createdRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    cursor?: RoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * User.userRoles
   */
  export type User$userRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * User.assignedRoles
   */
  export type User$assignedRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * User.grantedPermissions
   */
  export type User$grantedPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.mfaConfig
   */
  export type User$mfaConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMFA
     */
    select?: UserMFASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMFAInclude<ExtArgs> | null
    where?: UserMFAWhereInput
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    cursor?: UserSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * User.securityEvents
   */
  export type User$securityEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityEvent
     */
    select?: SecurityEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityEventInclude<ExtArgs> | null
    where?: SecurityEventWhereInput
    orderBy?: SecurityEventOrderByWithRelationInput | SecurityEventOrderByWithRelationInput[]
    cursor?: SecurityEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SecurityEventScalarFieldEnum | SecurityEventScalarFieldEnum[]
  }

  /**
   * User.resolvedSecurityEvents
   */
  export type User$resolvedSecurityEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityEvent
     */
    select?: SecurityEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityEventInclude<ExtArgs> | null
    where?: SecurityEventWhereInput
    orderBy?: SecurityEventOrderByWithRelationInput | SecurityEventOrderByWithRelationInput[]
    cursor?: SecurityEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SecurityEventScalarFieldEnum | SecurityEventScalarFieldEnum[]
  }

  /**
   * User.permissionContexts
   */
  export type User$permissionContextsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionContext
     */
    select?: PermissionContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionContextInclude<ExtArgs> | null
    where?: PermissionContextWhereInput
    orderBy?: PermissionContextOrderByWithRelationInput | PermissionContextOrderByWithRelationInput[]
    cursor?: PermissionContextWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PermissionContextScalarFieldEnum | PermissionContextScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model RefreshToken
   */

  export type AggregateRefreshToken = {
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  export type RefreshTokenMinAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type RefreshTokenMaxAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type RefreshTokenCountAggregateOutputType = {
    id: number
    token: number
    userId: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type RefreshTokenMinAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
  }

  export type RefreshTokenMaxAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
  }

  export type RefreshTokenCountAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type RefreshTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshToken to aggregate.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefreshTokens
    **/
    _count?: true | RefreshTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefreshTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type GetRefreshTokenAggregateType<T extends RefreshTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateRefreshToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefreshToken[P]>
      : GetScalarType<T[P], AggregateRefreshToken[P]>
  }




  export type RefreshTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithAggregationInput | RefreshTokenOrderByWithAggregationInput[]
    by: RefreshTokenScalarFieldEnum[] | RefreshTokenScalarFieldEnum
    having?: RefreshTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefreshTokenCountAggregateInputType | true
    _min?: RefreshTokenMinAggregateInputType
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type RefreshTokenGroupByOutputType = {
    id: string
    token: string
    userId: string
    expiresAt: Date
    createdAt: Date
    _count: RefreshTokenCountAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  type GetRefreshTokenGroupByPayload<T extends RefreshTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefreshTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefreshTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
            : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
        }
      >
    >


  export type RefreshTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectScalar = {
    id?: boolean
    token?: boolean
    userId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type RefreshTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RefreshTokenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RefreshTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefreshToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      userId: string
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["refreshToken"]>
    composites: {}
  }

  type RefreshTokenGetPayload<S extends boolean | null | undefined | RefreshTokenDefaultArgs> = $Result.GetResult<Prisma.$RefreshTokenPayload, S>

  type RefreshTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefreshTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefreshTokenCountAggregateInputType | true
    }

  export interface RefreshTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefreshToken'], meta: { name: 'RefreshToken' } }
    /**
     * Find zero or one RefreshToken that matches the filter.
     * @param {RefreshTokenFindUniqueArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RefreshTokenFindUniqueArgs>(args: SelectSubset<T, RefreshTokenFindUniqueArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RefreshToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefreshTokenFindUniqueOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RefreshTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, RefreshTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RefreshToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RefreshTokenFindFirstArgs>(args?: SelectSubset<T, RefreshTokenFindFirstArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RefreshToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RefreshTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, RefreshTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RefreshTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany()
     * 
     * // Get first 10 RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RefreshTokenFindManyArgs>(args?: SelectSubset<T, RefreshTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RefreshToken.
     * @param {RefreshTokenCreateArgs} args - Arguments to create a RefreshToken.
     * @example
     * // Create one RefreshToken
     * const RefreshToken = await prisma.refreshToken.create({
     *   data: {
     *     // ... data to create a RefreshToken
     *   }
     * })
     * 
     */
    create<T extends RefreshTokenCreateArgs>(args: SelectSubset<T, RefreshTokenCreateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RefreshTokens.
     * @param {RefreshTokenCreateManyArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RefreshTokenCreateManyArgs>(args?: SelectSubset<T, RefreshTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RefreshTokens and returns the data saved in the database.
     * @param {RefreshTokenCreateManyAndReturnArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RefreshTokens and only return the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RefreshTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, RefreshTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RefreshToken.
     * @param {RefreshTokenDeleteArgs} args - Arguments to delete one RefreshToken.
     * @example
     * // Delete one RefreshToken
     * const RefreshToken = await prisma.refreshToken.delete({
     *   where: {
     *     // ... filter to delete one RefreshToken
     *   }
     * })
     * 
     */
    delete<T extends RefreshTokenDeleteArgs>(args: SelectSubset<T, RefreshTokenDeleteArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RefreshToken.
     * @param {RefreshTokenUpdateArgs} args - Arguments to update one RefreshToken.
     * @example
     * // Update one RefreshToken
     * const refreshToken = await prisma.refreshToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RefreshTokenUpdateArgs>(args: SelectSubset<T, RefreshTokenUpdateArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RefreshTokens.
     * @param {RefreshTokenDeleteManyArgs} args - Arguments to filter RefreshTokens to delete.
     * @example
     * // Delete a few RefreshTokens
     * const { count } = await prisma.refreshToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RefreshTokenDeleteManyArgs>(args?: SelectSubset<T, RefreshTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefreshTokens
     * const refreshToken = await prisma.refreshToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RefreshTokenUpdateManyArgs>(args: SelectSubset<T, RefreshTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefreshToken.
     * @param {RefreshTokenUpsertArgs} args - Arguments to update or create a RefreshToken.
     * @example
     * // Update or create a RefreshToken
     * const refreshToken = await prisma.refreshToken.upsert({
     *   create: {
     *     // ... data to create a RefreshToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefreshToken we want to update
     *   }
     * })
     */
    upsert<T extends RefreshTokenUpsertArgs>(args: SelectSubset<T, RefreshTokenUpsertArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenCountArgs} args - Arguments to filter RefreshTokens to count.
     * @example
     * // Count the number of RefreshTokens
     * const count = await prisma.refreshToken.count({
     *   where: {
     *     // ... the filter for the RefreshTokens we want to count
     *   }
     * })
    **/
    count<T extends RefreshTokenCountArgs>(
      args?: Subset<T, RefreshTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefreshTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefreshTokenAggregateArgs>(args: Subset<T, RefreshTokenAggregateArgs>): Prisma.PrismaPromise<GetRefreshTokenAggregateType<T>>

    /**
     * Group by RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefreshTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefreshTokenGroupByArgs['orderBy'] }
        : { orderBy?: RefreshTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefreshTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefreshTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefreshToken model
   */
  readonly fields: RefreshTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefreshToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefreshTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RefreshToken model
   */ 
  interface RefreshTokenFieldRefs {
    readonly id: FieldRef<"RefreshToken", 'String'>
    readonly token: FieldRef<"RefreshToken", 'String'>
    readonly userId: FieldRef<"RefreshToken", 'String'>
    readonly expiresAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly createdAt: FieldRef<"RefreshToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RefreshToken findUnique
   */
  export type RefreshTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findUniqueOrThrow
   */
  export type RefreshTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findFirst
   */
  export type RefreshTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findFirstOrThrow
   */
  export type RefreshTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findMany
   */
  export type RefreshTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshTokens to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken create
   */
  export type RefreshTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a RefreshToken.
     */
    data: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
  }

  /**
   * RefreshToken createMany
   */
  export type RefreshTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
  }

  /**
   * RefreshToken createManyAndReturn
   */
  export type RefreshTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RefreshToken update
   */
  export type RefreshTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a RefreshToken.
     */
    data: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
    /**
     * Choose, which RefreshToken to update.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken updateMany
   */
  export type RefreshTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefreshTokens.
     */
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyInput>
    /**
     * Filter which RefreshTokens to update
     */
    where?: RefreshTokenWhereInput
  }

  /**
   * RefreshToken upsert
   */
  export type RefreshTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the RefreshToken to update in case it exists.
     */
    where: RefreshTokenWhereUniqueInput
    /**
     * In case the RefreshToken found by the `where` argument doesn't exist, create a new RefreshToken with this data.
     */
    create: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
    /**
     * In case the RefreshToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
  }

  /**
   * RefreshToken delete
   */
  export type RefreshTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter which RefreshToken to delete.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken deleteMany
   */
  export type RefreshTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshTokens to delete
     */
    where?: RefreshTokenWhereInput
  }

  /**
   * RefreshToken without action
   */
  export type RefreshTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    originalAmount: number | null
    currentBalance: number | null
    amountPaid: number | null
    interestRate: number | null
    lastPaymentAmount: number | null
    daysPastDue: number | null
    contactAttempts: number | null
  }

  export type AccountSumAggregateOutputType = {
    originalAmount: number | null
    currentBalance: number | null
    amountPaid: number | null
    interestRate: number | null
    lastPaymentAmount: number | null
    daysPastDue: number | null
    contactAttempts: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    accountNumber: string | null
    firstName: string | null
    lastName: string | null
    fullName: string | null
    email: string | null
    address1: string | null
    address2: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    country: string | null
    originalAmount: number | null
    currentBalance: number | null
    amountPaid: number | null
    interestRate: number | null
    lastPaymentDate: Date | null
    lastPaymentAmount: number | null
    status: string | null
    priority: string | null
    assignedAgentId: string | null
    assignedDate: Date | null
    preferredContactMethod: string | null
    bestTimeToCall: string | null
    timezone: string | null
    language: string | null
    daysPastDue: number | null
    lastContactDate: Date | null
    nextContactDate: Date | null
    contactAttempts: number | null
    doNotCall: boolean | null
    disputeFlag: boolean | null
    bankruptcyFlag: boolean | null
    deceasedFlag: boolean | null
    notes: string | null
    source: string | null
    batchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    accountNumber: string | null
    firstName: string | null
    lastName: string | null
    fullName: string | null
    email: string | null
    address1: string | null
    address2: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    country: string | null
    originalAmount: number | null
    currentBalance: number | null
    amountPaid: number | null
    interestRate: number | null
    lastPaymentDate: Date | null
    lastPaymentAmount: number | null
    status: string | null
    priority: string | null
    assignedAgentId: string | null
    assignedDate: Date | null
    preferredContactMethod: string | null
    bestTimeToCall: string | null
    timezone: string | null
    language: string | null
    daysPastDue: number | null
    lastContactDate: Date | null
    nextContactDate: Date | null
    contactAttempts: number | null
    doNotCall: boolean | null
    disputeFlag: boolean | null
    bankruptcyFlag: boolean | null
    deceasedFlag: boolean | null
    notes: string | null
    source: string | null
    batchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    accountNumber: number
    firstName: number
    lastName: number
    fullName: number
    email: number
    address1: number
    address2: number
    city: number
    state: number
    zipCode: number
    country: number
    originalAmount: number
    currentBalance: number
    amountPaid: number
    interestRate: number
    lastPaymentDate: number
    lastPaymentAmount: number
    status: number
    priority: number
    assignedAgentId: number
    assignedDate: number
    preferredContactMethod: number
    bestTimeToCall: number
    timezone: number
    language: number
    daysPastDue: number
    lastContactDate: number
    nextContactDate: number
    contactAttempts: number
    doNotCall: number
    disputeFlag: number
    bankruptcyFlag: number
    deceasedFlag: number
    notes: number
    source: number
    batchId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    originalAmount?: true
    currentBalance?: true
    amountPaid?: true
    interestRate?: true
    lastPaymentAmount?: true
    daysPastDue?: true
    contactAttempts?: true
  }

  export type AccountSumAggregateInputType = {
    originalAmount?: true
    currentBalance?: true
    amountPaid?: true
    interestRate?: true
    lastPaymentAmount?: true
    daysPastDue?: true
    contactAttempts?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    accountNumber?: true
    firstName?: true
    lastName?: true
    fullName?: true
    email?: true
    address1?: true
    address2?: true
    city?: true
    state?: true
    zipCode?: true
    country?: true
    originalAmount?: true
    currentBalance?: true
    amountPaid?: true
    interestRate?: true
    lastPaymentDate?: true
    lastPaymentAmount?: true
    status?: true
    priority?: true
    assignedAgentId?: true
    assignedDate?: true
    preferredContactMethod?: true
    bestTimeToCall?: true
    timezone?: true
    language?: true
    daysPastDue?: true
    lastContactDate?: true
    nextContactDate?: true
    contactAttempts?: true
    doNotCall?: true
    disputeFlag?: true
    bankruptcyFlag?: true
    deceasedFlag?: true
    notes?: true
    source?: true
    batchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    accountNumber?: true
    firstName?: true
    lastName?: true
    fullName?: true
    email?: true
    address1?: true
    address2?: true
    city?: true
    state?: true
    zipCode?: true
    country?: true
    originalAmount?: true
    currentBalance?: true
    amountPaid?: true
    interestRate?: true
    lastPaymentDate?: true
    lastPaymentAmount?: true
    status?: true
    priority?: true
    assignedAgentId?: true
    assignedDate?: true
    preferredContactMethod?: true
    bestTimeToCall?: true
    timezone?: true
    language?: true
    daysPastDue?: true
    lastContactDate?: true
    nextContactDate?: true
    contactAttempts?: true
    doNotCall?: true
    disputeFlag?: true
    bankruptcyFlag?: true
    deceasedFlag?: true
    notes?: true
    source?: true
    batchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    accountNumber?: true
    firstName?: true
    lastName?: true
    fullName?: true
    email?: true
    address1?: true
    address2?: true
    city?: true
    state?: true
    zipCode?: true
    country?: true
    originalAmount?: true
    currentBalance?: true
    amountPaid?: true
    interestRate?: true
    lastPaymentDate?: true
    lastPaymentAmount?: true
    status?: true
    priority?: true
    assignedAgentId?: true
    assignedDate?: true
    preferredContactMethod?: true
    bestTimeToCall?: true
    timezone?: true
    language?: true
    daysPastDue?: true
    lastContactDate?: true
    nextContactDate?: true
    contactAttempts?: true
    doNotCall?: true
    disputeFlag?: true
    bankruptcyFlag?: true
    deceasedFlag?: true
    notes?: true
    source?: true
    batchId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    accountNumber: string
    firstName: string
    lastName: string
    fullName: string
    email: string | null
    address1: string | null
    address2: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    country: string | null
    originalAmount: number
    currentBalance: number
    amountPaid: number
    interestRate: number | null
    lastPaymentDate: Date | null
    lastPaymentAmount: number | null
    status: string
    priority: string
    assignedAgentId: string | null
    assignedDate: Date | null
    preferredContactMethod: string | null
    bestTimeToCall: string | null
    timezone: string | null
    language: string | null
    daysPastDue: number
    lastContactDate: Date | null
    nextContactDate: Date | null
    contactAttempts: number
    doNotCall: boolean
    disputeFlag: boolean
    bankruptcyFlag: boolean
    deceasedFlag: boolean
    notes: string | null
    source: string | null
    batchId: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountNumber?: boolean
    firstName?: boolean
    lastName?: boolean
    fullName?: boolean
    email?: boolean
    address1?: boolean
    address2?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    country?: boolean
    originalAmount?: boolean
    currentBalance?: boolean
    amountPaid?: boolean
    interestRate?: boolean
    lastPaymentDate?: boolean
    lastPaymentAmount?: boolean
    status?: boolean
    priority?: boolean
    assignedAgentId?: boolean
    assignedDate?: boolean
    preferredContactMethod?: boolean
    bestTimeToCall?: boolean
    timezone?: boolean
    language?: boolean
    daysPastDue?: boolean
    lastContactDate?: boolean
    nextContactDate?: boolean
    contactAttempts?: boolean
    doNotCall?: boolean
    disputeFlag?: boolean
    bankruptcyFlag?: boolean
    deceasedFlag?: boolean
    notes?: boolean
    source?: boolean
    batchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    actions?: boolean | Account$actionsArgs<ExtArgs>
    phoneNumbers?: boolean | Account$phoneNumbersArgs<ExtArgs>
    assignedAgent?: boolean | Account$assignedAgentArgs<ExtArgs>
    calls?: boolean | Account$callsArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountNumber?: boolean
    firstName?: boolean
    lastName?: boolean
    fullName?: boolean
    email?: boolean
    address1?: boolean
    address2?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    country?: boolean
    originalAmount?: boolean
    currentBalance?: boolean
    amountPaid?: boolean
    interestRate?: boolean
    lastPaymentDate?: boolean
    lastPaymentAmount?: boolean
    status?: boolean
    priority?: boolean
    assignedAgentId?: boolean
    assignedDate?: boolean
    preferredContactMethod?: boolean
    bestTimeToCall?: boolean
    timezone?: boolean
    language?: boolean
    daysPastDue?: boolean
    lastContactDate?: boolean
    nextContactDate?: boolean
    contactAttempts?: boolean
    doNotCall?: boolean
    disputeFlag?: boolean
    bankruptcyFlag?: boolean
    deceasedFlag?: boolean
    notes?: boolean
    source?: boolean
    batchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assignedAgent?: boolean | Account$assignedAgentArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    accountNumber?: boolean
    firstName?: boolean
    lastName?: boolean
    fullName?: boolean
    email?: boolean
    address1?: boolean
    address2?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    country?: boolean
    originalAmount?: boolean
    currentBalance?: boolean
    amountPaid?: boolean
    interestRate?: boolean
    lastPaymentDate?: boolean
    lastPaymentAmount?: boolean
    status?: boolean
    priority?: boolean
    assignedAgentId?: boolean
    assignedDate?: boolean
    preferredContactMethod?: boolean
    bestTimeToCall?: boolean
    timezone?: boolean
    language?: boolean
    daysPastDue?: boolean
    lastContactDate?: boolean
    nextContactDate?: boolean
    contactAttempts?: boolean
    doNotCall?: boolean
    disputeFlag?: boolean
    bankruptcyFlag?: boolean
    deceasedFlag?: boolean
    notes?: boolean
    source?: boolean
    batchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actions?: boolean | Account$actionsArgs<ExtArgs>
    phoneNumbers?: boolean | Account$phoneNumbersArgs<ExtArgs>
    assignedAgent?: boolean | Account$assignedAgentArgs<ExtArgs>
    calls?: boolean | Account$callsArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedAgent?: boolean | Account$assignedAgentArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      actions: Prisma.$AccountActionPayload<ExtArgs>[]
      phoneNumbers: Prisma.$AccountPhonePayload<ExtArgs>[]
      assignedAgent: Prisma.$UserPayload<ExtArgs> | null
      calls: Prisma.$CallPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accountNumber: string
      firstName: string
      lastName: string
      fullName: string
      email: string | null
      address1: string | null
      address2: string | null
      city: string | null
      state: string | null
      zipCode: string | null
      country: string | null
      originalAmount: number
      currentBalance: number
      amountPaid: number
      interestRate: number | null
      lastPaymentDate: Date | null
      lastPaymentAmount: number | null
      status: string
      priority: string
      assignedAgentId: string | null
      assignedDate: Date | null
      preferredContactMethod: string | null
      bestTimeToCall: string | null
      timezone: string | null
      language: string | null
      daysPastDue: number
      lastContactDate: Date | null
      nextContactDate: Date | null
      contactAttempts: number
      doNotCall: boolean
      disputeFlag: boolean
      bankruptcyFlag: boolean
      deceasedFlag: boolean
      notes: string | null
      source: string | null
      batchId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    actions<T extends Account$actionsArgs<ExtArgs> = {}>(args?: Subset<T, Account$actionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountActionPayload<ExtArgs>, T, "findMany"> | Null>
    phoneNumbers<T extends Account$phoneNumbersArgs<ExtArgs> = {}>(args?: Subset<T, Account$phoneNumbersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPhonePayload<ExtArgs>, T, "findMany"> | Null>
    assignedAgent<T extends Account$assignedAgentArgs<ExtArgs> = {}>(args?: Subset<T, Account$assignedAgentArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    calls<T extends Account$callsArgs<ExtArgs> = {}>(args?: Subset<T, Account$callsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly accountNumber: FieldRef<"Account", 'String'>
    readonly firstName: FieldRef<"Account", 'String'>
    readonly lastName: FieldRef<"Account", 'String'>
    readonly fullName: FieldRef<"Account", 'String'>
    readonly email: FieldRef<"Account", 'String'>
    readonly address1: FieldRef<"Account", 'String'>
    readonly address2: FieldRef<"Account", 'String'>
    readonly city: FieldRef<"Account", 'String'>
    readonly state: FieldRef<"Account", 'String'>
    readonly zipCode: FieldRef<"Account", 'String'>
    readonly country: FieldRef<"Account", 'String'>
    readonly originalAmount: FieldRef<"Account", 'Float'>
    readonly currentBalance: FieldRef<"Account", 'Float'>
    readonly amountPaid: FieldRef<"Account", 'Float'>
    readonly interestRate: FieldRef<"Account", 'Float'>
    readonly lastPaymentDate: FieldRef<"Account", 'DateTime'>
    readonly lastPaymentAmount: FieldRef<"Account", 'Float'>
    readonly status: FieldRef<"Account", 'String'>
    readonly priority: FieldRef<"Account", 'String'>
    readonly assignedAgentId: FieldRef<"Account", 'String'>
    readonly assignedDate: FieldRef<"Account", 'DateTime'>
    readonly preferredContactMethod: FieldRef<"Account", 'String'>
    readonly bestTimeToCall: FieldRef<"Account", 'String'>
    readonly timezone: FieldRef<"Account", 'String'>
    readonly language: FieldRef<"Account", 'String'>
    readonly daysPastDue: FieldRef<"Account", 'Int'>
    readonly lastContactDate: FieldRef<"Account", 'DateTime'>
    readonly nextContactDate: FieldRef<"Account", 'DateTime'>
    readonly contactAttempts: FieldRef<"Account", 'Int'>
    readonly doNotCall: FieldRef<"Account", 'Boolean'>
    readonly disputeFlag: FieldRef<"Account", 'Boolean'>
    readonly bankruptcyFlag: FieldRef<"Account", 'Boolean'>
    readonly deceasedFlag: FieldRef<"Account", 'Boolean'>
    readonly notes: FieldRef<"Account", 'String'>
    readonly source: FieldRef<"Account", 'String'>
    readonly batchId: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account.actions
   */
  export type Account$actionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountAction
     */
    select?: AccountActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountActionInclude<ExtArgs> | null
    where?: AccountActionWhereInput
    orderBy?: AccountActionOrderByWithRelationInput | AccountActionOrderByWithRelationInput[]
    cursor?: AccountActionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountActionScalarFieldEnum | AccountActionScalarFieldEnum[]
  }

  /**
   * Account.phoneNumbers
   */
  export type Account$phoneNumbersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPhone
     */
    select?: AccountPhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPhoneInclude<ExtArgs> | null
    where?: AccountPhoneWhereInput
    orderBy?: AccountPhoneOrderByWithRelationInput | AccountPhoneOrderByWithRelationInput[]
    cursor?: AccountPhoneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountPhoneScalarFieldEnum | AccountPhoneScalarFieldEnum[]
  }

  /**
   * Account.assignedAgent
   */
  export type Account$assignedAgentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Account.calls
   */
  export type Account$callsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Call
     */
    select?: CallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CallInclude<ExtArgs> | null
    where?: CallWhereInput
    orderBy?: CallOrderByWithRelationInput | CallOrderByWithRelationInput[]
    cursor?: CallWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CallScalarFieldEnum | CallScalarFieldEnum[]
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model AccountPhone
   */

  export type AggregateAccountPhone = {
    _count: AccountPhoneCountAggregateOutputType | null
    _min: AccountPhoneMinAggregateOutputType | null
    _max: AccountPhoneMaxAggregateOutputType | null
  }

  export type AccountPhoneMinAggregateOutputType = {
    id: string | null
    accountId: string | null
    phoneNumber: string | null
    phoneType: string | null
    isValid: boolean | null
    doNotCall: boolean | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountPhoneMaxAggregateOutputType = {
    id: string | null
    accountId: string | null
    phoneNumber: string | null
    phoneType: string | null
    isValid: boolean | null
    doNotCall: boolean | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountPhoneCountAggregateOutputType = {
    id: number
    accountId: number
    phoneNumber: number
    phoneType: number
    isValid: number
    doNotCall: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountPhoneMinAggregateInputType = {
    id?: true
    accountId?: true
    phoneNumber?: true
    phoneType?: true
    isValid?: true
    doNotCall?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountPhoneMaxAggregateInputType = {
    id?: true
    accountId?: true
    phoneNumber?: true
    phoneType?: true
    isValid?: true
    doNotCall?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountPhoneCountAggregateInputType = {
    id?: true
    accountId?: true
    phoneNumber?: true
    phoneType?: true
    isValid?: true
    doNotCall?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountPhoneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountPhone to aggregate.
     */
    where?: AccountPhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountPhones to fetch.
     */
    orderBy?: AccountPhoneOrderByWithRelationInput | AccountPhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountPhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountPhones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountPhones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountPhones
    **/
    _count?: true | AccountPhoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountPhoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountPhoneMaxAggregateInputType
  }

  export type GetAccountPhoneAggregateType<T extends AccountPhoneAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountPhone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountPhone[P]>
      : GetScalarType<T[P], AggregateAccountPhone[P]>
  }




  export type AccountPhoneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountPhoneWhereInput
    orderBy?: AccountPhoneOrderByWithAggregationInput | AccountPhoneOrderByWithAggregationInput[]
    by: AccountPhoneScalarFieldEnum[] | AccountPhoneScalarFieldEnum
    having?: AccountPhoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountPhoneCountAggregateInputType | true
    _min?: AccountPhoneMinAggregateInputType
    _max?: AccountPhoneMaxAggregateInputType
  }

  export type AccountPhoneGroupByOutputType = {
    id: string
    accountId: string
    phoneNumber: string
    phoneType: string
    isValid: boolean
    doNotCall: boolean
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountPhoneCountAggregateOutputType | null
    _min: AccountPhoneMinAggregateOutputType | null
    _max: AccountPhoneMaxAggregateOutputType | null
  }

  type GetAccountPhoneGroupByPayload<T extends AccountPhoneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountPhoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountPhoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountPhoneGroupByOutputType[P]>
            : GetScalarType<T[P], AccountPhoneGroupByOutputType[P]>
        }
      >
    >


  export type AccountPhoneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    phoneNumber?: boolean
    phoneType?: boolean
    isValid?: boolean
    doNotCall?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
    calls?: boolean | AccountPhone$callsArgs<ExtArgs>
    _count?: boolean | AccountPhoneCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountPhone"]>

  export type AccountPhoneSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    phoneNumber?: boolean
    phoneType?: boolean
    isValid?: boolean
    doNotCall?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountPhone"]>

  export type AccountPhoneSelectScalar = {
    id?: boolean
    accountId?: boolean
    phoneNumber?: boolean
    phoneType?: boolean
    isValid?: boolean
    doNotCall?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountPhoneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
    calls?: boolean | AccountPhone$callsArgs<ExtArgs>
    _count?: boolean | AccountPhoneCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AccountPhoneIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }

  export type $AccountPhonePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountPhone"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
      calls: Prisma.$CallPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accountId: string
      phoneNumber: string
      phoneType: string
      isValid: boolean
      doNotCall: boolean
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["accountPhone"]>
    composites: {}
  }

  type AccountPhoneGetPayload<S extends boolean | null | undefined | AccountPhoneDefaultArgs> = $Result.GetResult<Prisma.$AccountPhonePayload, S>

  type AccountPhoneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountPhoneFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountPhoneCountAggregateInputType | true
    }

  export interface AccountPhoneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountPhone'], meta: { name: 'AccountPhone' } }
    /**
     * Find zero or one AccountPhone that matches the filter.
     * @param {AccountPhoneFindUniqueArgs} args - Arguments to find a AccountPhone
     * @example
     * // Get one AccountPhone
     * const accountPhone = await prisma.accountPhone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountPhoneFindUniqueArgs>(args: SelectSubset<T, AccountPhoneFindUniqueArgs<ExtArgs>>): Prisma__AccountPhoneClient<$Result.GetResult<Prisma.$AccountPhonePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AccountPhone that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountPhoneFindUniqueOrThrowArgs} args - Arguments to find a AccountPhone
     * @example
     * // Get one AccountPhone
     * const accountPhone = await prisma.accountPhone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountPhoneFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountPhoneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountPhoneClient<$Result.GetResult<Prisma.$AccountPhonePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AccountPhone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountPhoneFindFirstArgs} args - Arguments to find a AccountPhone
     * @example
     * // Get one AccountPhone
     * const accountPhone = await prisma.accountPhone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountPhoneFindFirstArgs>(args?: SelectSubset<T, AccountPhoneFindFirstArgs<ExtArgs>>): Prisma__AccountPhoneClient<$Result.GetResult<Prisma.$AccountPhonePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AccountPhone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountPhoneFindFirstOrThrowArgs} args - Arguments to find a AccountPhone
     * @example
     * // Get one AccountPhone
     * const accountPhone = await prisma.accountPhone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountPhoneFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountPhoneFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountPhoneClient<$Result.GetResult<Prisma.$AccountPhonePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AccountPhones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountPhoneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountPhones
     * const accountPhones = await prisma.accountPhone.findMany()
     * 
     * // Get first 10 AccountPhones
     * const accountPhones = await prisma.accountPhone.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountPhoneWithIdOnly = await prisma.accountPhone.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountPhoneFindManyArgs>(args?: SelectSubset<T, AccountPhoneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPhonePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AccountPhone.
     * @param {AccountPhoneCreateArgs} args - Arguments to create a AccountPhone.
     * @example
     * // Create one AccountPhone
     * const AccountPhone = await prisma.accountPhone.create({
     *   data: {
     *     // ... data to create a AccountPhone
     *   }
     * })
     * 
     */
    create<T extends AccountPhoneCreateArgs>(args: SelectSubset<T, AccountPhoneCreateArgs<ExtArgs>>): Prisma__AccountPhoneClient<$Result.GetResult<Prisma.$AccountPhonePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AccountPhones.
     * @param {AccountPhoneCreateManyArgs} args - Arguments to create many AccountPhones.
     * @example
     * // Create many AccountPhones
     * const accountPhone = await prisma.accountPhone.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountPhoneCreateManyArgs>(args?: SelectSubset<T, AccountPhoneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AccountPhones and returns the data saved in the database.
     * @param {AccountPhoneCreateManyAndReturnArgs} args - Arguments to create many AccountPhones.
     * @example
     * // Create many AccountPhones
     * const accountPhone = await prisma.accountPhone.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AccountPhones and only return the `id`
     * const accountPhoneWithIdOnly = await prisma.accountPhone.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountPhoneCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountPhoneCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPhonePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AccountPhone.
     * @param {AccountPhoneDeleteArgs} args - Arguments to delete one AccountPhone.
     * @example
     * // Delete one AccountPhone
     * const AccountPhone = await prisma.accountPhone.delete({
     *   where: {
     *     // ... filter to delete one AccountPhone
     *   }
     * })
     * 
     */
    delete<T extends AccountPhoneDeleteArgs>(args: SelectSubset<T, AccountPhoneDeleteArgs<ExtArgs>>): Prisma__AccountPhoneClient<$Result.GetResult<Prisma.$AccountPhonePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AccountPhone.
     * @param {AccountPhoneUpdateArgs} args - Arguments to update one AccountPhone.
     * @example
     * // Update one AccountPhone
     * const accountPhone = await prisma.accountPhone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountPhoneUpdateArgs>(args: SelectSubset<T, AccountPhoneUpdateArgs<ExtArgs>>): Prisma__AccountPhoneClient<$Result.GetResult<Prisma.$AccountPhonePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AccountPhones.
     * @param {AccountPhoneDeleteManyArgs} args - Arguments to filter AccountPhones to delete.
     * @example
     * // Delete a few AccountPhones
     * const { count } = await prisma.accountPhone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountPhoneDeleteManyArgs>(args?: SelectSubset<T, AccountPhoneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountPhones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountPhoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountPhones
     * const accountPhone = await prisma.accountPhone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountPhoneUpdateManyArgs>(args: SelectSubset<T, AccountPhoneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountPhone.
     * @param {AccountPhoneUpsertArgs} args - Arguments to update or create a AccountPhone.
     * @example
     * // Update or create a AccountPhone
     * const accountPhone = await prisma.accountPhone.upsert({
     *   create: {
     *     // ... data to create a AccountPhone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountPhone we want to update
     *   }
     * })
     */
    upsert<T extends AccountPhoneUpsertArgs>(args: SelectSubset<T, AccountPhoneUpsertArgs<ExtArgs>>): Prisma__AccountPhoneClient<$Result.GetResult<Prisma.$AccountPhonePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AccountPhones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountPhoneCountArgs} args - Arguments to filter AccountPhones to count.
     * @example
     * // Count the number of AccountPhones
     * const count = await prisma.accountPhone.count({
     *   where: {
     *     // ... the filter for the AccountPhones we want to count
     *   }
     * })
    **/
    count<T extends AccountPhoneCountArgs>(
      args?: Subset<T, AccountPhoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountPhoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountPhone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountPhoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountPhoneAggregateArgs>(args: Subset<T, AccountPhoneAggregateArgs>): Prisma.PrismaPromise<GetAccountPhoneAggregateType<T>>

    /**
     * Group by AccountPhone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountPhoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountPhoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountPhoneGroupByArgs['orderBy'] }
        : { orderBy?: AccountPhoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountPhoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountPhoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountPhone model
   */
  readonly fields: AccountPhoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountPhone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountPhoneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    calls<T extends AccountPhone$callsArgs<ExtArgs> = {}>(args?: Subset<T, AccountPhone$callsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountPhone model
   */ 
  interface AccountPhoneFieldRefs {
    readonly id: FieldRef<"AccountPhone", 'String'>
    readonly accountId: FieldRef<"AccountPhone", 'String'>
    readonly phoneNumber: FieldRef<"AccountPhone", 'String'>
    readonly phoneType: FieldRef<"AccountPhone", 'String'>
    readonly isValid: FieldRef<"AccountPhone", 'Boolean'>
    readonly doNotCall: FieldRef<"AccountPhone", 'Boolean'>
    readonly notes: FieldRef<"AccountPhone", 'String'>
    readonly createdAt: FieldRef<"AccountPhone", 'DateTime'>
    readonly updatedAt: FieldRef<"AccountPhone", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AccountPhone findUnique
   */
  export type AccountPhoneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPhone
     */
    select?: AccountPhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPhoneInclude<ExtArgs> | null
    /**
     * Filter, which AccountPhone to fetch.
     */
    where: AccountPhoneWhereUniqueInput
  }

  /**
   * AccountPhone findUniqueOrThrow
   */
  export type AccountPhoneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPhone
     */
    select?: AccountPhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPhoneInclude<ExtArgs> | null
    /**
     * Filter, which AccountPhone to fetch.
     */
    where: AccountPhoneWhereUniqueInput
  }

  /**
   * AccountPhone findFirst
   */
  export type AccountPhoneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPhone
     */
    select?: AccountPhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPhoneInclude<ExtArgs> | null
    /**
     * Filter, which AccountPhone to fetch.
     */
    where?: AccountPhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountPhones to fetch.
     */
    orderBy?: AccountPhoneOrderByWithRelationInput | AccountPhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountPhones.
     */
    cursor?: AccountPhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountPhones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountPhones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountPhones.
     */
    distinct?: AccountPhoneScalarFieldEnum | AccountPhoneScalarFieldEnum[]
  }

  /**
   * AccountPhone findFirstOrThrow
   */
  export type AccountPhoneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPhone
     */
    select?: AccountPhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPhoneInclude<ExtArgs> | null
    /**
     * Filter, which AccountPhone to fetch.
     */
    where?: AccountPhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountPhones to fetch.
     */
    orderBy?: AccountPhoneOrderByWithRelationInput | AccountPhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountPhones.
     */
    cursor?: AccountPhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountPhones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountPhones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountPhones.
     */
    distinct?: AccountPhoneScalarFieldEnum | AccountPhoneScalarFieldEnum[]
  }

  /**
   * AccountPhone findMany
   */
  export type AccountPhoneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPhone
     */
    select?: AccountPhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPhoneInclude<ExtArgs> | null
    /**
     * Filter, which AccountPhones to fetch.
     */
    where?: AccountPhoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountPhones to fetch.
     */
    orderBy?: AccountPhoneOrderByWithRelationInput | AccountPhoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountPhones.
     */
    cursor?: AccountPhoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountPhones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountPhones.
     */
    skip?: number
    distinct?: AccountPhoneScalarFieldEnum | AccountPhoneScalarFieldEnum[]
  }

  /**
   * AccountPhone create
   */
  export type AccountPhoneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPhone
     */
    select?: AccountPhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPhoneInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountPhone.
     */
    data: XOR<AccountPhoneCreateInput, AccountPhoneUncheckedCreateInput>
  }

  /**
   * AccountPhone createMany
   */
  export type AccountPhoneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountPhones.
     */
    data: AccountPhoneCreateManyInput | AccountPhoneCreateManyInput[]
  }

  /**
   * AccountPhone createManyAndReturn
   */
  export type AccountPhoneCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPhone
     */
    select?: AccountPhoneSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AccountPhones.
     */
    data: AccountPhoneCreateManyInput | AccountPhoneCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPhoneIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AccountPhone update
   */
  export type AccountPhoneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPhone
     */
    select?: AccountPhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPhoneInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountPhone.
     */
    data: XOR<AccountPhoneUpdateInput, AccountPhoneUncheckedUpdateInput>
    /**
     * Choose, which AccountPhone to update.
     */
    where: AccountPhoneWhereUniqueInput
  }

  /**
   * AccountPhone updateMany
   */
  export type AccountPhoneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountPhones.
     */
    data: XOR<AccountPhoneUpdateManyMutationInput, AccountPhoneUncheckedUpdateManyInput>
    /**
     * Filter which AccountPhones to update
     */
    where?: AccountPhoneWhereInput
  }

  /**
   * AccountPhone upsert
   */
  export type AccountPhoneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPhone
     */
    select?: AccountPhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPhoneInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountPhone to update in case it exists.
     */
    where: AccountPhoneWhereUniqueInput
    /**
     * In case the AccountPhone found by the `where` argument doesn't exist, create a new AccountPhone with this data.
     */
    create: XOR<AccountPhoneCreateInput, AccountPhoneUncheckedCreateInput>
    /**
     * In case the AccountPhone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountPhoneUpdateInput, AccountPhoneUncheckedUpdateInput>
  }

  /**
   * AccountPhone delete
   */
  export type AccountPhoneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPhone
     */
    select?: AccountPhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPhoneInclude<ExtArgs> | null
    /**
     * Filter which AccountPhone to delete.
     */
    where: AccountPhoneWhereUniqueInput
  }

  /**
   * AccountPhone deleteMany
   */
  export type AccountPhoneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountPhones to delete
     */
    where?: AccountPhoneWhereInput
  }

  /**
   * AccountPhone.calls
   */
  export type AccountPhone$callsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Call
     */
    select?: CallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CallInclude<ExtArgs> | null
    where?: CallWhereInput
    orderBy?: CallOrderByWithRelationInput | CallOrderByWithRelationInput[]
    cursor?: CallWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CallScalarFieldEnum | CallScalarFieldEnum[]
  }

  /**
   * AccountPhone without action
   */
  export type AccountPhoneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPhone
     */
    select?: AccountPhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPhoneInclude<ExtArgs> | null
  }


  /**
   * Model Call
   */

  export type AggregateCall = {
    _count: CallCountAggregateOutputType | null
    _avg: CallAvgAggregateOutputType | null
    _sum: CallSumAggregateOutputType | null
    _min: CallMinAggregateOutputType | null
    _max: CallMaxAggregateOutputType | null
  }

  export type CallAvgAggregateOutputType = {
    duration: number | null
    amountPromised: number | null
    amountCollected: number | null
  }

  export type CallSumAggregateOutputType = {
    duration: number | null
    amountPromised: number | null
    amountCollected: number | null
  }

  export type CallMinAggregateOutputType = {
    id: string | null
    accountId: string | null
    accountPhoneId: string | null
    agentId: string | null
    direction: string | null
    startTime: Date | null
    endTime: Date | null
    duration: number | null
    status: string | null
    disposition: string | null
    notes: string | null
    followUpDate: Date | null
    amountPromised: number | null
    amountCollected: number | null
    recordingPath: string | null
    callerId: string | null
    campaignId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CallMaxAggregateOutputType = {
    id: string | null
    accountId: string | null
    accountPhoneId: string | null
    agentId: string | null
    direction: string | null
    startTime: Date | null
    endTime: Date | null
    duration: number | null
    status: string | null
    disposition: string | null
    notes: string | null
    followUpDate: Date | null
    amountPromised: number | null
    amountCollected: number | null
    recordingPath: string | null
    callerId: string | null
    campaignId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CallCountAggregateOutputType = {
    id: number
    accountId: number
    accountPhoneId: number
    agentId: number
    direction: number
    startTime: number
    endTime: number
    duration: number
    status: number
    disposition: number
    notes: number
    followUpDate: number
    amountPromised: number
    amountCollected: number
    recordingPath: number
    callerId: number
    campaignId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CallAvgAggregateInputType = {
    duration?: true
    amountPromised?: true
    amountCollected?: true
  }

  export type CallSumAggregateInputType = {
    duration?: true
    amountPromised?: true
    amountCollected?: true
  }

  export type CallMinAggregateInputType = {
    id?: true
    accountId?: true
    accountPhoneId?: true
    agentId?: true
    direction?: true
    startTime?: true
    endTime?: true
    duration?: true
    status?: true
    disposition?: true
    notes?: true
    followUpDate?: true
    amountPromised?: true
    amountCollected?: true
    recordingPath?: true
    callerId?: true
    campaignId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CallMaxAggregateInputType = {
    id?: true
    accountId?: true
    accountPhoneId?: true
    agentId?: true
    direction?: true
    startTime?: true
    endTime?: true
    duration?: true
    status?: true
    disposition?: true
    notes?: true
    followUpDate?: true
    amountPromised?: true
    amountCollected?: true
    recordingPath?: true
    callerId?: true
    campaignId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CallCountAggregateInputType = {
    id?: true
    accountId?: true
    accountPhoneId?: true
    agentId?: true
    direction?: true
    startTime?: true
    endTime?: true
    duration?: true
    status?: true
    disposition?: true
    notes?: true
    followUpDate?: true
    amountPromised?: true
    amountCollected?: true
    recordingPath?: true
    callerId?: true
    campaignId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CallAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Call to aggregate.
     */
    where?: CallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Calls to fetch.
     */
    orderBy?: CallOrderByWithRelationInput | CallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Calls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Calls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Calls
    **/
    _count?: true | CallCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CallAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CallSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CallMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CallMaxAggregateInputType
  }

  export type GetCallAggregateType<T extends CallAggregateArgs> = {
        [P in keyof T & keyof AggregateCall]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCall[P]>
      : GetScalarType<T[P], AggregateCall[P]>
  }




  export type CallGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CallWhereInput
    orderBy?: CallOrderByWithAggregationInput | CallOrderByWithAggregationInput[]
    by: CallScalarFieldEnum[] | CallScalarFieldEnum
    having?: CallScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CallCountAggregateInputType | true
    _avg?: CallAvgAggregateInputType
    _sum?: CallSumAggregateInputType
    _min?: CallMinAggregateInputType
    _max?: CallMaxAggregateInputType
  }

  export type CallGroupByOutputType = {
    id: string
    accountId: string
    accountPhoneId: string | null
    agentId: string
    direction: string
    startTime: Date
    endTime: Date | null
    duration: number | null
    status: string
    disposition: string | null
    notes: string | null
    followUpDate: Date | null
    amountPromised: number | null
    amountCollected: number | null
    recordingPath: string | null
    callerId: string | null
    campaignId: string | null
    createdAt: Date
    updatedAt: Date
    _count: CallCountAggregateOutputType | null
    _avg: CallAvgAggregateOutputType | null
    _sum: CallSumAggregateOutputType | null
    _min: CallMinAggregateOutputType | null
    _max: CallMaxAggregateOutputType | null
  }

  type GetCallGroupByPayload<T extends CallGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CallGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CallGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CallGroupByOutputType[P]>
            : GetScalarType<T[P], CallGroupByOutputType[P]>
        }
      >
    >


  export type CallSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    accountPhoneId?: boolean
    agentId?: boolean
    direction?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    status?: boolean
    disposition?: boolean
    notes?: boolean
    followUpDate?: boolean
    amountPromised?: boolean
    amountCollected?: boolean
    recordingPath?: boolean
    callerId?: boolean
    campaignId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agent?: boolean | UserDefaultArgs<ExtArgs>
    accountPhone?: boolean | Call$accountPhoneArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["call"]>

  export type CallSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    accountPhoneId?: boolean
    agentId?: boolean
    direction?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    status?: boolean
    disposition?: boolean
    notes?: boolean
    followUpDate?: boolean
    amountPromised?: boolean
    amountCollected?: boolean
    recordingPath?: boolean
    callerId?: boolean
    campaignId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agent?: boolean | UserDefaultArgs<ExtArgs>
    accountPhone?: boolean | Call$accountPhoneArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["call"]>

  export type CallSelectScalar = {
    id?: boolean
    accountId?: boolean
    accountPhoneId?: boolean
    agentId?: boolean
    direction?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    status?: boolean
    disposition?: boolean
    notes?: boolean
    followUpDate?: boolean
    amountPromised?: boolean
    amountCollected?: boolean
    recordingPath?: boolean
    callerId?: boolean
    campaignId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CallInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | UserDefaultArgs<ExtArgs>
    accountPhone?: boolean | Call$accountPhoneArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }
  export type CallIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | UserDefaultArgs<ExtArgs>
    accountPhone?: boolean | Call$accountPhoneArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }

  export type $CallPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Call"
    objects: {
      agent: Prisma.$UserPayload<ExtArgs>
      accountPhone: Prisma.$AccountPhonePayload<ExtArgs> | null
      account: Prisma.$AccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accountId: string
      accountPhoneId: string | null
      agentId: string
      direction: string
      startTime: Date
      endTime: Date | null
      duration: number | null
      status: string
      disposition: string | null
      notes: string | null
      followUpDate: Date | null
      amountPromised: number | null
      amountCollected: number | null
      recordingPath: string | null
      callerId: string | null
      campaignId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["call"]>
    composites: {}
  }

  type CallGetPayload<S extends boolean | null | undefined | CallDefaultArgs> = $Result.GetResult<Prisma.$CallPayload, S>

  type CallCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CallFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CallCountAggregateInputType | true
    }

  export interface CallDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Call'], meta: { name: 'Call' } }
    /**
     * Find zero or one Call that matches the filter.
     * @param {CallFindUniqueArgs} args - Arguments to find a Call
     * @example
     * // Get one Call
     * const call = await prisma.call.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CallFindUniqueArgs>(args: SelectSubset<T, CallFindUniqueArgs<ExtArgs>>): Prisma__CallClient<$Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Call that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CallFindUniqueOrThrowArgs} args - Arguments to find a Call
     * @example
     * // Get one Call
     * const call = await prisma.call.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CallFindUniqueOrThrowArgs>(args: SelectSubset<T, CallFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CallClient<$Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Call that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallFindFirstArgs} args - Arguments to find a Call
     * @example
     * // Get one Call
     * const call = await prisma.call.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CallFindFirstArgs>(args?: SelectSubset<T, CallFindFirstArgs<ExtArgs>>): Prisma__CallClient<$Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Call that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallFindFirstOrThrowArgs} args - Arguments to find a Call
     * @example
     * // Get one Call
     * const call = await prisma.call.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CallFindFirstOrThrowArgs>(args?: SelectSubset<T, CallFindFirstOrThrowArgs<ExtArgs>>): Prisma__CallClient<$Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Calls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Calls
     * const calls = await prisma.call.findMany()
     * 
     * // Get first 10 Calls
     * const calls = await prisma.call.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const callWithIdOnly = await prisma.call.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CallFindManyArgs>(args?: SelectSubset<T, CallFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Call.
     * @param {CallCreateArgs} args - Arguments to create a Call.
     * @example
     * // Create one Call
     * const Call = await prisma.call.create({
     *   data: {
     *     // ... data to create a Call
     *   }
     * })
     * 
     */
    create<T extends CallCreateArgs>(args: SelectSubset<T, CallCreateArgs<ExtArgs>>): Prisma__CallClient<$Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Calls.
     * @param {CallCreateManyArgs} args - Arguments to create many Calls.
     * @example
     * // Create many Calls
     * const call = await prisma.call.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CallCreateManyArgs>(args?: SelectSubset<T, CallCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Calls and returns the data saved in the database.
     * @param {CallCreateManyAndReturnArgs} args - Arguments to create many Calls.
     * @example
     * // Create many Calls
     * const call = await prisma.call.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Calls and only return the `id`
     * const callWithIdOnly = await prisma.call.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CallCreateManyAndReturnArgs>(args?: SelectSubset<T, CallCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Call.
     * @param {CallDeleteArgs} args - Arguments to delete one Call.
     * @example
     * // Delete one Call
     * const Call = await prisma.call.delete({
     *   where: {
     *     // ... filter to delete one Call
     *   }
     * })
     * 
     */
    delete<T extends CallDeleteArgs>(args: SelectSubset<T, CallDeleteArgs<ExtArgs>>): Prisma__CallClient<$Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Call.
     * @param {CallUpdateArgs} args - Arguments to update one Call.
     * @example
     * // Update one Call
     * const call = await prisma.call.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CallUpdateArgs>(args: SelectSubset<T, CallUpdateArgs<ExtArgs>>): Prisma__CallClient<$Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Calls.
     * @param {CallDeleteManyArgs} args - Arguments to filter Calls to delete.
     * @example
     * // Delete a few Calls
     * const { count } = await prisma.call.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CallDeleteManyArgs>(args?: SelectSubset<T, CallDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Calls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Calls
     * const call = await prisma.call.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CallUpdateManyArgs>(args: SelectSubset<T, CallUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Call.
     * @param {CallUpsertArgs} args - Arguments to update or create a Call.
     * @example
     * // Update or create a Call
     * const call = await prisma.call.upsert({
     *   create: {
     *     // ... data to create a Call
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Call we want to update
     *   }
     * })
     */
    upsert<T extends CallUpsertArgs>(args: SelectSubset<T, CallUpsertArgs<ExtArgs>>): Prisma__CallClient<$Result.GetResult<Prisma.$CallPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Calls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallCountArgs} args - Arguments to filter Calls to count.
     * @example
     * // Count the number of Calls
     * const count = await prisma.call.count({
     *   where: {
     *     // ... the filter for the Calls we want to count
     *   }
     * })
    **/
    count<T extends CallCountArgs>(
      args?: Subset<T, CallCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CallCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Call.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CallAggregateArgs>(args: Subset<T, CallAggregateArgs>): Prisma.PrismaPromise<GetCallAggregateType<T>>

    /**
     * Group by Call.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CallGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CallGroupByArgs['orderBy'] }
        : { orderBy?: CallGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CallGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCallGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Call model
   */
  readonly fields: CallFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Call.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CallClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    accountPhone<T extends Call$accountPhoneArgs<ExtArgs> = {}>(args?: Subset<T, Call$accountPhoneArgs<ExtArgs>>): Prisma__AccountPhoneClient<$Result.GetResult<Prisma.$AccountPhonePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Call model
   */ 
  interface CallFieldRefs {
    readonly id: FieldRef<"Call", 'String'>
    readonly accountId: FieldRef<"Call", 'String'>
    readonly accountPhoneId: FieldRef<"Call", 'String'>
    readonly agentId: FieldRef<"Call", 'String'>
    readonly direction: FieldRef<"Call", 'String'>
    readonly startTime: FieldRef<"Call", 'DateTime'>
    readonly endTime: FieldRef<"Call", 'DateTime'>
    readonly duration: FieldRef<"Call", 'Int'>
    readonly status: FieldRef<"Call", 'String'>
    readonly disposition: FieldRef<"Call", 'String'>
    readonly notes: FieldRef<"Call", 'String'>
    readonly followUpDate: FieldRef<"Call", 'DateTime'>
    readonly amountPromised: FieldRef<"Call", 'Float'>
    readonly amountCollected: FieldRef<"Call", 'Float'>
    readonly recordingPath: FieldRef<"Call", 'String'>
    readonly callerId: FieldRef<"Call", 'String'>
    readonly campaignId: FieldRef<"Call", 'String'>
    readonly createdAt: FieldRef<"Call", 'DateTime'>
    readonly updatedAt: FieldRef<"Call", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Call findUnique
   */
  export type CallFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Call
     */
    select?: CallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CallInclude<ExtArgs> | null
    /**
     * Filter, which Call to fetch.
     */
    where: CallWhereUniqueInput
  }

  /**
   * Call findUniqueOrThrow
   */
  export type CallFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Call
     */
    select?: CallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CallInclude<ExtArgs> | null
    /**
     * Filter, which Call to fetch.
     */
    where: CallWhereUniqueInput
  }

  /**
   * Call findFirst
   */
  export type CallFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Call
     */
    select?: CallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CallInclude<ExtArgs> | null
    /**
     * Filter, which Call to fetch.
     */
    where?: CallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Calls to fetch.
     */
    orderBy?: CallOrderByWithRelationInput | CallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Calls.
     */
    cursor?: CallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Calls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Calls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Calls.
     */
    distinct?: CallScalarFieldEnum | CallScalarFieldEnum[]
  }

  /**
   * Call findFirstOrThrow
   */
  export type CallFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Call
     */
    select?: CallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CallInclude<ExtArgs> | null
    /**
     * Filter, which Call to fetch.
     */
    where?: CallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Calls to fetch.
     */
    orderBy?: CallOrderByWithRelationInput | CallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Calls.
     */
    cursor?: CallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Calls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Calls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Calls.
     */
    distinct?: CallScalarFieldEnum | CallScalarFieldEnum[]
  }

  /**
   * Call findMany
   */
  export type CallFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Call
     */
    select?: CallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CallInclude<ExtArgs> | null
    /**
     * Filter, which Calls to fetch.
     */
    where?: CallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Calls to fetch.
     */
    orderBy?: CallOrderByWithRelationInput | CallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Calls.
     */
    cursor?: CallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Calls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Calls.
     */
    skip?: number
    distinct?: CallScalarFieldEnum | CallScalarFieldEnum[]
  }

  /**
   * Call create
   */
  export type CallCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Call
     */
    select?: CallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CallInclude<ExtArgs> | null
    /**
     * The data needed to create a Call.
     */
    data: XOR<CallCreateInput, CallUncheckedCreateInput>
  }

  /**
   * Call createMany
   */
  export type CallCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Calls.
     */
    data: CallCreateManyInput | CallCreateManyInput[]
  }

  /**
   * Call createManyAndReturn
   */
  export type CallCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Call
     */
    select?: CallSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Calls.
     */
    data: CallCreateManyInput | CallCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CallIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Call update
   */
  export type CallUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Call
     */
    select?: CallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CallInclude<ExtArgs> | null
    /**
     * The data needed to update a Call.
     */
    data: XOR<CallUpdateInput, CallUncheckedUpdateInput>
    /**
     * Choose, which Call to update.
     */
    where: CallWhereUniqueInput
  }

  /**
   * Call updateMany
   */
  export type CallUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Calls.
     */
    data: XOR<CallUpdateManyMutationInput, CallUncheckedUpdateManyInput>
    /**
     * Filter which Calls to update
     */
    where?: CallWhereInput
  }

  /**
   * Call upsert
   */
  export type CallUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Call
     */
    select?: CallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CallInclude<ExtArgs> | null
    /**
     * The filter to search for the Call to update in case it exists.
     */
    where: CallWhereUniqueInput
    /**
     * In case the Call found by the `where` argument doesn't exist, create a new Call with this data.
     */
    create: XOR<CallCreateInput, CallUncheckedCreateInput>
    /**
     * In case the Call was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CallUpdateInput, CallUncheckedUpdateInput>
  }

  /**
   * Call delete
   */
  export type CallDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Call
     */
    select?: CallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CallInclude<ExtArgs> | null
    /**
     * Filter which Call to delete.
     */
    where: CallWhereUniqueInput
  }

  /**
   * Call deleteMany
   */
  export type CallDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Calls to delete
     */
    where?: CallWhereInput
  }

  /**
   * Call.accountPhone
   */
  export type Call$accountPhoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountPhone
     */
    select?: AccountPhoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountPhoneInclude<ExtArgs> | null
    where?: AccountPhoneWhereInput
  }

  /**
   * Call without action
   */
  export type CallDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Call
     */
    select?: CallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CallInclude<ExtArgs> | null
  }


  /**
   * Model AccountAction
   */

  export type AggregateAccountAction = {
    _count: AccountActionCountAggregateOutputType | null
    _min: AccountActionMinAggregateOutputType | null
    _max: AccountActionMaxAggregateOutputType | null
  }

  export type AccountActionMinAggregateOutputType = {
    id: string | null
    accountId: string | null
    agentId: string | null
    actionType: string | null
    description: string | null
    details: string | null
    createdAt: Date | null
  }

  export type AccountActionMaxAggregateOutputType = {
    id: string | null
    accountId: string | null
    agentId: string | null
    actionType: string | null
    description: string | null
    details: string | null
    createdAt: Date | null
  }

  export type AccountActionCountAggregateOutputType = {
    id: number
    accountId: number
    agentId: number
    actionType: number
    description: number
    details: number
    createdAt: number
    _all: number
  }


  export type AccountActionMinAggregateInputType = {
    id?: true
    accountId?: true
    agentId?: true
    actionType?: true
    description?: true
    details?: true
    createdAt?: true
  }

  export type AccountActionMaxAggregateInputType = {
    id?: true
    accountId?: true
    agentId?: true
    actionType?: true
    description?: true
    details?: true
    createdAt?: true
  }

  export type AccountActionCountAggregateInputType = {
    id?: true
    accountId?: true
    agentId?: true
    actionType?: true
    description?: true
    details?: true
    createdAt?: true
    _all?: true
  }

  export type AccountActionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountAction to aggregate.
     */
    where?: AccountActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountActions to fetch.
     */
    orderBy?: AccountActionOrderByWithRelationInput | AccountActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountActions
    **/
    _count?: true | AccountActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountActionMaxAggregateInputType
  }

  export type GetAccountActionAggregateType<T extends AccountActionAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountAction[P]>
      : GetScalarType<T[P], AggregateAccountAction[P]>
  }




  export type AccountActionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountActionWhereInput
    orderBy?: AccountActionOrderByWithAggregationInput | AccountActionOrderByWithAggregationInput[]
    by: AccountActionScalarFieldEnum[] | AccountActionScalarFieldEnum
    having?: AccountActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountActionCountAggregateInputType | true
    _min?: AccountActionMinAggregateInputType
    _max?: AccountActionMaxAggregateInputType
  }

  export type AccountActionGroupByOutputType = {
    id: string
    accountId: string
    agentId: string
    actionType: string
    description: string
    details: string | null
    createdAt: Date
    _count: AccountActionCountAggregateOutputType | null
    _min: AccountActionMinAggregateOutputType | null
    _max: AccountActionMaxAggregateOutputType | null
  }

  type GetAccountActionGroupByPayload<T extends AccountActionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountActionGroupByOutputType[P]>
            : GetScalarType<T[P], AccountActionGroupByOutputType[P]>
        }
      >
    >


  export type AccountActionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    agentId?: boolean
    actionType?: boolean
    description?: boolean
    details?: boolean
    createdAt?: boolean
    agent?: boolean | UserDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountAction"]>

  export type AccountActionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    agentId?: boolean
    actionType?: boolean
    description?: boolean
    details?: boolean
    createdAt?: boolean
    agent?: boolean | UserDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountAction"]>

  export type AccountActionSelectScalar = {
    id?: boolean
    accountId?: boolean
    agentId?: boolean
    actionType?: boolean
    description?: boolean
    details?: boolean
    createdAt?: boolean
  }

  export type AccountActionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | UserDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }
  export type AccountActionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | UserDefaultArgs<ExtArgs>
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }

  export type $AccountActionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountAction"
    objects: {
      agent: Prisma.$UserPayload<ExtArgs>
      account: Prisma.$AccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accountId: string
      agentId: string
      actionType: string
      description: string
      details: string | null
      createdAt: Date
    }, ExtArgs["result"]["accountAction"]>
    composites: {}
  }

  type AccountActionGetPayload<S extends boolean | null | undefined | AccountActionDefaultArgs> = $Result.GetResult<Prisma.$AccountActionPayload, S>

  type AccountActionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountActionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountActionCountAggregateInputType | true
    }

  export interface AccountActionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountAction'], meta: { name: 'AccountAction' } }
    /**
     * Find zero or one AccountAction that matches the filter.
     * @param {AccountActionFindUniqueArgs} args - Arguments to find a AccountAction
     * @example
     * // Get one AccountAction
     * const accountAction = await prisma.accountAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountActionFindUniqueArgs>(args: SelectSubset<T, AccountActionFindUniqueArgs<ExtArgs>>): Prisma__AccountActionClient<$Result.GetResult<Prisma.$AccountActionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AccountAction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountActionFindUniqueOrThrowArgs} args - Arguments to find a AccountAction
     * @example
     * // Get one AccountAction
     * const accountAction = await prisma.accountAction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountActionFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountActionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountActionClient<$Result.GetResult<Prisma.$AccountActionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AccountAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountActionFindFirstArgs} args - Arguments to find a AccountAction
     * @example
     * // Get one AccountAction
     * const accountAction = await prisma.accountAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountActionFindFirstArgs>(args?: SelectSubset<T, AccountActionFindFirstArgs<ExtArgs>>): Prisma__AccountActionClient<$Result.GetResult<Prisma.$AccountActionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AccountAction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountActionFindFirstOrThrowArgs} args - Arguments to find a AccountAction
     * @example
     * // Get one AccountAction
     * const accountAction = await prisma.accountAction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountActionFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountActionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountActionClient<$Result.GetResult<Prisma.$AccountActionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AccountActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountActionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountActions
     * const accountActions = await prisma.accountAction.findMany()
     * 
     * // Get first 10 AccountActions
     * const accountActions = await prisma.accountAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountActionWithIdOnly = await prisma.accountAction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountActionFindManyArgs>(args?: SelectSubset<T, AccountActionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountActionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AccountAction.
     * @param {AccountActionCreateArgs} args - Arguments to create a AccountAction.
     * @example
     * // Create one AccountAction
     * const AccountAction = await prisma.accountAction.create({
     *   data: {
     *     // ... data to create a AccountAction
     *   }
     * })
     * 
     */
    create<T extends AccountActionCreateArgs>(args: SelectSubset<T, AccountActionCreateArgs<ExtArgs>>): Prisma__AccountActionClient<$Result.GetResult<Prisma.$AccountActionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AccountActions.
     * @param {AccountActionCreateManyArgs} args - Arguments to create many AccountActions.
     * @example
     * // Create many AccountActions
     * const accountAction = await prisma.accountAction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountActionCreateManyArgs>(args?: SelectSubset<T, AccountActionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AccountActions and returns the data saved in the database.
     * @param {AccountActionCreateManyAndReturnArgs} args - Arguments to create many AccountActions.
     * @example
     * // Create many AccountActions
     * const accountAction = await prisma.accountAction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AccountActions and only return the `id`
     * const accountActionWithIdOnly = await prisma.accountAction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountActionCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountActionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountActionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AccountAction.
     * @param {AccountActionDeleteArgs} args - Arguments to delete one AccountAction.
     * @example
     * // Delete one AccountAction
     * const AccountAction = await prisma.accountAction.delete({
     *   where: {
     *     // ... filter to delete one AccountAction
     *   }
     * })
     * 
     */
    delete<T extends AccountActionDeleteArgs>(args: SelectSubset<T, AccountActionDeleteArgs<ExtArgs>>): Prisma__AccountActionClient<$Result.GetResult<Prisma.$AccountActionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AccountAction.
     * @param {AccountActionUpdateArgs} args - Arguments to update one AccountAction.
     * @example
     * // Update one AccountAction
     * const accountAction = await prisma.accountAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountActionUpdateArgs>(args: SelectSubset<T, AccountActionUpdateArgs<ExtArgs>>): Prisma__AccountActionClient<$Result.GetResult<Prisma.$AccountActionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AccountActions.
     * @param {AccountActionDeleteManyArgs} args - Arguments to filter AccountActions to delete.
     * @example
     * // Delete a few AccountActions
     * const { count } = await prisma.accountAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountActionDeleteManyArgs>(args?: SelectSubset<T, AccountActionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountActions
     * const accountAction = await prisma.accountAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountActionUpdateManyArgs>(args: SelectSubset<T, AccountActionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountAction.
     * @param {AccountActionUpsertArgs} args - Arguments to update or create a AccountAction.
     * @example
     * // Update or create a AccountAction
     * const accountAction = await prisma.accountAction.upsert({
     *   create: {
     *     // ... data to create a AccountAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountAction we want to update
     *   }
     * })
     */
    upsert<T extends AccountActionUpsertArgs>(args: SelectSubset<T, AccountActionUpsertArgs<ExtArgs>>): Prisma__AccountActionClient<$Result.GetResult<Prisma.$AccountActionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AccountActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountActionCountArgs} args - Arguments to filter AccountActions to count.
     * @example
     * // Count the number of AccountActions
     * const count = await prisma.accountAction.count({
     *   where: {
     *     // ... the filter for the AccountActions we want to count
     *   }
     * })
    **/
    count<T extends AccountActionCountArgs>(
      args?: Subset<T, AccountActionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountActionAggregateArgs>(args: Subset<T, AccountActionAggregateArgs>): Prisma.PrismaPromise<GetAccountActionAggregateType<T>>

    /**
     * Group by AccountAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountActionGroupByArgs['orderBy'] }
        : { orderBy?: AccountActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountActionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountAction model
   */
  readonly fields: AccountActionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountActionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountAction model
   */ 
  interface AccountActionFieldRefs {
    readonly id: FieldRef<"AccountAction", 'String'>
    readonly accountId: FieldRef<"AccountAction", 'String'>
    readonly agentId: FieldRef<"AccountAction", 'String'>
    readonly actionType: FieldRef<"AccountAction", 'String'>
    readonly description: FieldRef<"AccountAction", 'String'>
    readonly details: FieldRef<"AccountAction", 'String'>
    readonly createdAt: FieldRef<"AccountAction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AccountAction findUnique
   */
  export type AccountActionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountAction
     */
    select?: AccountActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountActionInclude<ExtArgs> | null
    /**
     * Filter, which AccountAction to fetch.
     */
    where: AccountActionWhereUniqueInput
  }

  /**
   * AccountAction findUniqueOrThrow
   */
  export type AccountActionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountAction
     */
    select?: AccountActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountActionInclude<ExtArgs> | null
    /**
     * Filter, which AccountAction to fetch.
     */
    where: AccountActionWhereUniqueInput
  }

  /**
   * AccountAction findFirst
   */
  export type AccountActionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountAction
     */
    select?: AccountActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountActionInclude<ExtArgs> | null
    /**
     * Filter, which AccountAction to fetch.
     */
    where?: AccountActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountActions to fetch.
     */
    orderBy?: AccountActionOrderByWithRelationInput | AccountActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountActions.
     */
    cursor?: AccountActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountActions.
     */
    distinct?: AccountActionScalarFieldEnum | AccountActionScalarFieldEnum[]
  }

  /**
   * AccountAction findFirstOrThrow
   */
  export type AccountActionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountAction
     */
    select?: AccountActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountActionInclude<ExtArgs> | null
    /**
     * Filter, which AccountAction to fetch.
     */
    where?: AccountActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountActions to fetch.
     */
    orderBy?: AccountActionOrderByWithRelationInput | AccountActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountActions.
     */
    cursor?: AccountActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountActions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountActions.
     */
    distinct?: AccountActionScalarFieldEnum | AccountActionScalarFieldEnum[]
  }

  /**
   * AccountAction findMany
   */
  export type AccountActionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountAction
     */
    select?: AccountActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountActionInclude<ExtArgs> | null
    /**
     * Filter, which AccountActions to fetch.
     */
    where?: AccountActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountActions to fetch.
     */
    orderBy?: AccountActionOrderByWithRelationInput | AccountActionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountActions.
     */
    cursor?: AccountActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountActions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountActions.
     */
    skip?: number
    distinct?: AccountActionScalarFieldEnum | AccountActionScalarFieldEnum[]
  }

  /**
   * AccountAction create
   */
  export type AccountActionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountAction
     */
    select?: AccountActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountActionInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountAction.
     */
    data: XOR<AccountActionCreateInput, AccountActionUncheckedCreateInput>
  }

  /**
   * AccountAction createMany
   */
  export type AccountActionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountActions.
     */
    data: AccountActionCreateManyInput | AccountActionCreateManyInput[]
  }

  /**
   * AccountAction createManyAndReturn
   */
  export type AccountActionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountAction
     */
    select?: AccountActionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AccountActions.
     */
    data: AccountActionCreateManyInput | AccountActionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountActionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AccountAction update
   */
  export type AccountActionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountAction
     */
    select?: AccountActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountActionInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountAction.
     */
    data: XOR<AccountActionUpdateInput, AccountActionUncheckedUpdateInput>
    /**
     * Choose, which AccountAction to update.
     */
    where: AccountActionWhereUniqueInput
  }

  /**
   * AccountAction updateMany
   */
  export type AccountActionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountActions.
     */
    data: XOR<AccountActionUpdateManyMutationInput, AccountActionUncheckedUpdateManyInput>
    /**
     * Filter which AccountActions to update
     */
    where?: AccountActionWhereInput
  }

  /**
   * AccountAction upsert
   */
  export type AccountActionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountAction
     */
    select?: AccountActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountActionInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountAction to update in case it exists.
     */
    where: AccountActionWhereUniqueInput
    /**
     * In case the AccountAction found by the `where` argument doesn't exist, create a new AccountAction with this data.
     */
    create: XOR<AccountActionCreateInput, AccountActionUncheckedCreateInput>
    /**
     * In case the AccountAction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountActionUpdateInput, AccountActionUncheckedUpdateInput>
  }

  /**
   * AccountAction delete
   */
  export type AccountActionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountAction
     */
    select?: AccountActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountActionInclude<ExtArgs> | null
    /**
     * Filter which AccountAction to delete.
     */
    where: AccountActionWhereUniqueInput
  }

  /**
   * AccountAction deleteMany
   */
  export type AccountActionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountActions to delete
     */
    where?: AccountActionWhereInput
  }

  /**
   * AccountAction without action
   */
  export type AccountActionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountAction
     */
    select?: AccountActionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountActionInclude<ExtArgs> | null
  }


  /**
   * Model UploadBatch
   */

  export type AggregateUploadBatch = {
    _count: UploadBatchCountAggregateOutputType | null
    _avg: UploadBatchAvgAggregateOutputType | null
    _sum: UploadBatchSumAggregateOutputType | null
    _min: UploadBatchMinAggregateOutputType | null
    _max: UploadBatchMaxAggregateOutputType | null
  }

  export type UploadBatchAvgAggregateOutputType = {
    fileSize: number | null
    totalRecords: number | null
    processedRecords: number | null
    successCount: number | null
    errorCount: number | null
    skipCount: number | null
    duplicateCount: number | null
  }

  export type UploadBatchSumAggregateOutputType = {
    fileSize: number | null
    totalRecords: number | null
    processedRecords: number | null
    successCount: number | null
    errorCount: number | null
    skipCount: number | null
    duplicateCount: number | null
  }

  export type UploadBatchMinAggregateOutputType = {
    id: string | null
    filename: string | null
    originalFilename: string | null
    fileSize: number | null
    mimeType: string | null
    totalRecords: number | null
    processedRecords: number | null
    successCount: number | null
    errorCount: number | null
    skipCount: number | null
    duplicateCount: number | null
    status: string | null
    uploadedById: string | null
    batchName: string | null
    skipErrors: boolean | null
    updateExisting: boolean | null
    processingStarted: Date | null
    processingCompleted: Date | null
    errorLog: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UploadBatchMaxAggregateOutputType = {
    id: string | null
    filename: string | null
    originalFilename: string | null
    fileSize: number | null
    mimeType: string | null
    totalRecords: number | null
    processedRecords: number | null
    successCount: number | null
    errorCount: number | null
    skipCount: number | null
    duplicateCount: number | null
    status: string | null
    uploadedById: string | null
    batchName: string | null
    skipErrors: boolean | null
    updateExisting: boolean | null
    processingStarted: Date | null
    processingCompleted: Date | null
    errorLog: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UploadBatchCountAggregateOutputType = {
    id: number
    filename: number
    originalFilename: number
    fileSize: number
    mimeType: number
    totalRecords: number
    processedRecords: number
    successCount: number
    errorCount: number
    skipCount: number
    duplicateCount: number
    status: number
    uploadedById: number
    batchName: number
    skipErrors: number
    updateExisting: number
    processingStarted: number
    processingCompleted: number
    errorLog: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UploadBatchAvgAggregateInputType = {
    fileSize?: true
    totalRecords?: true
    processedRecords?: true
    successCount?: true
    errorCount?: true
    skipCount?: true
    duplicateCount?: true
  }

  export type UploadBatchSumAggregateInputType = {
    fileSize?: true
    totalRecords?: true
    processedRecords?: true
    successCount?: true
    errorCount?: true
    skipCount?: true
    duplicateCount?: true
  }

  export type UploadBatchMinAggregateInputType = {
    id?: true
    filename?: true
    originalFilename?: true
    fileSize?: true
    mimeType?: true
    totalRecords?: true
    processedRecords?: true
    successCount?: true
    errorCount?: true
    skipCount?: true
    duplicateCount?: true
    status?: true
    uploadedById?: true
    batchName?: true
    skipErrors?: true
    updateExisting?: true
    processingStarted?: true
    processingCompleted?: true
    errorLog?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UploadBatchMaxAggregateInputType = {
    id?: true
    filename?: true
    originalFilename?: true
    fileSize?: true
    mimeType?: true
    totalRecords?: true
    processedRecords?: true
    successCount?: true
    errorCount?: true
    skipCount?: true
    duplicateCount?: true
    status?: true
    uploadedById?: true
    batchName?: true
    skipErrors?: true
    updateExisting?: true
    processingStarted?: true
    processingCompleted?: true
    errorLog?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UploadBatchCountAggregateInputType = {
    id?: true
    filename?: true
    originalFilename?: true
    fileSize?: true
    mimeType?: true
    totalRecords?: true
    processedRecords?: true
    successCount?: true
    errorCount?: true
    skipCount?: true
    duplicateCount?: true
    status?: true
    uploadedById?: true
    batchName?: true
    skipErrors?: true
    updateExisting?: true
    processingStarted?: true
    processingCompleted?: true
    errorLog?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UploadBatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UploadBatch to aggregate.
     */
    where?: UploadBatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UploadBatches to fetch.
     */
    orderBy?: UploadBatchOrderByWithRelationInput | UploadBatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UploadBatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UploadBatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UploadBatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UploadBatches
    **/
    _count?: true | UploadBatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UploadBatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UploadBatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UploadBatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UploadBatchMaxAggregateInputType
  }

  export type GetUploadBatchAggregateType<T extends UploadBatchAggregateArgs> = {
        [P in keyof T & keyof AggregateUploadBatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUploadBatch[P]>
      : GetScalarType<T[P], AggregateUploadBatch[P]>
  }




  export type UploadBatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UploadBatchWhereInput
    orderBy?: UploadBatchOrderByWithAggregationInput | UploadBatchOrderByWithAggregationInput[]
    by: UploadBatchScalarFieldEnum[] | UploadBatchScalarFieldEnum
    having?: UploadBatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UploadBatchCountAggregateInputType | true
    _avg?: UploadBatchAvgAggregateInputType
    _sum?: UploadBatchSumAggregateInputType
    _min?: UploadBatchMinAggregateInputType
    _max?: UploadBatchMaxAggregateInputType
  }

  export type UploadBatchGroupByOutputType = {
    id: string
    filename: string
    originalFilename: string
    fileSize: number
    mimeType: string
    totalRecords: number
    processedRecords: number
    successCount: number
    errorCount: number
    skipCount: number
    duplicateCount: number
    status: string
    uploadedById: string
    batchName: string | null
    skipErrors: boolean
    updateExisting: boolean
    processingStarted: Date | null
    processingCompleted: Date | null
    errorLog: string | null
    createdAt: Date
    updatedAt: Date
    _count: UploadBatchCountAggregateOutputType | null
    _avg: UploadBatchAvgAggregateOutputType | null
    _sum: UploadBatchSumAggregateOutputType | null
    _min: UploadBatchMinAggregateOutputType | null
    _max: UploadBatchMaxAggregateOutputType | null
  }

  type GetUploadBatchGroupByPayload<T extends UploadBatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UploadBatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UploadBatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UploadBatchGroupByOutputType[P]>
            : GetScalarType<T[P], UploadBatchGroupByOutputType[P]>
        }
      >
    >


  export type UploadBatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    originalFilename?: boolean
    fileSize?: boolean
    mimeType?: boolean
    totalRecords?: boolean
    processedRecords?: boolean
    successCount?: boolean
    errorCount?: boolean
    skipCount?: boolean
    duplicateCount?: boolean
    status?: boolean
    uploadedById?: boolean
    batchName?: boolean
    skipErrors?: boolean
    updateExisting?: boolean
    processingStarted?: boolean
    processingCompleted?: boolean
    errorLog?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["uploadBatch"]>

  export type UploadBatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    originalFilename?: boolean
    fileSize?: boolean
    mimeType?: boolean
    totalRecords?: boolean
    processedRecords?: boolean
    successCount?: boolean
    errorCount?: boolean
    skipCount?: boolean
    duplicateCount?: boolean
    status?: boolean
    uploadedById?: boolean
    batchName?: boolean
    skipErrors?: boolean
    updateExisting?: boolean
    processingStarted?: boolean
    processingCompleted?: boolean
    errorLog?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["uploadBatch"]>

  export type UploadBatchSelectScalar = {
    id?: boolean
    filename?: boolean
    originalFilename?: boolean
    fileSize?: boolean
    mimeType?: boolean
    totalRecords?: boolean
    processedRecords?: boolean
    successCount?: boolean
    errorCount?: boolean
    skipCount?: boolean
    duplicateCount?: boolean
    status?: boolean
    uploadedById?: boolean
    batchName?: boolean
    skipErrors?: boolean
    updateExisting?: boolean
    processingStarted?: boolean
    processingCompleted?: boolean
    errorLog?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UploadBatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UploadBatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UploadBatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UploadBatch"
    objects: {
      uploadedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      filename: string
      originalFilename: string
      fileSize: number
      mimeType: string
      totalRecords: number
      processedRecords: number
      successCount: number
      errorCount: number
      skipCount: number
      duplicateCount: number
      status: string
      uploadedById: string
      batchName: string | null
      skipErrors: boolean
      updateExisting: boolean
      processingStarted: Date | null
      processingCompleted: Date | null
      errorLog: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["uploadBatch"]>
    composites: {}
  }

  type UploadBatchGetPayload<S extends boolean | null | undefined | UploadBatchDefaultArgs> = $Result.GetResult<Prisma.$UploadBatchPayload, S>

  type UploadBatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UploadBatchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UploadBatchCountAggregateInputType | true
    }

  export interface UploadBatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UploadBatch'], meta: { name: 'UploadBatch' } }
    /**
     * Find zero or one UploadBatch that matches the filter.
     * @param {UploadBatchFindUniqueArgs} args - Arguments to find a UploadBatch
     * @example
     * // Get one UploadBatch
     * const uploadBatch = await prisma.uploadBatch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UploadBatchFindUniqueArgs>(args: SelectSubset<T, UploadBatchFindUniqueArgs<ExtArgs>>): Prisma__UploadBatchClient<$Result.GetResult<Prisma.$UploadBatchPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UploadBatch that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UploadBatchFindUniqueOrThrowArgs} args - Arguments to find a UploadBatch
     * @example
     * // Get one UploadBatch
     * const uploadBatch = await prisma.uploadBatch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UploadBatchFindUniqueOrThrowArgs>(args: SelectSubset<T, UploadBatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UploadBatchClient<$Result.GetResult<Prisma.$UploadBatchPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UploadBatch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadBatchFindFirstArgs} args - Arguments to find a UploadBatch
     * @example
     * // Get one UploadBatch
     * const uploadBatch = await prisma.uploadBatch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UploadBatchFindFirstArgs>(args?: SelectSubset<T, UploadBatchFindFirstArgs<ExtArgs>>): Prisma__UploadBatchClient<$Result.GetResult<Prisma.$UploadBatchPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UploadBatch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadBatchFindFirstOrThrowArgs} args - Arguments to find a UploadBatch
     * @example
     * // Get one UploadBatch
     * const uploadBatch = await prisma.uploadBatch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UploadBatchFindFirstOrThrowArgs>(args?: SelectSubset<T, UploadBatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__UploadBatchClient<$Result.GetResult<Prisma.$UploadBatchPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UploadBatches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadBatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UploadBatches
     * const uploadBatches = await prisma.uploadBatch.findMany()
     * 
     * // Get first 10 UploadBatches
     * const uploadBatches = await prisma.uploadBatch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const uploadBatchWithIdOnly = await prisma.uploadBatch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UploadBatchFindManyArgs>(args?: SelectSubset<T, UploadBatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UploadBatchPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UploadBatch.
     * @param {UploadBatchCreateArgs} args - Arguments to create a UploadBatch.
     * @example
     * // Create one UploadBatch
     * const UploadBatch = await prisma.uploadBatch.create({
     *   data: {
     *     // ... data to create a UploadBatch
     *   }
     * })
     * 
     */
    create<T extends UploadBatchCreateArgs>(args: SelectSubset<T, UploadBatchCreateArgs<ExtArgs>>): Prisma__UploadBatchClient<$Result.GetResult<Prisma.$UploadBatchPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UploadBatches.
     * @param {UploadBatchCreateManyArgs} args - Arguments to create many UploadBatches.
     * @example
     * // Create many UploadBatches
     * const uploadBatch = await prisma.uploadBatch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UploadBatchCreateManyArgs>(args?: SelectSubset<T, UploadBatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UploadBatches and returns the data saved in the database.
     * @param {UploadBatchCreateManyAndReturnArgs} args - Arguments to create many UploadBatches.
     * @example
     * // Create many UploadBatches
     * const uploadBatch = await prisma.uploadBatch.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UploadBatches and only return the `id`
     * const uploadBatchWithIdOnly = await prisma.uploadBatch.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UploadBatchCreateManyAndReturnArgs>(args?: SelectSubset<T, UploadBatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UploadBatchPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UploadBatch.
     * @param {UploadBatchDeleteArgs} args - Arguments to delete one UploadBatch.
     * @example
     * // Delete one UploadBatch
     * const UploadBatch = await prisma.uploadBatch.delete({
     *   where: {
     *     // ... filter to delete one UploadBatch
     *   }
     * })
     * 
     */
    delete<T extends UploadBatchDeleteArgs>(args: SelectSubset<T, UploadBatchDeleteArgs<ExtArgs>>): Prisma__UploadBatchClient<$Result.GetResult<Prisma.$UploadBatchPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UploadBatch.
     * @param {UploadBatchUpdateArgs} args - Arguments to update one UploadBatch.
     * @example
     * // Update one UploadBatch
     * const uploadBatch = await prisma.uploadBatch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UploadBatchUpdateArgs>(args: SelectSubset<T, UploadBatchUpdateArgs<ExtArgs>>): Prisma__UploadBatchClient<$Result.GetResult<Prisma.$UploadBatchPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UploadBatches.
     * @param {UploadBatchDeleteManyArgs} args - Arguments to filter UploadBatches to delete.
     * @example
     * // Delete a few UploadBatches
     * const { count } = await prisma.uploadBatch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UploadBatchDeleteManyArgs>(args?: SelectSubset<T, UploadBatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UploadBatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadBatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UploadBatches
     * const uploadBatch = await prisma.uploadBatch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UploadBatchUpdateManyArgs>(args: SelectSubset<T, UploadBatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UploadBatch.
     * @param {UploadBatchUpsertArgs} args - Arguments to update or create a UploadBatch.
     * @example
     * // Update or create a UploadBatch
     * const uploadBatch = await prisma.uploadBatch.upsert({
     *   create: {
     *     // ... data to create a UploadBatch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UploadBatch we want to update
     *   }
     * })
     */
    upsert<T extends UploadBatchUpsertArgs>(args: SelectSubset<T, UploadBatchUpsertArgs<ExtArgs>>): Prisma__UploadBatchClient<$Result.GetResult<Prisma.$UploadBatchPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UploadBatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadBatchCountArgs} args - Arguments to filter UploadBatches to count.
     * @example
     * // Count the number of UploadBatches
     * const count = await prisma.uploadBatch.count({
     *   where: {
     *     // ... the filter for the UploadBatches we want to count
     *   }
     * })
    **/
    count<T extends UploadBatchCountArgs>(
      args?: Subset<T, UploadBatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UploadBatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UploadBatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadBatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UploadBatchAggregateArgs>(args: Subset<T, UploadBatchAggregateArgs>): Prisma.PrismaPromise<GetUploadBatchAggregateType<T>>

    /**
     * Group by UploadBatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadBatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UploadBatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UploadBatchGroupByArgs['orderBy'] }
        : { orderBy?: UploadBatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UploadBatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUploadBatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UploadBatch model
   */
  readonly fields: UploadBatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UploadBatch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UploadBatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UploadBatch model
   */ 
  interface UploadBatchFieldRefs {
    readonly id: FieldRef<"UploadBatch", 'String'>
    readonly filename: FieldRef<"UploadBatch", 'String'>
    readonly originalFilename: FieldRef<"UploadBatch", 'String'>
    readonly fileSize: FieldRef<"UploadBatch", 'Int'>
    readonly mimeType: FieldRef<"UploadBatch", 'String'>
    readonly totalRecords: FieldRef<"UploadBatch", 'Int'>
    readonly processedRecords: FieldRef<"UploadBatch", 'Int'>
    readonly successCount: FieldRef<"UploadBatch", 'Int'>
    readonly errorCount: FieldRef<"UploadBatch", 'Int'>
    readonly skipCount: FieldRef<"UploadBatch", 'Int'>
    readonly duplicateCount: FieldRef<"UploadBatch", 'Int'>
    readonly status: FieldRef<"UploadBatch", 'String'>
    readonly uploadedById: FieldRef<"UploadBatch", 'String'>
    readonly batchName: FieldRef<"UploadBatch", 'String'>
    readonly skipErrors: FieldRef<"UploadBatch", 'Boolean'>
    readonly updateExisting: FieldRef<"UploadBatch", 'Boolean'>
    readonly processingStarted: FieldRef<"UploadBatch", 'DateTime'>
    readonly processingCompleted: FieldRef<"UploadBatch", 'DateTime'>
    readonly errorLog: FieldRef<"UploadBatch", 'String'>
    readonly createdAt: FieldRef<"UploadBatch", 'DateTime'>
    readonly updatedAt: FieldRef<"UploadBatch", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UploadBatch findUnique
   */
  export type UploadBatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadBatch
     */
    select?: UploadBatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadBatchInclude<ExtArgs> | null
    /**
     * Filter, which UploadBatch to fetch.
     */
    where: UploadBatchWhereUniqueInput
  }

  /**
   * UploadBatch findUniqueOrThrow
   */
  export type UploadBatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadBatch
     */
    select?: UploadBatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadBatchInclude<ExtArgs> | null
    /**
     * Filter, which UploadBatch to fetch.
     */
    where: UploadBatchWhereUniqueInput
  }

  /**
   * UploadBatch findFirst
   */
  export type UploadBatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadBatch
     */
    select?: UploadBatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadBatchInclude<ExtArgs> | null
    /**
     * Filter, which UploadBatch to fetch.
     */
    where?: UploadBatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UploadBatches to fetch.
     */
    orderBy?: UploadBatchOrderByWithRelationInput | UploadBatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UploadBatches.
     */
    cursor?: UploadBatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UploadBatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UploadBatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UploadBatches.
     */
    distinct?: UploadBatchScalarFieldEnum | UploadBatchScalarFieldEnum[]
  }

  /**
   * UploadBatch findFirstOrThrow
   */
  export type UploadBatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadBatch
     */
    select?: UploadBatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadBatchInclude<ExtArgs> | null
    /**
     * Filter, which UploadBatch to fetch.
     */
    where?: UploadBatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UploadBatches to fetch.
     */
    orderBy?: UploadBatchOrderByWithRelationInput | UploadBatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UploadBatches.
     */
    cursor?: UploadBatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UploadBatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UploadBatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UploadBatches.
     */
    distinct?: UploadBatchScalarFieldEnum | UploadBatchScalarFieldEnum[]
  }

  /**
   * UploadBatch findMany
   */
  export type UploadBatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadBatch
     */
    select?: UploadBatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadBatchInclude<ExtArgs> | null
    /**
     * Filter, which UploadBatches to fetch.
     */
    where?: UploadBatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UploadBatches to fetch.
     */
    orderBy?: UploadBatchOrderByWithRelationInput | UploadBatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UploadBatches.
     */
    cursor?: UploadBatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UploadBatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UploadBatches.
     */
    skip?: number
    distinct?: UploadBatchScalarFieldEnum | UploadBatchScalarFieldEnum[]
  }

  /**
   * UploadBatch create
   */
  export type UploadBatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadBatch
     */
    select?: UploadBatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadBatchInclude<ExtArgs> | null
    /**
     * The data needed to create a UploadBatch.
     */
    data: XOR<UploadBatchCreateInput, UploadBatchUncheckedCreateInput>
  }

  /**
   * UploadBatch createMany
   */
  export type UploadBatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UploadBatches.
     */
    data: UploadBatchCreateManyInput | UploadBatchCreateManyInput[]
  }

  /**
   * UploadBatch createManyAndReturn
   */
  export type UploadBatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadBatch
     */
    select?: UploadBatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UploadBatches.
     */
    data: UploadBatchCreateManyInput | UploadBatchCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadBatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UploadBatch update
   */
  export type UploadBatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadBatch
     */
    select?: UploadBatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadBatchInclude<ExtArgs> | null
    /**
     * The data needed to update a UploadBatch.
     */
    data: XOR<UploadBatchUpdateInput, UploadBatchUncheckedUpdateInput>
    /**
     * Choose, which UploadBatch to update.
     */
    where: UploadBatchWhereUniqueInput
  }

  /**
   * UploadBatch updateMany
   */
  export type UploadBatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UploadBatches.
     */
    data: XOR<UploadBatchUpdateManyMutationInput, UploadBatchUncheckedUpdateManyInput>
    /**
     * Filter which UploadBatches to update
     */
    where?: UploadBatchWhereInput
  }

  /**
   * UploadBatch upsert
   */
  export type UploadBatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadBatch
     */
    select?: UploadBatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadBatchInclude<ExtArgs> | null
    /**
     * The filter to search for the UploadBatch to update in case it exists.
     */
    where: UploadBatchWhereUniqueInput
    /**
     * In case the UploadBatch found by the `where` argument doesn't exist, create a new UploadBatch with this data.
     */
    create: XOR<UploadBatchCreateInput, UploadBatchUncheckedCreateInput>
    /**
     * In case the UploadBatch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UploadBatchUpdateInput, UploadBatchUncheckedUpdateInput>
  }

  /**
   * UploadBatch delete
   */
  export type UploadBatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadBatch
     */
    select?: UploadBatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadBatchInclude<ExtArgs> | null
    /**
     * Filter which UploadBatch to delete.
     */
    where: UploadBatchWhereUniqueInput
  }

  /**
   * UploadBatch deleteMany
   */
  export type UploadBatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UploadBatches to delete
     */
    where?: UploadBatchWhereInput
  }

  /**
   * UploadBatch without action
   */
  export type UploadBatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadBatch
     */
    select?: UploadBatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadBatchInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isSystem: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    isSystem: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    description: number
    isSystem: number
    isActive: number
    createdAt: number
    updatedAt: number
    createdById: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isSystem?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isSystem?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isSystem?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: string
    name: string
    description: string | null
    isSystem: boolean
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isSystem?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    userRoles?: boolean | Role$userRolesArgs<ExtArgs>
    createdBy?: boolean | Role$createdByArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isSystem?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    createdBy?: boolean | Role$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    isSystem?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
  }

  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    userRoles?: boolean | Role$userRolesArgs<ExtArgs>
    createdBy?: boolean | Role$createdByArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Role$createdByArgs<ExtArgs>
  }

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      permissions: Prisma.$RolePermissionPayload<ExtArgs>[]
      userRoles: Prisma.$UserRolePayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      isSystem: boolean
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      createdById: string | null
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    permissions<T extends Role$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, Role$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    userRoles<T extends Role$userRolesArgs<ExtArgs> = {}>(args?: Subset<T, Role$userRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany"> | Null>
    createdBy<T extends Role$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Role$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
    readonly description: FieldRef<"Role", 'String'>
    readonly isSystem: FieldRef<"Role", 'Boolean'>
    readonly isActive: FieldRef<"Role", 'Boolean'>
    readonly createdAt: FieldRef<"Role", 'DateTime'>
    readonly updatedAt: FieldRef<"Role", 'DateTime'>
    readonly createdById: FieldRef<"Role", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }

  /**
   * Role.permissions
   */
  export type Role$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Role.userRoles
   */
  export type Role$userRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * Role.createdBy
   */
  export type Role$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    category: string | null
    resource: string | null
    action: string | null
    isSystem: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    category: string | null
    resource: string | null
    action: string | null
    isSystem: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    category: number
    resource: number
    action: number
    isSystem: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PermissionMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    category?: true
    resource?: true
    action?: true
    isSystem?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    category?: true
    resource?: true
    action?: true
    isSystem?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    category?: true
    resource?: true
    action?: true
    isSystem?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: string
    code: string
    name: string
    description: string | null
    category: string
    resource: string
    action: string
    isSystem: boolean
    createdAt: Date
    updatedAt: Date
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    resource?: boolean
    action?: boolean
    isSystem?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rolePermissions?: boolean | Permission$rolePermissionsArgs<ExtArgs>
    contexts?: boolean | Permission$contextsArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    resource?: boolean
    action?: boolean
    isSystem?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    resource?: boolean
    action?: boolean
    isSystem?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rolePermissions?: boolean | Permission$rolePermissionsArgs<ExtArgs>
    contexts?: boolean | Permission$contextsArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      rolePermissions: Prisma.$RolePermissionPayload<ExtArgs>[]
      contexts: Prisma.$PermissionContextPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      description: string | null
      category: string
      resource: string
      action: string
      isSystem: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }

  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionFindUniqueArgs>(args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionFindFirstArgs>(args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionFindManyArgs>(args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
     */
    create<T extends PermissionCreateArgs>(args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCreateManyArgs>(args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Permissions and returns the data saved in the database.
     * @param {PermissionCreateManyAndReturnArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, PermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
     */
    delete<T extends PermissionDeleteArgs>(args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUpdateArgs>(args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionDeleteManyArgs>(args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUpdateManyArgs>(args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUpsertArgs>(args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rolePermissions<T extends Permission$rolePermissionsArgs<ExtArgs> = {}>(args?: Subset<T, Permission$rolePermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    contexts<T extends Permission$contextsArgs<ExtArgs> = {}>(args?: Subset<T, Permission$contextsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionContextPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Permission model
   */ 
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'String'>
    readonly code: FieldRef<"Permission", 'String'>
    readonly name: FieldRef<"Permission", 'String'>
    readonly description: FieldRef<"Permission", 'String'>
    readonly category: FieldRef<"Permission", 'String'>
    readonly resource: FieldRef<"Permission", 'String'>
    readonly action: FieldRef<"Permission", 'String'>
    readonly isSystem: FieldRef<"Permission", 'Boolean'>
    readonly createdAt: FieldRef<"Permission", 'DateTime'>
    readonly updatedAt: FieldRef<"Permission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
  }

  /**
   * Permission createManyAndReturn
   */
  export type PermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission.rolePermissions
   */
  export type Permission$rolePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Permission.contexts
   */
  export type Permission$contextsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionContext
     */
    select?: PermissionContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionContextInclude<ExtArgs> | null
    where?: PermissionContextWhereInput
    orderBy?: PermissionContextOrderByWithRelationInput | PermissionContextOrderByWithRelationInput[]
    cursor?: PermissionContextWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PermissionContextScalarFieldEnum | PermissionContextScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model RolePermission
   */

  export type AggregateRolePermission = {
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  export type RolePermissionMinAggregateOutputType = {
    id: string | null
    roleId: string | null
    permissionId: string | null
    grantedAt: Date | null
    grantedById: string | null
    expiresAt: Date | null
  }

  export type RolePermissionMaxAggregateOutputType = {
    id: string | null
    roleId: string | null
    permissionId: string | null
    grantedAt: Date | null
    grantedById: string | null
    expiresAt: Date | null
  }

  export type RolePermissionCountAggregateOutputType = {
    id: number
    roleId: number
    permissionId: number
    grantedAt: number
    grantedById: number
    expiresAt: number
    _all: number
  }


  export type RolePermissionMinAggregateInputType = {
    id?: true
    roleId?: true
    permissionId?: true
    grantedAt?: true
    grantedById?: true
    expiresAt?: true
  }

  export type RolePermissionMaxAggregateInputType = {
    id?: true
    roleId?: true
    permissionId?: true
    grantedAt?: true
    grantedById?: true
    expiresAt?: true
  }

  export type RolePermissionCountAggregateInputType = {
    id?: true
    roleId?: true
    permissionId?: true
    grantedAt?: true
    grantedById?: true
    expiresAt?: true
    _all?: true
  }

  export type RolePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermission to aggregate.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RolePermissions
    **/
    _count?: true | RolePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolePermissionMaxAggregateInputType
  }

  export type GetRolePermissionAggregateType<T extends RolePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateRolePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRolePermission[P]>
      : GetScalarType<T[P], AggregateRolePermission[P]>
  }




  export type RolePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithAggregationInput | RolePermissionOrderByWithAggregationInput[]
    by: RolePermissionScalarFieldEnum[] | RolePermissionScalarFieldEnum
    having?: RolePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolePermissionCountAggregateInputType | true
    _min?: RolePermissionMinAggregateInputType
    _max?: RolePermissionMaxAggregateInputType
  }

  export type RolePermissionGroupByOutputType = {
    id: string
    roleId: string
    permissionId: string
    grantedAt: Date
    grantedById: string | null
    expiresAt: Date | null
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  type GetRolePermissionGroupByPayload<T extends RolePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
        }
      >
    >


  export type RolePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    permissionId?: boolean
    grantedAt?: boolean
    grantedById?: boolean
    expiresAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    grantedBy?: boolean | RolePermission$grantedByArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>

  export type RolePermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    permissionId?: boolean
    grantedAt?: boolean
    grantedById?: boolean
    expiresAt?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    grantedBy?: boolean | RolePermission$grantedByArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>

  export type RolePermissionSelectScalar = {
    id?: boolean
    roleId?: boolean
    permissionId?: boolean
    grantedAt?: boolean
    grantedById?: boolean
    expiresAt?: boolean
  }

  export type RolePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    grantedBy?: boolean | RolePermission$grantedByArgs<ExtArgs>
  }
  export type RolePermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    grantedBy?: boolean | RolePermission$grantedByArgs<ExtArgs>
  }

  export type $RolePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RolePermission"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
      grantedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      roleId: string
      permissionId: string
      grantedAt: Date
      grantedById: string | null
      expiresAt: Date | null
    }, ExtArgs["result"]["rolePermission"]>
    composites: {}
  }

  type RolePermissionGetPayload<S extends boolean | null | undefined | RolePermissionDefaultArgs> = $Result.GetResult<Prisma.$RolePermissionPayload, S>

  type RolePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RolePermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RolePermissionCountAggregateInputType | true
    }

  export interface RolePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RolePermission'], meta: { name: 'RolePermission' } }
    /**
     * Find zero or one RolePermission that matches the filter.
     * @param {RolePermissionFindUniqueArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RolePermissionFindUniqueArgs>(args: SelectSubset<T, RolePermissionFindUniqueArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RolePermission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RolePermissionFindUniqueOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RolePermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, RolePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RolePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RolePermissionFindFirstArgs>(args?: SelectSubset<T, RolePermissionFindFirstArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RolePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RolePermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, RolePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RolePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany()
     * 
     * // Get first 10 RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolePermissionWithIdOnly = await prisma.rolePermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RolePermissionFindManyArgs>(args?: SelectSubset<T, RolePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RolePermission.
     * @param {RolePermissionCreateArgs} args - Arguments to create a RolePermission.
     * @example
     * // Create one RolePermission
     * const RolePermission = await prisma.rolePermission.create({
     *   data: {
     *     // ... data to create a RolePermission
     *   }
     * })
     * 
     */
    create<T extends RolePermissionCreateArgs>(args: SelectSubset<T, RolePermissionCreateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RolePermissions.
     * @param {RolePermissionCreateManyArgs} args - Arguments to create many RolePermissions.
     * @example
     * // Create many RolePermissions
     * const rolePermission = await prisma.rolePermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RolePermissionCreateManyArgs>(args?: SelectSubset<T, RolePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RolePermissions and returns the data saved in the database.
     * @param {RolePermissionCreateManyAndReturnArgs} args - Arguments to create many RolePermissions.
     * @example
     * // Create many RolePermissions
     * const rolePermission = await prisma.rolePermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RolePermissions and only return the `id`
     * const rolePermissionWithIdOnly = await prisma.rolePermission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RolePermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, RolePermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RolePermission.
     * @param {RolePermissionDeleteArgs} args - Arguments to delete one RolePermission.
     * @example
     * // Delete one RolePermission
     * const RolePermission = await prisma.rolePermission.delete({
     *   where: {
     *     // ... filter to delete one RolePermission
     *   }
     * })
     * 
     */
    delete<T extends RolePermissionDeleteArgs>(args: SelectSubset<T, RolePermissionDeleteArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RolePermission.
     * @param {RolePermissionUpdateArgs} args - Arguments to update one RolePermission.
     * @example
     * // Update one RolePermission
     * const rolePermission = await prisma.rolePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RolePermissionUpdateArgs>(args: SelectSubset<T, RolePermissionUpdateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RolePermissions.
     * @param {RolePermissionDeleteManyArgs} args - Arguments to filter RolePermissions to delete.
     * @example
     * // Delete a few RolePermissions
     * const { count } = await prisma.rolePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RolePermissionDeleteManyArgs>(args?: SelectSubset<T, RolePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RolePermissions
     * const rolePermission = await prisma.rolePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RolePermissionUpdateManyArgs>(args: SelectSubset<T, RolePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RolePermission.
     * @param {RolePermissionUpsertArgs} args - Arguments to update or create a RolePermission.
     * @example
     * // Update or create a RolePermission
     * const rolePermission = await prisma.rolePermission.upsert({
     *   create: {
     *     // ... data to create a RolePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RolePermission we want to update
     *   }
     * })
     */
    upsert<T extends RolePermissionUpsertArgs>(args: SelectSubset<T, RolePermissionUpsertArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionCountArgs} args - Arguments to filter RolePermissions to count.
     * @example
     * // Count the number of RolePermissions
     * const count = await prisma.rolePermission.count({
     *   where: {
     *     // ... the filter for the RolePermissions we want to count
     *   }
     * })
    **/
    count<T extends RolePermissionCountArgs>(
      args?: Subset<T, RolePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolePermissionAggregateArgs>(args: Subset<T, RolePermissionAggregateArgs>): Prisma.PrismaPromise<GetRolePermissionAggregateType<T>>

    /**
     * Group by RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolePermissionGroupByArgs['orderBy'] }
        : { orderBy?: RolePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RolePermission model
   */
  readonly fields: RolePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RolePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    grantedBy<T extends RolePermission$grantedByArgs<ExtArgs> = {}>(args?: Subset<T, RolePermission$grantedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RolePermission model
   */ 
  interface RolePermissionFieldRefs {
    readonly id: FieldRef<"RolePermission", 'String'>
    readonly roleId: FieldRef<"RolePermission", 'String'>
    readonly permissionId: FieldRef<"RolePermission", 'String'>
    readonly grantedAt: FieldRef<"RolePermission", 'DateTime'>
    readonly grantedById: FieldRef<"RolePermission", 'String'>
    readonly expiresAt: FieldRef<"RolePermission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RolePermission findUnique
   */
  export type RolePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findUniqueOrThrow
   */
  export type RolePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findFirst
   */
  export type RolePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findFirstOrThrow
   */
  export type RolePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findMany
   */
  export type RolePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermissions to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission create
   */
  export type RolePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a RolePermission.
     */
    data: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
  }

  /**
   * RolePermission createMany
   */
  export type RolePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
  }

  /**
   * RolePermission createManyAndReturn
   */
  export type RolePermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RolePermission update
   */
  export type RolePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a RolePermission.
     */
    data: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
    /**
     * Choose, which RolePermission to update.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission updateMany
   */
  export type RolePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RolePermissions.
     */
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which RolePermissions to update
     */
    where?: RolePermissionWhereInput
  }

  /**
   * RolePermission upsert
   */
  export type RolePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the RolePermission to update in case it exists.
     */
    where: RolePermissionWhereUniqueInput
    /**
     * In case the RolePermission found by the `where` argument doesn't exist, create a new RolePermission with this data.
     */
    create: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
    /**
     * In case the RolePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
  }

  /**
   * RolePermission delete
   */
  export type RolePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter which RolePermission to delete.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission deleteMany
   */
  export type RolePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermissions to delete
     */
    where?: RolePermissionWhereInput
  }

  /**
   * RolePermission.grantedBy
   */
  export type RolePermission$grantedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * RolePermission without action
   */
  export type RolePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
  }


  /**
   * Model UserRole
   */

  export type AggregateUserRole = {
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleMinAggregateOutputType = {
    id: string | null
    userId: string | null
    roleId: string | null
    assignedAt: Date | null
    assignedById: string | null
    expiresAt: Date | null
    isActive: boolean | null
  }

  export type UserRoleMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    roleId: string | null
    assignedAt: Date | null
    assignedById: string | null
    expiresAt: Date | null
    isActive: boolean | null
  }

  export type UserRoleCountAggregateOutputType = {
    id: number
    userId: number
    roleId: number
    assignedAt: number
    assignedById: number
    expiresAt: number
    isActive: number
    _all: number
  }


  export type UserRoleMinAggregateInputType = {
    id?: true
    userId?: true
    roleId?: true
    assignedAt?: true
    assignedById?: true
    expiresAt?: true
    isActive?: true
  }

  export type UserRoleMaxAggregateInputType = {
    id?: true
    userId?: true
    roleId?: true
    assignedAt?: true
    assignedById?: true
    expiresAt?: true
    isActive?: true
  }

  export type UserRoleCountAggregateInputType = {
    id?: true
    userId?: true
    roleId?: true
    assignedAt?: true
    assignedById?: true
    expiresAt?: true
    isActive?: true
    _all?: true
  }

  export type UserRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRole to aggregate.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoles
    **/
    _count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }




  export type UserRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithAggregationInput | UserRoleOrderByWithAggregationInput[]
    by: UserRoleScalarFieldEnum[] | UserRoleScalarFieldEnum
    having?: UserRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleCountAggregateInputType | true
    _min?: UserRoleMinAggregateInputType
    _max?: UserRoleMaxAggregateInputType
  }

  export type UserRoleGroupByOutputType = {
    id: string
    userId: string
    roleId: string
    assignedAt: Date
    assignedById: string | null
    expiresAt: Date | null
    isActive: boolean
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
        }
      >
    >


  export type UserRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    roleId?: boolean
    assignedAt?: boolean
    assignedById?: boolean
    expiresAt?: boolean
    isActive?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserRole$assignedByArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    roleId?: boolean
    assignedAt?: boolean
    assignedById?: boolean
    expiresAt?: boolean
    isActive?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserRole$assignedByArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectScalar = {
    id?: boolean
    userId?: boolean
    roleId?: boolean
    assignedAt?: boolean
    assignedById?: boolean
    expiresAt?: boolean
    isActive?: boolean
  }

  export type UserRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserRole$assignedByArgs<ExtArgs>
  }
  export type UserRoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserRole$assignedByArgs<ExtArgs>
  }

  export type $UserRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRole"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      role: Prisma.$RolePayload<ExtArgs>
      assignedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      roleId: string
      assignedAt: Date
      assignedById: string | null
      expiresAt: Date | null
      isActive: boolean
    }, ExtArgs["result"]["userRole"]>
    composites: {}
  }

  type UserRoleGetPayload<S extends boolean | null | undefined | UserRoleDefaultArgs> = $Result.GetResult<Prisma.$UserRolePayload, S>

  type UserRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserRoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserRoleCountAggregateInputType | true
    }

  export interface UserRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRole'], meta: { name: 'UserRole' } }
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRoleFindUniqueArgs>(args: SelectSubset<T, UserRoleFindUniqueArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserRole that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserRoleFindUniqueOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRoleFindFirstArgs>(args?: SelectSubset<T, UserRoleFindFirstArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRoleWithIdOnly = await prisma.userRole.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserRoleFindManyArgs>(args?: SelectSubset<T, UserRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserRole.
     * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
     */
    create<T extends UserRoleCreateArgs>(args: SelectSubset<T, UserRoleCreateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserRoles.
     * @param {UserRoleCreateManyArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRoleCreateManyArgs>(args?: SelectSubset<T, UserRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRoles and returns the data saved in the database.
     * @param {UserRoleCreateManyAndReturnArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRoles and only return the `id`
     * const userRoleWithIdOnly = await prisma.userRole.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRoleCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserRole.
     * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
     */
    delete<T extends UserRoleDeleteArgs>(args: SelectSubset<T, UserRoleDeleteArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserRole.
     * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRoleUpdateArgs>(args: SelectSubset<T, UserRoleUpdateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserRoles.
     * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRoleDeleteManyArgs>(args?: SelectSubset<T, UserRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRoleUpdateManyArgs>(args: SelectSubset<T, UserRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRole.
     * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
     */
    upsert<T extends UserRoleUpsertArgs>(args: SelectSubset<T, UserRoleUpsertArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends UserRoleCountArgs>(
      args?: Subset<T, UserRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): Prisma.PrismaPromise<GetUserRoleAggregateType<T>>

    /**
     * Group by UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRole model
   */
  readonly fields: UserRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assignedBy<T extends UserRole$assignedByArgs<ExtArgs> = {}>(args?: Subset<T, UserRole$assignedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRole model
   */ 
  interface UserRoleFieldRefs {
    readonly id: FieldRef<"UserRole", 'String'>
    readonly userId: FieldRef<"UserRole", 'String'>
    readonly roleId: FieldRef<"UserRole", 'String'>
    readonly assignedAt: FieldRef<"UserRole", 'DateTime'>
    readonly assignedById: FieldRef<"UserRole", 'String'>
    readonly expiresAt: FieldRef<"UserRole", 'DateTime'>
    readonly isActive: FieldRef<"UserRole", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * UserRole findUnique
   */
  export type UserRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findUniqueOrThrow
   */
  export type UserRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findFirst
   */
  export type UserRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findFirstOrThrow
   */
  export type UserRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findMany
   */
  export type UserRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRoles to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole create
   */
  export type UserRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRole.
     */
    data: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
  }

  /**
   * UserRole createMany
   */
  export type UserRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
  }

  /**
   * UserRole createManyAndReturn
   */
  export type UserRoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRole update
   */
  export type UserRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRole.
     */
    data: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
    /**
     * Choose, which UserRole to update.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole updateMany
   */
  export type UserRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
  }

  /**
   * UserRole upsert
   */
  export type UserRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRole to update in case it exists.
     */
    where: UserRoleWhereUniqueInput
    /**
     * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
     */
    create: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
    /**
     * In case the UserRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
  }

  /**
   * UserRole delete
   */
  export type UserRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter which UserRole to delete.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole deleteMany
   */
  export type UserRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoles to delete
     */
    where?: UserRoleWhereInput
  }

  /**
   * UserRole.assignedBy
   */
  export type UserRole$assignedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * UserRole without action
   */
  export type UserRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    actorId: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    oldValue: string | null
    newValue: string | null
    ipAddress: string | null
    userAgent: string | null
    sessionId: string | null
    metadata: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    actorId: string | null
    action: string | null
    entity: string | null
    entityId: string | null
    oldValue: string | null
    newValue: string | null
    ipAddress: string | null
    userAgent: string | null
    sessionId: string | null
    metadata: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    actorId: number
    action: number
    entity: number
    entityId: number
    oldValue: number
    newValue: number
    ipAddress: number
    userAgent: number
    sessionId: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    actorId?: true
    action?: true
    entity?: true
    entityId?: true
    oldValue?: true
    newValue?: true
    ipAddress?: true
    userAgent?: true
    sessionId?: true
    metadata?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    actorId?: true
    action?: true
    entity?: true
    entityId?: true
    oldValue?: true
    newValue?: true
    ipAddress?: true
    userAgent?: true
    sessionId?: true
    metadata?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    actorId?: true
    action?: true
    entity?: true
    entityId?: true
    oldValue?: true
    newValue?: true
    ipAddress?: true
    userAgent?: true
    sessionId?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    actorId: string | null
    action: string
    entity: string
    entityId: string | null
    oldValue: string | null
    newValue: string | null
    ipAddress: string | null
    userAgent: string | null
    sessionId: string | null
    metadata: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actorId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValue?: boolean
    newValue?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    sessionId?: boolean
    metadata?: boolean
    createdAt?: boolean
    actor?: boolean | AuditLog$actorArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    actorId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValue?: boolean
    newValue?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    sessionId?: boolean
    metadata?: boolean
    createdAt?: boolean
    actor?: boolean | AuditLog$actorArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    actorId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValue?: boolean
    newValue?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    sessionId?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | AuditLog$actorArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | AuditLog$actorArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      actor: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      actorId: string | null
      action: string
      entity: string
      entityId: string | null
      oldValue: string | null
      newValue: string | null
      ipAddress: string | null
      userAgent: string | null
      sessionId: string | null
      metadata: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    actor<T extends AuditLog$actorArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$actorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly actorId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entity: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly oldValue: FieldRef<"AuditLog", 'String'>
    readonly newValue: FieldRef<"AuditLog", 'String'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly sessionId: FieldRef<"AuditLog", 'String'>
    readonly metadata: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog.actor
   */
  export type AuditLog$actorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model DispositionCategory
   */

  export type AggregateDispositionCategory = {
    _count: DispositionCategoryCountAggregateOutputType | null
    _avg: DispositionCategoryAvgAggregateOutputType | null
    _sum: DispositionCategorySumAggregateOutputType | null
    _min: DispositionCategoryMinAggregateOutputType | null
    _max: DispositionCategoryMaxAggregateOutputType | null
  }

  export type DispositionCategoryAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type DispositionCategorySumAggregateOutputType = {
    sortOrder: number | null
  }

  export type DispositionCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    color: string | null
    icon: string | null
    sortOrder: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DispositionCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    color: string | null
    icon: string | null
    sortOrder: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DispositionCategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    color: number
    icon: number
    sortOrder: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DispositionCategoryAvgAggregateInputType = {
    sortOrder?: true
  }

  export type DispositionCategorySumAggregateInputType = {
    sortOrder?: true
  }

  export type DispositionCategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    color?: true
    icon?: true
    sortOrder?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DispositionCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    color?: true
    icon?: true
    sortOrder?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DispositionCategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    color?: true
    icon?: true
    sortOrder?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DispositionCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DispositionCategory to aggregate.
     */
    where?: DispositionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DispositionCategories to fetch.
     */
    orderBy?: DispositionCategoryOrderByWithRelationInput | DispositionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DispositionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DispositionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DispositionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DispositionCategories
    **/
    _count?: true | DispositionCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DispositionCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DispositionCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DispositionCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DispositionCategoryMaxAggregateInputType
  }

  export type GetDispositionCategoryAggregateType<T extends DispositionCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateDispositionCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDispositionCategory[P]>
      : GetScalarType<T[P], AggregateDispositionCategory[P]>
  }




  export type DispositionCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DispositionCategoryWhereInput
    orderBy?: DispositionCategoryOrderByWithAggregationInput | DispositionCategoryOrderByWithAggregationInput[]
    by: DispositionCategoryScalarFieldEnum[] | DispositionCategoryScalarFieldEnum
    having?: DispositionCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DispositionCategoryCountAggregateInputType | true
    _avg?: DispositionCategoryAvgAggregateInputType
    _sum?: DispositionCategorySumAggregateInputType
    _min?: DispositionCategoryMinAggregateInputType
    _max?: DispositionCategoryMaxAggregateInputType
  }

  export type DispositionCategoryGroupByOutputType = {
    id: string
    name: string
    description: string | null
    color: string | null
    icon: string | null
    sortOrder: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: DispositionCategoryCountAggregateOutputType | null
    _avg: DispositionCategoryAvgAggregateOutputType | null
    _sum: DispositionCategorySumAggregateOutputType | null
    _min: DispositionCategoryMinAggregateOutputType | null
    _max: DispositionCategoryMaxAggregateOutputType | null
  }

  type GetDispositionCategoryGroupByPayload<T extends DispositionCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DispositionCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DispositionCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DispositionCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], DispositionCategoryGroupByOutputType[P]>
        }
      >
    >


  export type DispositionCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    icon?: boolean
    sortOrder?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    dispositions?: boolean | DispositionCategory$dispositionsArgs<ExtArgs>
    _count?: boolean | DispositionCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dispositionCategory"]>

  export type DispositionCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    icon?: boolean
    sortOrder?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["dispositionCategory"]>

  export type DispositionCategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    color?: boolean
    icon?: boolean
    sortOrder?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DispositionCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dispositions?: boolean | DispositionCategory$dispositionsArgs<ExtArgs>
    _count?: boolean | DispositionCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DispositionCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DispositionCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DispositionCategory"
    objects: {
      dispositions: Prisma.$DispositionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      color: string | null
      icon: string | null
      sortOrder: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dispositionCategory"]>
    composites: {}
  }

  type DispositionCategoryGetPayload<S extends boolean | null | undefined | DispositionCategoryDefaultArgs> = $Result.GetResult<Prisma.$DispositionCategoryPayload, S>

  type DispositionCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DispositionCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DispositionCategoryCountAggregateInputType | true
    }

  export interface DispositionCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DispositionCategory'], meta: { name: 'DispositionCategory' } }
    /**
     * Find zero or one DispositionCategory that matches the filter.
     * @param {DispositionCategoryFindUniqueArgs} args - Arguments to find a DispositionCategory
     * @example
     * // Get one DispositionCategory
     * const dispositionCategory = await prisma.dispositionCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DispositionCategoryFindUniqueArgs>(args: SelectSubset<T, DispositionCategoryFindUniqueArgs<ExtArgs>>): Prisma__DispositionCategoryClient<$Result.GetResult<Prisma.$DispositionCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DispositionCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DispositionCategoryFindUniqueOrThrowArgs} args - Arguments to find a DispositionCategory
     * @example
     * // Get one DispositionCategory
     * const dispositionCategory = await prisma.dispositionCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DispositionCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, DispositionCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DispositionCategoryClient<$Result.GetResult<Prisma.$DispositionCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DispositionCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispositionCategoryFindFirstArgs} args - Arguments to find a DispositionCategory
     * @example
     * // Get one DispositionCategory
     * const dispositionCategory = await prisma.dispositionCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DispositionCategoryFindFirstArgs>(args?: SelectSubset<T, DispositionCategoryFindFirstArgs<ExtArgs>>): Prisma__DispositionCategoryClient<$Result.GetResult<Prisma.$DispositionCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DispositionCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispositionCategoryFindFirstOrThrowArgs} args - Arguments to find a DispositionCategory
     * @example
     * // Get one DispositionCategory
     * const dispositionCategory = await prisma.dispositionCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DispositionCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, DispositionCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__DispositionCategoryClient<$Result.GetResult<Prisma.$DispositionCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DispositionCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispositionCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DispositionCategories
     * const dispositionCategories = await prisma.dispositionCategory.findMany()
     * 
     * // Get first 10 DispositionCategories
     * const dispositionCategories = await prisma.dispositionCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dispositionCategoryWithIdOnly = await prisma.dispositionCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DispositionCategoryFindManyArgs>(args?: SelectSubset<T, DispositionCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DispositionCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DispositionCategory.
     * @param {DispositionCategoryCreateArgs} args - Arguments to create a DispositionCategory.
     * @example
     * // Create one DispositionCategory
     * const DispositionCategory = await prisma.dispositionCategory.create({
     *   data: {
     *     // ... data to create a DispositionCategory
     *   }
     * })
     * 
     */
    create<T extends DispositionCategoryCreateArgs>(args: SelectSubset<T, DispositionCategoryCreateArgs<ExtArgs>>): Prisma__DispositionCategoryClient<$Result.GetResult<Prisma.$DispositionCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DispositionCategories.
     * @param {DispositionCategoryCreateManyArgs} args - Arguments to create many DispositionCategories.
     * @example
     * // Create many DispositionCategories
     * const dispositionCategory = await prisma.dispositionCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DispositionCategoryCreateManyArgs>(args?: SelectSubset<T, DispositionCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DispositionCategories and returns the data saved in the database.
     * @param {DispositionCategoryCreateManyAndReturnArgs} args - Arguments to create many DispositionCategories.
     * @example
     * // Create many DispositionCategories
     * const dispositionCategory = await prisma.dispositionCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DispositionCategories and only return the `id`
     * const dispositionCategoryWithIdOnly = await prisma.dispositionCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DispositionCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, DispositionCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DispositionCategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DispositionCategory.
     * @param {DispositionCategoryDeleteArgs} args - Arguments to delete one DispositionCategory.
     * @example
     * // Delete one DispositionCategory
     * const DispositionCategory = await prisma.dispositionCategory.delete({
     *   where: {
     *     // ... filter to delete one DispositionCategory
     *   }
     * })
     * 
     */
    delete<T extends DispositionCategoryDeleteArgs>(args: SelectSubset<T, DispositionCategoryDeleteArgs<ExtArgs>>): Prisma__DispositionCategoryClient<$Result.GetResult<Prisma.$DispositionCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DispositionCategory.
     * @param {DispositionCategoryUpdateArgs} args - Arguments to update one DispositionCategory.
     * @example
     * // Update one DispositionCategory
     * const dispositionCategory = await prisma.dispositionCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DispositionCategoryUpdateArgs>(args: SelectSubset<T, DispositionCategoryUpdateArgs<ExtArgs>>): Prisma__DispositionCategoryClient<$Result.GetResult<Prisma.$DispositionCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DispositionCategories.
     * @param {DispositionCategoryDeleteManyArgs} args - Arguments to filter DispositionCategories to delete.
     * @example
     * // Delete a few DispositionCategories
     * const { count } = await prisma.dispositionCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DispositionCategoryDeleteManyArgs>(args?: SelectSubset<T, DispositionCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DispositionCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispositionCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DispositionCategories
     * const dispositionCategory = await prisma.dispositionCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DispositionCategoryUpdateManyArgs>(args: SelectSubset<T, DispositionCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DispositionCategory.
     * @param {DispositionCategoryUpsertArgs} args - Arguments to update or create a DispositionCategory.
     * @example
     * // Update or create a DispositionCategory
     * const dispositionCategory = await prisma.dispositionCategory.upsert({
     *   create: {
     *     // ... data to create a DispositionCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DispositionCategory we want to update
     *   }
     * })
     */
    upsert<T extends DispositionCategoryUpsertArgs>(args: SelectSubset<T, DispositionCategoryUpsertArgs<ExtArgs>>): Prisma__DispositionCategoryClient<$Result.GetResult<Prisma.$DispositionCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DispositionCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispositionCategoryCountArgs} args - Arguments to filter DispositionCategories to count.
     * @example
     * // Count the number of DispositionCategories
     * const count = await prisma.dispositionCategory.count({
     *   where: {
     *     // ... the filter for the DispositionCategories we want to count
     *   }
     * })
    **/
    count<T extends DispositionCategoryCountArgs>(
      args?: Subset<T, DispositionCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DispositionCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DispositionCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispositionCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DispositionCategoryAggregateArgs>(args: Subset<T, DispositionCategoryAggregateArgs>): Prisma.PrismaPromise<GetDispositionCategoryAggregateType<T>>

    /**
     * Group by DispositionCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispositionCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DispositionCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DispositionCategoryGroupByArgs['orderBy'] }
        : { orderBy?: DispositionCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DispositionCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDispositionCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DispositionCategory model
   */
  readonly fields: DispositionCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DispositionCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DispositionCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dispositions<T extends DispositionCategory$dispositionsArgs<ExtArgs> = {}>(args?: Subset<T, DispositionCategory$dispositionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DispositionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DispositionCategory model
   */ 
  interface DispositionCategoryFieldRefs {
    readonly id: FieldRef<"DispositionCategory", 'String'>
    readonly name: FieldRef<"DispositionCategory", 'String'>
    readonly description: FieldRef<"DispositionCategory", 'String'>
    readonly color: FieldRef<"DispositionCategory", 'String'>
    readonly icon: FieldRef<"DispositionCategory", 'String'>
    readonly sortOrder: FieldRef<"DispositionCategory", 'Int'>
    readonly isActive: FieldRef<"DispositionCategory", 'Boolean'>
    readonly createdAt: FieldRef<"DispositionCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"DispositionCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DispositionCategory findUnique
   */
  export type DispositionCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispositionCategory
     */
    select?: DispositionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which DispositionCategory to fetch.
     */
    where: DispositionCategoryWhereUniqueInput
  }

  /**
   * DispositionCategory findUniqueOrThrow
   */
  export type DispositionCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispositionCategory
     */
    select?: DispositionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which DispositionCategory to fetch.
     */
    where: DispositionCategoryWhereUniqueInput
  }

  /**
   * DispositionCategory findFirst
   */
  export type DispositionCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispositionCategory
     */
    select?: DispositionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which DispositionCategory to fetch.
     */
    where?: DispositionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DispositionCategories to fetch.
     */
    orderBy?: DispositionCategoryOrderByWithRelationInput | DispositionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DispositionCategories.
     */
    cursor?: DispositionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DispositionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DispositionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DispositionCategories.
     */
    distinct?: DispositionCategoryScalarFieldEnum | DispositionCategoryScalarFieldEnum[]
  }

  /**
   * DispositionCategory findFirstOrThrow
   */
  export type DispositionCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispositionCategory
     */
    select?: DispositionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which DispositionCategory to fetch.
     */
    where?: DispositionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DispositionCategories to fetch.
     */
    orderBy?: DispositionCategoryOrderByWithRelationInput | DispositionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DispositionCategories.
     */
    cursor?: DispositionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DispositionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DispositionCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DispositionCategories.
     */
    distinct?: DispositionCategoryScalarFieldEnum | DispositionCategoryScalarFieldEnum[]
  }

  /**
   * DispositionCategory findMany
   */
  export type DispositionCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispositionCategory
     */
    select?: DispositionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionCategoryInclude<ExtArgs> | null
    /**
     * Filter, which DispositionCategories to fetch.
     */
    where?: DispositionCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DispositionCategories to fetch.
     */
    orderBy?: DispositionCategoryOrderByWithRelationInput | DispositionCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DispositionCategories.
     */
    cursor?: DispositionCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DispositionCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DispositionCategories.
     */
    skip?: number
    distinct?: DispositionCategoryScalarFieldEnum | DispositionCategoryScalarFieldEnum[]
  }

  /**
   * DispositionCategory create
   */
  export type DispositionCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispositionCategory
     */
    select?: DispositionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a DispositionCategory.
     */
    data: XOR<DispositionCategoryCreateInput, DispositionCategoryUncheckedCreateInput>
  }

  /**
   * DispositionCategory createMany
   */
  export type DispositionCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DispositionCategories.
     */
    data: DispositionCategoryCreateManyInput | DispositionCategoryCreateManyInput[]
  }

  /**
   * DispositionCategory createManyAndReturn
   */
  export type DispositionCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispositionCategory
     */
    select?: DispositionCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DispositionCategories.
     */
    data: DispositionCategoryCreateManyInput | DispositionCategoryCreateManyInput[]
  }

  /**
   * DispositionCategory update
   */
  export type DispositionCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispositionCategory
     */
    select?: DispositionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a DispositionCategory.
     */
    data: XOR<DispositionCategoryUpdateInput, DispositionCategoryUncheckedUpdateInput>
    /**
     * Choose, which DispositionCategory to update.
     */
    where: DispositionCategoryWhereUniqueInput
  }

  /**
   * DispositionCategory updateMany
   */
  export type DispositionCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DispositionCategories.
     */
    data: XOR<DispositionCategoryUpdateManyMutationInput, DispositionCategoryUncheckedUpdateManyInput>
    /**
     * Filter which DispositionCategories to update
     */
    where?: DispositionCategoryWhereInput
  }

  /**
   * DispositionCategory upsert
   */
  export type DispositionCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispositionCategory
     */
    select?: DispositionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the DispositionCategory to update in case it exists.
     */
    where: DispositionCategoryWhereUniqueInput
    /**
     * In case the DispositionCategory found by the `where` argument doesn't exist, create a new DispositionCategory with this data.
     */
    create: XOR<DispositionCategoryCreateInput, DispositionCategoryUncheckedCreateInput>
    /**
     * In case the DispositionCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DispositionCategoryUpdateInput, DispositionCategoryUncheckedUpdateInput>
  }

  /**
   * DispositionCategory delete
   */
  export type DispositionCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispositionCategory
     */
    select?: DispositionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionCategoryInclude<ExtArgs> | null
    /**
     * Filter which DispositionCategory to delete.
     */
    where: DispositionCategoryWhereUniqueInput
  }

  /**
   * DispositionCategory deleteMany
   */
  export type DispositionCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DispositionCategories to delete
     */
    where?: DispositionCategoryWhereInput
  }

  /**
   * DispositionCategory.dispositions
   */
  export type DispositionCategory$dispositionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disposition
     */
    select?: DispositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionInclude<ExtArgs> | null
    where?: DispositionWhereInput
    orderBy?: DispositionOrderByWithRelationInput | DispositionOrderByWithRelationInput[]
    cursor?: DispositionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DispositionScalarFieldEnum | DispositionScalarFieldEnum[]
  }

  /**
   * DispositionCategory without action
   */
  export type DispositionCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DispositionCategory
     */
    select?: DispositionCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Disposition
   */

  export type AggregateDisposition = {
    _count: DispositionCountAggregateOutputType | null
    _avg: DispositionAvgAggregateOutputType | null
    _sum: DispositionSumAggregateOutputType | null
    _min: DispositionMinAggregateOutputType | null
    _max: DispositionMaxAggregateOutputType | null
  }

  export type DispositionAvgAggregateOutputType = {
    sortOrder: number | null
    usageCount: number | null
  }

  export type DispositionSumAggregateOutputType = {
    sortOrder: number | null
    usageCount: number | null
  }

  export type DispositionMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    categoryId: string | null
    requiresFollowUp: boolean | null
    requiresPayment: boolean | null
    requiresNotes: boolean | null
    isSuccessful: boolean | null
    sortOrder: number | null
    isActive: boolean | null
    usageCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DispositionMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    categoryId: string | null
    requiresFollowUp: boolean | null
    requiresPayment: boolean | null
    requiresNotes: boolean | null
    isSuccessful: boolean | null
    sortOrder: number | null
    isActive: boolean | null
    usageCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DispositionCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    categoryId: number
    requiresFollowUp: number
    requiresPayment: number
    requiresNotes: number
    isSuccessful: number
    sortOrder: number
    isActive: number
    usageCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DispositionAvgAggregateInputType = {
    sortOrder?: true
    usageCount?: true
  }

  export type DispositionSumAggregateInputType = {
    sortOrder?: true
    usageCount?: true
  }

  export type DispositionMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    categoryId?: true
    requiresFollowUp?: true
    requiresPayment?: true
    requiresNotes?: true
    isSuccessful?: true
    sortOrder?: true
    isActive?: true
    usageCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DispositionMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    categoryId?: true
    requiresFollowUp?: true
    requiresPayment?: true
    requiresNotes?: true
    isSuccessful?: true
    sortOrder?: true
    isActive?: true
    usageCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DispositionCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    categoryId?: true
    requiresFollowUp?: true
    requiresPayment?: true
    requiresNotes?: true
    isSuccessful?: true
    sortOrder?: true
    isActive?: true
    usageCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DispositionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Disposition to aggregate.
     */
    where?: DispositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dispositions to fetch.
     */
    orderBy?: DispositionOrderByWithRelationInput | DispositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DispositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dispositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dispositions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dispositions
    **/
    _count?: true | DispositionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DispositionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DispositionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DispositionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DispositionMaxAggregateInputType
  }

  export type GetDispositionAggregateType<T extends DispositionAggregateArgs> = {
        [P in keyof T & keyof AggregateDisposition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDisposition[P]>
      : GetScalarType<T[P], AggregateDisposition[P]>
  }




  export type DispositionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DispositionWhereInput
    orderBy?: DispositionOrderByWithAggregationInput | DispositionOrderByWithAggregationInput[]
    by: DispositionScalarFieldEnum[] | DispositionScalarFieldEnum
    having?: DispositionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DispositionCountAggregateInputType | true
    _avg?: DispositionAvgAggregateInputType
    _sum?: DispositionSumAggregateInputType
    _min?: DispositionMinAggregateInputType
    _max?: DispositionMaxAggregateInputType
  }

  export type DispositionGroupByOutputType = {
    id: string
    code: string
    name: string
    description: string | null
    categoryId: string
    requiresFollowUp: boolean
    requiresPayment: boolean
    requiresNotes: boolean
    isSuccessful: boolean
    sortOrder: number
    isActive: boolean
    usageCount: number
    createdAt: Date
    updatedAt: Date
    _count: DispositionCountAggregateOutputType | null
    _avg: DispositionAvgAggregateOutputType | null
    _sum: DispositionSumAggregateOutputType | null
    _min: DispositionMinAggregateOutputType | null
    _max: DispositionMaxAggregateOutputType | null
  }

  type GetDispositionGroupByPayload<T extends DispositionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DispositionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DispositionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DispositionGroupByOutputType[P]>
            : GetScalarType<T[P], DispositionGroupByOutputType[P]>
        }
      >
    >


  export type DispositionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    categoryId?: boolean
    requiresFollowUp?: boolean
    requiresPayment?: boolean
    requiresNotes?: boolean
    isSuccessful?: boolean
    sortOrder?: boolean
    isActive?: boolean
    usageCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | DispositionCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["disposition"]>

  export type DispositionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    categoryId?: boolean
    requiresFollowUp?: boolean
    requiresPayment?: boolean
    requiresNotes?: boolean
    isSuccessful?: boolean
    sortOrder?: boolean
    isActive?: boolean
    usageCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | DispositionCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["disposition"]>

  export type DispositionSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    categoryId?: boolean
    requiresFollowUp?: boolean
    requiresPayment?: boolean
    requiresNotes?: boolean
    isSuccessful?: boolean
    sortOrder?: boolean
    isActive?: boolean
    usageCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DispositionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | DispositionCategoryDefaultArgs<ExtArgs>
  }
  export type DispositionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | DispositionCategoryDefaultArgs<ExtArgs>
  }

  export type $DispositionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Disposition"
    objects: {
      category: Prisma.$DispositionCategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      description: string | null
      categoryId: string
      requiresFollowUp: boolean
      requiresPayment: boolean
      requiresNotes: boolean
      isSuccessful: boolean
      sortOrder: number
      isActive: boolean
      usageCount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["disposition"]>
    composites: {}
  }

  type DispositionGetPayload<S extends boolean | null | undefined | DispositionDefaultArgs> = $Result.GetResult<Prisma.$DispositionPayload, S>

  type DispositionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DispositionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DispositionCountAggregateInputType | true
    }

  export interface DispositionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Disposition'], meta: { name: 'Disposition' } }
    /**
     * Find zero or one Disposition that matches the filter.
     * @param {DispositionFindUniqueArgs} args - Arguments to find a Disposition
     * @example
     * // Get one Disposition
     * const disposition = await prisma.disposition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DispositionFindUniqueArgs>(args: SelectSubset<T, DispositionFindUniqueArgs<ExtArgs>>): Prisma__DispositionClient<$Result.GetResult<Prisma.$DispositionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Disposition that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DispositionFindUniqueOrThrowArgs} args - Arguments to find a Disposition
     * @example
     * // Get one Disposition
     * const disposition = await prisma.disposition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DispositionFindUniqueOrThrowArgs>(args: SelectSubset<T, DispositionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DispositionClient<$Result.GetResult<Prisma.$DispositionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Disposition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispositionFindFirstArgs} args - Arguments to find a Disposition
     * @example
     * // Get one Disposition
     * const disposition = await prisma.disposition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DispositionFindFirstArgs>(args?: SelectSubset<T, DispositionFindFirstArgs<ExtArgs>>): Prisma__DispositionClient<$Result.GetResult<Prisma.$DispositionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Disposition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispositionFindFirstOrThrowArgs} args - Arguments to find a Disposition
     * @example
     * // Get one Disposition
     * const disposition = await prisma.disposition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DispositionFindFirstOrThrowArgs>(args?: SelectSubset<T, DispositionFindFirstOrThrowArgs<ExtArgs>>): Prisma__DispositionClient<$Result.GetResult<Prisma.$DispositionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Dispositions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispositionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dispositions
     * const dispositions = await prisma.disposition.findMany()
     * 
     * // Get first 10 Dispositions
     * const dispositions = await prisma.disposition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dispositionWithIdOnly = await prisma.disposition.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DispositionFindManyArgs>(args?: SelectSubset<T, DispositionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DispositionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Disposition.
     * @param {DispositionCreateArgs} args - Arguments to create a Disposition.
     * @example
     * // Create one Disposition
     * const Disposition = await prisma.disposition.create({
     *   data: {
     *     // ... data to create a Disposition
     *   }
     * })
     * 
     */
    create<T extends DispositionCreateArgs>(args: SelectSubset<T, DispositionCreateArgs<ExtArgs>>): Prisma__DispositionClient<$Result.GetResult<Prisma.$DispositionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Dispositions.
     * @param {DispositionCreateManyArgs} args - Arguments to create many Dispositions.
     * @example
     * // Create many Dispositions
     * const disposition = await prisma.disposition.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DispositionCreateManyArgs>(args?: SelectSubset<T, DispositionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Dispositions and returns the data saved in the database.
     * @param {DispositionCreateManyAndReturnArgs} args - Arguments to create many Dispositions.
     * @example
     * // Create many Dispositions
     * const disposition = await prisma.disposition.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Dispositions and only return the `id`
     * const dispositionWithIdOnly = await prisma.disposition.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DispositionCreateManyAndReturnArgs>(args?: SelectSubset<T, DispositionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DispositionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Disposition.
     * @param {DispositionDeleteArgs} args - Arguments to delete one Disposition.
     * @example
     * // Delete one Disposition
     * const Disposition = await prisma.disposition.delete({
     *   where: {
     *     // ... filter to delete one Disposition
     *   }
     * })
     * 
     */
    delete<T extends DispositionDeleteArgs>(args: SelectSubset<T, DispositionDeleteArgs<ExtArgs>>): Prisma__DispositionClient<$Result.GetResult<Prisma.$DispositionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Disposition.
     * @param {DispositionUpdateArgs} args - Arguments to update one Disposition.
     * @example
     * // Update one Disposition
     * const disposition = await prisma.disposition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DispositionUpdateArgs>(args: SelectSubset<T, DispositionUpdateArgs<ExtArgs>>): Prisma__DispositionClient<$Result.GetResult<Prisma.$DispositionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Dispositions.
     * @param {DispositionDeleteManyArgs} args - Arguments to filter Dispositions to delete.
     * @example
     * // Delete a few Dispositions
     * const { count } = await prisma.disposition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DispositionDeleteManyArgs>(args?: SelectSubset<T, DispositionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dispositions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispositionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dispositions
     * const disposition = await prisma.disposition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DispositionUpdateManyArgs>(args: SelectSubset<T, DispositionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Disposition.
     * @param {DispositionUpsertArgs} args - Arguments to update or create a Disposition.
     * @example
     * // Update or create a Disposition
     * const disposition = await prisma.disposition.upsert({
     *   create: {
     *     // ... data to create a Disposition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Disposition we want to update
     *   }
     * })
     */
    upsert<T extends DispositionUpsertArgs>(args: SelectSubset<T, DispositionUpsertArgs<ExtArgs>>): Prisma__DispositionClient<$Result.GetResult<Prisma.$DispositionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Dispositions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispositionCountArgs} args - Arguments to filter Dispositions to count.
     * @example
     * // Count the number of Dispositions
     * const count = await prisma.disposition.count({
     *   where: {
     *     // ... the filter for the Dispositions we want to count
     *   }
     * })
    **/
    count<T extends DispositionCountArgs>(
      args?: Subset<T, DispositionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DispositionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Disposition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispositionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DispositionAggregateArgs>(args: Subset<T, DispositionAggregateArgs>): Prisma.PrismaPromise<GetDispositionAggregateType<T>>

    /**
     * Group by Disposition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DispositionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DispositionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DispositionGroupByArgs['orderBy'] }
        : { orderBy?: DispositionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DispositionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDispositionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Disposition model
   */
  readonly fields: DispositionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Disposition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DispositionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends DispositionCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DispositionCategoryDefaultArgs<ExtArgs>>): Prisma__DispositionCategoryClient<$Result.GetResult<Prisma.$DispositionCategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Disposition model
   */ 
  interface DispositionFieldRefs {
    readonly id: FieldRef<"Disposition", 'String'>
    readonly code: FieldRef<"Disposition", 'String'>
    readonly name: FieldRef<"Disposition", 'String'>
    readonly description: FieldRef<"Disposition", 'String'>
    readonly categoryId: FieldRef<"Disposition", 'String'>
    readonly requiresFollowUp: FieldRef<"Disposition", 'Boolean'>
    readonly requiresPayment: FieldRef<"Disposition", 'Boolean'>
    readonly requiresNotes: FieldRef<"Disposition", 'Boolean'>
    readonly isSuccessful: FieldRef<"Disposition", 'Boolean'>
    readonly sortOrder: FieldRef<"Disposition", 'Int'>
    readonly isActive: FieldRef<"Disposition", 'Boolean'>
    readonly usageCount: FieldRef<"Disposition", 'Int'>
    readonly createdAt: FieldRef<"Disposition", 'DateTime'>
    readonly updatedAt: FieldRef<"Disposition", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Disposition findUnique
   */
  export type DispositionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disposition
     */
    select?: DispositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionInclude<ExtArgs> | null
    /**
     * Filter, which Disposition to fetch.
     */
    where: DispositionWhereUniqueInput
  }

  /**
   * Disposition findUniqueOrThrow
   */
  export type DispositionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disposition
     */
    select?: DispositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionInclude<ExtArgs> | null
    /**
     * Filter, which Disposition to fetch.
     */
    where: DispositionWhereUniqueInput
  }

  /**
   * Disposition findFirst
   */
  export type DispositionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disposition
     */
    select?: DispositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionInclude<ExtArgs> | null
    /**
     * Filter, which Disposition to fetch.
     */
    where?: DispositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dispositions to fetch.
     */
    orderBy?: DispositionOrderByWithRelationInput | DispositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dispositions.
     */
    cursor?: DispositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dispositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dispositions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dispositions.
     */
    distinct?: DispositionScalarFieldEnum | DispositionScalarFieldEnum[]
  }

  /**
   * Disposition findFirstOrThrow
   */
  export type DispositionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disposition
     */
    select?: DispositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionInclude<ExtArgs> | null
    /**
     * Filter, which Disposition to fetch.
     */
    where?: DispositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dispositions to fetch.
     */
    orderBy?: DispositionOrderByWithRelationInput | DispositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dispositions.
     */
    cursor?: DispositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dispositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dispositions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dispositions.
     */
    distinct?: DispositionScalarFieldEnum | DispositionScalarFieldEnum[]
  }

  /**
   * Disposition findMany
   */
  export type DispositionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disposition
     */
    select?: DispositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionInclude<ExtArgs> | null
    /**
     * Filter, which Dispositions to fetch.
     */
    where?: DispositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dispositions to fetch.
     */
    orderBy?: DispositionOrderByWithRelationInput | DispositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dispositions.
     */
    cursor?: DispositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dispositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dispositions.
     */
    skip?: number
    distinct?: DispositionScalarFieldEnum | DispositionScalarFieldEnum[]
  }

  /**
   * Disposition create
   */
  export type DispositionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disposition
     */
    select?: DispositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionInclude<ExtArgs> | null
    /**
     * The data needed to create a Disposition.
     */
    data: XOR<DispositionCreateInput, DispositionUncheckedCreateInput>
  }

  /**
   * Disposition createMany
   */
  export type DispositionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dispositions.
     */
    data: DispositionCreateManyInput | DispositionCreateManyInput[]
  }

  /**
   * Disposition createManyAndReturn
   */
  export type DispositionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disposition
     */
    select?: DispositionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Dispositions.
     */
    data: DispositionCreateManyInput | DispositionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Disposition update
   */
  export type DispositionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disposition
     */
    select?: DispositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionInclude<ExtArgs> | null
    /**
     * The data needed to update a Disposition.
     */
    data: XOR<DispositionUpdateInput, DispositionUncheckedUpdateInput>
    /**
     * Choose, which Disposition to update.
     */
    where: DispositionWhereUniqueInput
  }

  /**
   * Disposition updateMany
   */
  export type DispositionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dispositions.
     */
    data: XOR<DispositionUpdateManyMutationInput, DispositionUncheckedUpdateManyInput>
    /**
     * Filter which Dispositions to update
     */
    where?: DispositionWhereInput
  }

  /**
   * Disposition upsert
   */
  export type DispositionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disposition
     */
    select?: DispositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionInclude<ExtArgs> | null
    /**
     * The filter to search for the Disposition to update in case it exists.
     */
    where: DispositionWhereUniqueInput
    /**
     * In case the Disposition found by the `where` argument doesn't exist, create a new Disposition with this data.
     */
    create: XOR<DispositionCreateInput, DispositionUncheckedCreateInput>
    /**
     * In case the Disposition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DispositionUpdateInput, DispositionUncheckedUpdateInput>
  }

  /**
   * Disposition delete
   */
  export type DispositionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disposition
     */
    select?: DispositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionInclude<ExtArgs> | null
    /**
     * Filter which Disposition to delete.
     */
    where: DispositionWhereUniqueInput
  }

  /**
   * Disposition deleteMany
   */
  export type DispositionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dispositions to delete
     */
    where?: DispositionWhereInput
  }

  /**
   * Disposition without action
   */
  export type DispositionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disposition
     */
    select?: DispositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DispositionInclude<ExtArgs> | null
  }


  /**
   * Model UserMFA
   */

  export type AggregateUserMFA = {
    _count: UserMFACountAggregateOutputType | null
    _min: UserMFAMinAggregateOutputType | null
    _max: UserMFAMaxAggregateOutputType | null
  }

  export type UserMFAMinAggregateOutputType = {
    id: string | null
    userId: string | null
    secret: string | null
    backupCodes: string | null
    isEnabled: boolean | null
    lastUsedAt: Date | null
    setupAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMFAMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    secret: string | null
    backupCodes: string | null
    isEnabled: boolean | null
    lastUsedAt: Date | null
    setupAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMFACountAggregateOutputType = {
    id: number
    userId: number
    secret: number
    backupCodes: number
    isEnabled: number
    lastUsedAt: number
    setupAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMFAMinAggregateInputType = {
    id?: true
    userId?: true
    secret?: true
    backupCodes?: true
    isEnabled?: true
    lastUsedAt?: true
    setupAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMFAMaxAggregateInputType = {
    id?: true
    userId?: true
    secret?: true
    backupCodes?: true
    isEnabled?: true
    lastUsedAt?: true
    setupAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMFACountAggregateInputType = {
    id?: true
    userId?: true
    secret?: true
    backupCodes?: true
    isEnabled?: true
    lastUsedAt?: true
    setupAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserMFAAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMFA to aggregate.
     */
    where?: UserMFAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMFAS to fetch.
     */
    orderBy?: UserMFAOrderByWithRelationInput | UserMFAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserMFAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMFAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMFAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserMFAS
    **/
    _count?: true | UserMFACountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMFAMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMFAMaxAggregateInputType
  }

  export type GetUserMFAAggregateType<T extends UserMFAAggregateArgs> = {
        [P in keyof T & keyof AggregateUserMFA]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserMFA[P]>
      : GetScalarType<T[P], AggregateUserMFA[P]>
  }




  export type UserMFAGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMFAWhereInput
    orderBy?: UserMFAOrderByWithAggregationInput | UserMFAOrderByWithAggregationInput[]
    by: UserMFAScalarFieldEnum[] | UserMFAScalarFieldEnum
    having?: UserMFAScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserMFACountAggregateInputType | true
    _min?: UserMFAMinAggregateInputType
    _max?: UserMFAMaxAggregateInputType
  }

  export type UserMFAGroupByOutputType = {
    id: string
    userId: string
    secret: string
    backupCodes: string | null
    isEnabled: boolean
    lastUsedAt: Date | null
    setupAt: Date
    createdAt: Date
    updatedAt: Date
    _count: UserMFACountAggregateOutputType | null
    _min: UserMFAMinAggregateOutputType | null
    _max: UserMFAMaxAggregateOutputType | null
  }

  type GetUserMFAGroupByPayload<T extends UserMFAGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserMFAGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserMFAGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserMFAGroupByOutputType[P]>
            : GetScalarType<T[P], UserMFAGroupByOutputType[P]>
        }
      >
    >


  export type UserMFASelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    secret?: boolean
    backupCodes?: boolean
    isEnabled?: boolean
    lastUsedAt?: boolean
    setupAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMFA"]>

  export type UserMFASelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    secret?: boolean
    backupCodes?: boolean
    isEnabled?: boolean
    lastUsedAt?: boolean
    setupAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMFA"]>

  export type UserMFASelectScalar = {
    id?: boolean
    userId?: boolean
    secret?: boolean
    backupCodes?: boolean
    isEnabled?: boolean
    lastUsedAt?: boolean
    setupAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserMFAInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserMFAIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserMFAPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserMFA"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      secret: string
      backupCodes: string | null
      isEnabled: boolean
      lastUsedAt: Date | null
      setupAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userMFA"]>
    composites: {}
  }

  type UserMFAGetPayload<S extends boolean | null | undefined | UserMFADefaultArgs> = $Result.GetResult<Prisma.$UserMFAPayload, S>

  type UserMFACountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserMFAFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserMFACountAggregateInputType | true
    }

  export interface UserMFADelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserMFA'], meta: { name: 'UserMFA' } }
    /**
     * Find zero or one UserMFA that matches the filter.
     * @param {UserMFAFindUniqueArgs} args - Arguments to find a UserMFA
     * @example
     * // Get one UserMFA
     * const userMFA = await prisma.userMFA.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserMFAFindUniqueArgs>(args: SelectSubset<T, UserMFAFindUniqueArgs<ExtArgs>>): Prisma__UserMFAClient<$Result.GetResult<Prisma.$UserMFAPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserMFA that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserMFAFindUniqueOrThrowArgs} args - Arguments to find a UserMFA
     * @example
     * // Get one UserMFA
     * const userMFA = await prisma.userMFA.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserMFAFindUniqueOrThrowArgs>(args: SelectSubset<T, UserMFAFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserMFAClient<$Result.GetResult<Prisma.$UserMFAPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserMFA that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMFAFindFirstArgs} args - Arguments to find a UserMFA
     * @example
     * // Get one UserMFA
     * const userMFA = await prisma.userMFA.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserMFAFindFirstArgs>(args?: SelectSubset<T, UserMFAFindFirstArgs<ExtArgs>>): Prisma__UserMFAClient<$Result.GetResult<Prisma.$UserMFAPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserMFA that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMFAFindFirstOrThrowArgs} args - Arguments to find a UserMFA
     * @example
     * // Get one UserMFA
     * const userMFA = await prisma.userMFA.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserMFAFindFirstOrThrowArgs>(args?: SelectSubset<T, UserMFAFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserMFAClient<$Result.GetResult<Prisma.$UserMFAPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserMFAS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMFAFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserMFAS
     * const userMFAS = await prisma.userMFA.findMany()
     * 
     * // Get first 10 UserMFAS
     * const userMFAS = await prisma.userMFA.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userMFAWithIdOnly = await prisma.userMFA.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserMFAFindManyArgs>(args?: SelectSubset<T, UserMFAFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMFAPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserMFA.
     * @param {UserMFACreateArgs} args - Arguments to create a UserMFA.
     * @example
     * // Create one UserMFA
     * const UserMFA = await prisma.userMFA.create({
     *   data: {
     *     // ... data to create a UserMFA
     *   }
     * })
     * 
     */
    create<T extends UserMFACreateArgs>(args: SelectSubset<T, UserMFACreateArgs<ExtArgs>>): Prisma__UserMFAClient<$Result.GetResult<Prisma.$UserMFAPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserMFAS.
     * @param {UserMFACreateManyArgs} args - Arguments to create many UserMFAS.
     * @example
     * // Create many UserMFAS
     * const userMFA = await prisma.userMFA.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserMFACreateManyArgs>(args?: SelectSubset<T, UserMFACreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserMFAS and returns the data saved in the database.
     * @param {UserMFACreateManyAndReturnArgs} args - Arguments to create many UserMFAS.
     * @example
     * // Create many UserMFAS
     * const userMFA = await prisma.userMFA.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserMFAS and only return the `id`
     * const userMFAWithIdOnly = await prisma.userMFA.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserMFACreateManyAndReturnArgs>(args?: SelectSubset<T, UserMFACreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMFAPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserMFA.
     * @param {UserMFADeleteArgs} args - Arguments to delete one UserMFA.
     * @example
     * // Delete one UserMFA
     * const UserMFA = await prisma.userMFA.delete({
     *   where: {
     *     // ... filter to delete one UserMFA
     *   }
     * })
     * 
     */
    delete<T extends UserMFADeleteArgs>(args: SelectSubset<T, UserMFADeleteArgs<ExtArgs>>): Prisma__UserMFAClient<$Result.GetResult<Prisma.$UserMFAPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserMFA.
     * @param {UserMFAUpdateArgs} args - Arguments to update one UserMFA.
     * @example
     * // Update one UserMFA
     * const userMFA = await prisma.userMFA.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserMFAUpdateArgs>(args: SelectSubset<T, UserMFAUpdateArgs<ExtArgs>>): Prisma__UserMFAClient<$Result.GetResult<Prisma.$UserMFAPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserMFAS.
     * @param {UserMFADeleteManyArgs} args - Arguments to filter UserMFAS to delete.
     * @example
     * // Delete a few UserMFAS
     * const { count } = await prisma.userMFA.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserMFADeleteManyArgs>(args?: SelectSubset<T, UserMFADeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserMFAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMFAUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserMFAS
     * const userMFA = await prisma.userMFA.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserMFAUpdateManyArgs>(args: SelectSubset<T, UserMFAUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserMFA.
     * @param {UserMFAUpsertArgs} args - Arguments to update or create a UserMFA.
     * @example
     * // Update or create a UserMFA
     * const userMFA = await prisma.userMFA.upsert({
     *   create: {
     *     // ... data to create a UserMFA
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserMFA we want to update
     *   }
     * })
     */
    upsert<T extends UserMFAUpsertArgs>(args: SelectSubset<T, UserMFAUpsertArgs<ExtArgs>>): Prisma__UserMFAClient<$Result.GetResult<Prisma.$UserMFAPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserMFAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMFACountArgs} args - Arguments to filter UserMFAS to count.
     * @example
     * // Count the number of UserMFAS
     * const count = await prisma.userMFA.count({
     *   where: {
     *     // ... the filter for the UserMFAS we want to count
     *   }
     * })
    **/
    count<T extends UserMFACountArgs>(
      args?: Subset<T, UserMFACountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserMFACountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserMFA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMFAAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserMFAAggregateArgs>(args: Subset<T, UserMFAAggregateArgs>): Prisma.PrismaPromise<GetUserMFAAggregateType<T>>

    /**
     * Group by UserMFA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMFAGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserMFAGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserMFAGroupByArgs['orderBy'] }
        : { orderBy?: UserMFAGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserMFAGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserMFAGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserMFA model
   */
  readonly fields: UserMFAFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserMFA.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserMFAClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserMFA model
   */ 
  interface UserMFAFieldRefs {
    readonly id: FieldRef<"UserMFA", 'String'>
    readonly userId: FieldRef<"UserMFA", 'String'>
    readonly secret: FieldRef<"UserMFA", 'String'>
    readonly backupCodes: FieldRef<"UserMFA", 'String'>
    readonly isEnabled: FieldRef<"UserMFA", 'Boolean'>
    readonly lastUsedAt: FieldRef<"UserMFA", 'DateTime'>
    readonly setupAt: FieldRef<"UserMFA", 'DateTime'>
    readonly createdAt: FieldRef<"UserMFA", 'DateTime'>
    readonly updatedAt: FieldRef<"UserMFA", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserMFA findUnique
   */
  export type UserMFAFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMFA
     */
    select?: UserMFASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMFAInclude<ExtArgs> | null
    /**
     * Filter, which UserMFA to fetch.
     */
    where: UserMFAWhereUniqueInput
  }

  /**
   * UserMFA findUniqueOrThrow
   */
  export type UserMFAFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMFA
     */
    select?: UserMFASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMFAInclude<ExtArgs> | null
    /**
     * Filter, which UserMFA to fetch.
     */
    where: UserMFAWhereUniqueInput
  }

  /**
   * UserMFA findFirst
   */
  export type UserMFAFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMFA
     */
    select?: UserMFASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMFAInclude<ExtArgs> | null
    /**
     * Filter, which UserMFA to fetch.
     */
    where?: UserMFAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMFAS to fetch.
     */
    orderBy?: UserMFAOrderByWithRelationInput | UserMFAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMFAS.
     */
    cursor?: UserMFAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMFAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMFAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMFAS.
     */
    distinct?: UserMFAScalarFieldEnum | UserMFAScalarFieldEnum[]
  }

  /**
   * UserMFA findFirstOrThrow
   */
  export type UserMFAFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMFA
     */
    select?: UserMFASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMFAInclude<ExtArgs> | null
    /**
     * Filter, which UserMFA to fetch.
     */
    where?: UserMFAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMFAS to fetch.
     */
    orderBy?: UserMFAOrderByWithRelationInput | UserMFAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMFAS.
     */
    cursor?: UserMFAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMFAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMFAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMFAS.
     */
    distinct?: UserMFAScalarFieldEnum | UserMFAScalarFieldEnum[]
  }

  /**
   * UserMFA findMany
   */
  export type UserMFAFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMFA
     */
    select?: UserMFASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMFAInclude<ExtArgs> | null
    /**
     * Filter, which UserMFAS to fetch.
     */
    where?: UserMFAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMFAS to fetch.
     */
    orderBy?: UserMFAOrderByWithRelationInput | UserMFAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserMFAS.
     */
    cursor?: UserMFAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMFAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMFAS.
     */
    skip?: number
    distinct?: UserMFAScalarFieldEnum | UserMFAScalarFieldEnum[]
  }

  /**
   * UserMFA create
   */
  export type UserMFACreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMFA
     */
    select?: UserMFASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMFAInclude<ExtArgs> | null
    /**
     * The data needed to create a UserMFA.
     */
    data: XOR<UserMFACreateInput, UserMFAUncheckedCreateInput>
  }

  /**
   * UserMFA createMany
   */
  export type UserMFACreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserMFAS.
     */
    data: UserMFACreateManyInput | UserMFACreateManyInput[]
  }

  /**
   * UserMFA createManyAndReturn
   */
  export type UserMFACreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMFA
     */
    select?: UserMFASelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserMFAS.
     */
    data: UserMFACreateManyInput | UserMFACreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMFAIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserMFA update
   */
  export type UserMFAUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMFA
     */
    select?: UserMFASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMFAInclude<ExtArgs> | null
    /**
     * The data needed to update a UserMFA.
     */
    data: XOR<UserMFAUpdateInput, UserMFAUncheckedUpdateInput>
    /**
     * Choose, which UserMFA to update.
     */
    where: UserMFAWhereUniqueInput
  }

  /**
   * UserMFA updateMany
   */
  export type UserMFAUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserMFAS.
     */
    data: XOR<UserMFAUpdateManyMutationInput, UserMFAUncheckedUpdateManyInput>
    /**
     * Filter which UserMFAS to update
     */
    where?: UserMFAWhereInput
  }

  /**
   * UserMFA upsert
   */
  export type UserMFAUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMFA
     */
    select?: UserMFASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMFAInclude<ExtArgs> | null
    /**
     * The filter to search for the UserMFA to update in case it exists.
     */
    where: UserMFAWhereUniqueInput
    /**
     * In case the UserMFA found by the `where` argument doesn't exist, create a new UserMFA with this data.
     */
    create: XOR<UserMFACreateInput, UserMFAUncheckedCreateInput>
    /**
     * In case the UserMFA was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserMFAUpdateInput, UserMFAUncheckedUpdateInput>
  }

  /**
   * UserMFA delete
   */
  export type UserMFADeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMFA
     */
    select?: UserMFASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMFAInclude<ExtArgs> | null
    /**
     * Filter which UserMFA to delete.
     */
    where: UserMFAWhereUniqueInput
  }

  /**
   * UserMFA deleteMany
   */
  export type UserMFADeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMFAS to delete
     */
    where?: UserMFAWhereInput
  }

  /**
   * UserMFA without action
   */
  export type UserMFADefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMFA
     */
    select?: UserMFASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMFAInclude<ExtArgs> | null
  }


  /**
   * Model UserSession
   */

  export type AggregateUserSession = {
    _count: UserSessionCountAggregateOutputType | null
    _avg: UserSessionAvgAggregateOutputType | null
    _sum: UserSessionSumAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  export type UserSessionAvgAggregateOutputType = {
    riskScore: number | null
  }

  export type UserSessionSumAggregateOutputType = {
    riskScore: number | null
  }

  export type UserSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionToken: string | null
    deviceFingerprint: string | null
    ipAddress: string | null
    userAgent: string | null
    location: string | null
    riskScore: number | null
    isActive: boolean | null
    lastActivityAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
    loginMethod: string | null
    deviceType: string | null
    browserInfo: string | null
  }

  export type UserSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionToken: string | null
    deviceFingerprint: string | null
    ipAddress: string | null
    userAgent: string | null
    location: string | null
    riskScore: number | null
    isActive: boolean | null
    lastActivityAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
    loginMethod: string | null
    deviceType: string | null
    browserInfo: string | null
  }

  export type UserSessionCountAggregateOutputType = {
    id: number
    userId: number
    sessionToken: number
    deviceFingerprint: number
    ipAddress: number
    userAgent: number
    location: number
    riskScore: number
    isActive: number
    lastActivityAt: number
    expiresAt: number
    createdAt: number
    loginMethod: number
    deviceType: number
    browserInfo: number
    _all: number
  }


  export type UserSessionAvgAggregateInputType = {
    riskScore?: true
  }

  export type UserSessionSumAggregateInputType = {
    riskScore?: true
  }

  export type UserSessionMinAggregateInputType = {
    id?: true
    userId?: true
    sessionToken?: true
    deviceFingerprint?: true
    ipAddress?: true
    userAgent?: true
    location?: true
    riskScore?: true
    isActive?: true
    lastActivityAt?: true
    expiresAt?: true
    createdAt?: true
    loginMethod?: true
    deviceType?: true
    browserInfo?: true
  }

  export type UserSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    sessionToken?: true
    deviceFingerprint?: true
    ipAddress?: true
    userAgent?: true
    location?: true
    riskScore?: true
    isActive?: true
    lastActivityAt?: true
    expiresAt?: true
    createdAt?: true
    loginMethod?: true
    deviceType?: true
    browserInfo?: true
  }

  export type UserSessionCountAggregateInputType = {
    id?: true
    userId?: true
    sessionToken?: true
    deviceFingerprint?: true
    ipAddress?: true
    userAgent?: true
    location?: true
    riskScore?: true
    isActive?: true
    lastActivityAt?: true
    expiresAt?: true
    createdAt?: true
    loginMethod?: true
    deviceType?: true
    browserInfo?: true
    _all?: true
  }

  export type UserSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSession to aggregate.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSessions
    **/
    _count?: true | UserSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSessionMaxAggregateInputType
  }

  export type GetUserSessionAggregateType<T extends UserSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSession[P]>
      : GetScalarType<T[P], AggregateUserSession[P]>
  }




  export type UserSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithAggregationInput | UserSessionOrderByWithAggregationInput[]
    by: UserSessionScalarFieldEnum[] | UserSessionScalarFieldEnum
    having?: UserSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSessionCountAggregateInputType | true
    _avg?: UserSessionAvgAggregateInputType
    _sum?: UserSessionSumAggregateInputType
    _min?: UserSessionMinAggregateInputType
    _max?: UserSessionMaxAggregateInputType
  }

  export type UserSessionGroupByOutputType = {
    id: string
    userId: string
    sessionToken: string
    deviceFingerprint: string
    ipAddress: string
    userAgent: string
    location: string | null
    riskScore: number
    isActive: boolean
    lastActivityAt: Date
    expiresAt: Date
    createdAt: Date
    loginMethod: string | null
    deviceType: string | null
    browserInfo: string | null
    _count: UserSessionCountAggregateOutputType | null
    _avg: UserSessionAvgAggregateOutputType | null
    _sum: UserSessionSumAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  type GetUserSessionGroupByPayload<T extends UserSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
            : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
        }
      >
    >


  export type UserSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionToken?: boolean
    deviceFingerprint?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    location?: boolean
    riskScore?: boolean
    isActive?: boolean
    lastActivityAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    loginMethod?: boolean
    deviceType?: boolean
    browserInfo?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionToken?: boolean
    deviceFingerprint?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    location?: boolean
    riskScore?: boolean
    isActive?: boolean
    lastActivityAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    loginMethod?: boolean
    deviceType?: boolean
    browserInfo?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    sessionToken?: boolean
    deviceFingerprint?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    location?: boolean
    riskScore?: boolean
    isActive?: boolean
    lastActivityAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    loginMethod?: boolean
    deviceType?: boolean
    browserInfo?: boolean
  }

  export type UserSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      sessionToken: string
      deviceFingerprint: string
      ipAddress: string
      userAgent: string
      location: string | null
      riskScore: number
      isActive: boolean
      lastActivityAt: Date
      expiresAt: Date
      createdAt: Date
      loginMethod: string | null
      deviceType: string | null
      browserInfo: string | null
    }, ExtArgs["result"]["userSession"]>
    composites: {}
  }

  type UserSessionGetPayload<S extends boolean | null | undefined | UserSessionDefaultArgs> = $Result.GetResult<Prisma.$UserSessionPayload, S>

  type UserSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserSessionCountAggregateInputType | true
    }

  export interface UserSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSession'], meta: { name: 'UserSession' } }
    /**
     * Find zero or one UserSession that matches the filter.
     * @param {UserSessionFindUniqueArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSessionFindUniqueArgs>(args: SelectSubset<T, UserSessionFindUniqueArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserSessionFindUniqueOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSessionFindFirstArgs>(args?: SelectSubset<T, UserSessionFindFirstArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSessions
     * const userSessions = await prisma.userSession.findMany()
     * 
     * // Get first 10 UserSessions
     * const userSessions = await prisma.userSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSessionWithIdOnly = await prisma.userSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSessionFindManyArgs>(args?: SelectSubset<T, UserSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserSession.
     * @param {UserSessionCreateArgs} args - Arguments to create a UserSession.
     * @example
     * // Create one UserSession
     * const UserSession = await prisma.userSession.create({
     *   data: {
     *     // ... data to create a UserSession
     *   }
     * })
     * 
     */
    create<T extends UserSessionCreateArgs>(args: SelectSubset<T, UserSessionCreateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserSessions.
     * @param {UserSessionCreateManyArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSessionCreateManyArgs>(args?: SelectSubset<T, UserSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSessions and returns the data saved in the database.
     * @param {UserSessionCreateManyAndReturnArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserSession.
     * @param {UserSessionDeleteArgs} args - Arguments to delete one UserSession.
     * @example
     * // Delete one UserSession
     * const UserSession = await prisma.userSession.delete({
     *   where: {
     *     // ... filter to delete one UserSession
     *   }
     * })
     * 
     */
    delete<T extends UserSessionDeleteArgs>(args: SelectSubset<T, UserSessionDeleteArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserSession.
     * @param {UserSessionUpdateArgs} args - Arguments to update one UserSession.
     * @example
     * // Update one UserSession
     * const userSession = await prisma.userSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSessionUpdateArgs>(args: SelectSubset<T, UserSessionUpdateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserSessions.
     * @param {UserSessionDeleteManyArgs} args - Arguments to filter UserSessions to delete.
     * @example
     * // Delete a few UserSessions
     * const { count } = await prisma.userSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSessionDeleteManyArgs>(args?: SelectSubset<T, UserSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSessionUpdateManyArgs>(args: SelectSubset<T, UserSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserSession.
     * @param {UserSessionUpsertArgs} args - Arguments to update or create a UserSession.
     * @example
     * // Update or create a UserSession
     * const userSession = await prisma.userSession.upsert({
     *   create: {
     *     // ... data to create a UserSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSession we want to update
     *   }
     * })
     */
    upsert<T extends UserSessionUpsertArgs>(args: SelectSubset<T, UserSessionUpsertArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionCountArgs} args - Arguments to filter UserSessions to count.
     * @example
     * // Count the number of UserSessions
     * const count = await prisma.userSession.count({
     *   where: {
     *     // ... the filter for the UserSessions we want to count
     *   }
     * })
    **/
    count<T extends UserSessionCountArgs>(
      args?: Subset<T, UserSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSessionAggregateArgs>(args: Subset<T, UserSessionAggregateArgs>): Prisma.PrismaPromise<GetUserSessionAggregateType<T>>

    /**
     * Group by UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSessionGroupByArgs['orderBy'] }
        : { orderBy?: UserSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSession model
   */
  readonly fields: UserSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSession model
   */ 
  interface UserSessionFieldRefs {
    readonly id: FieldRef<"UserSession", 'String'>
    readonly userId: FieldRef<"UserSession", 'String'>
    readonly sessionToken: FieldRef<"UserSession", 'String'>
    readonly deviceFingerprint: FieldRef<"UserSession", 'String'>
    readonly ipAddress: FieldRef<"UserSession", 'String'>
    readonly userAgent: FieldRef<"UserSession", 'String'>
    readonly location: FieldRef<"UserSession", 'String'>
    readonly riskScore: FieldRef<"UserSession", 'Float'>
    readonly isActive: FieldRef<"UserSession", 'Boolean'>
    readonly lastActivityAt: FieldRef<"UserSession", 'DateTime'>
    readonly expiresAt: FieldRef<"UserSession", 'DateTime'>
    readonly createdAt: FieldRef<"UserSession", 'DateTime'>
    readonly loginMethod: FieldRef<"UserSession", 'String'>
    readonly deviceType: FieldRef<"UserSession", 'String'>
    readonly browserInfo: FieldRef<"UserSession", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserSession findUnique
   */
  export type UserSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findUniqueOrThrow
   */
  export type UserSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findFirst
   */
  export type UserSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findFirstOrThrow
   */
  export type UserSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findMany
   */
  export type UserSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession create
   */
  export type UserSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSession.
     */
    data: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
  }

  /**
   * UserSession createMany
   */
  export type UserSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
  }

  /**
   * UserSession createManyAndReturn
   */
  export type UserSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession update
   */
  export type UserSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSession.
     */
    data: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
    /**
     * Choose, which UserSession to update.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession updateMany
   */
  export type UserSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
  }

  /**
   * UserSession upsert
   */
  export type UserSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSession to update in case it exists.
     */
    where: UserSessionWhereUniqueInput
    /**
     * In case the UserSession found by the `where` argument doesn't exist, create a new UserSession with this data.
     */
    create: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
    /**
     * In case the UserSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
  }

  /**
   * UserSession delete
   */
  export type UserSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter which UserSession to delete.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession deleteMany
   */
  export type UserSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSessions to delete
     */
    where?: UserSessionWhereInput
  }

  /**
   * UserSession without action
   */
  export type UserSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
  }


  /**
   * Model EncryptionKey
   */

  export type AggregateEncryptionKey = {
    _count: EncryptionKeyCountAggregateOutputType | null
    _avg: EncryptionKeyAvgAggregateOutputType | null
    _sum: EncryptionKeySumAggregateOutputType | null
    _min: EncryptionKeyMinAggregateOutputType | null
    _max: EncryptionKeyMaxAggregateOutputType | null
  }

  export type EncryptionKeyAvgAggregateOutputType = {
    version: number | null
  }

  export type EncryptionKeySumAggregateOutputType = {
    version: number | null
  }

  export type EncryptionKeyMinAggregateOutputType = {
    id: string | null
    keyId: string | null
    algorithm: string | null
    purpose: string | null
    isActive: boolean | null
    rotatedAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
    version: number | null
  }

  export type EncryptionKeyMaxAggregateOutputType = {
    id: string | null
    keyId: string | null
    algorithm: string | null
    purpose: string | null
    isActive: boolean | null
    rotatedAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
    version: number | null
  }

  export type EncryptionKeyCountAggregateOutputType = {
    id: number
    keyId: number
    algorithm: number
    purpose: number
    isActive: number
    rotatedAt: number
    expiresAt: number
    createdAt: number
    version: number
    _all: number
  }


  export type EncryptionKeyAvgAggregateInputType = {
    version?: true
  }

  export type EncryptionKeySumAggregateInputType = {
    version?: true
  }

  export type EncryptionKeyMinAggregateInputType = {
    id?: true
    keyId?: true
    algorithm?: true
    purpose?: true
    isActive?: true
    rotatedAt?: true
    expiresAt?: true
    createdAt?: true
    version?: true
  }

  export type EncryptionKeyMaxAggregateInputType = {
    id?: true
    keyId?: true
    algorithm?: true
    purpose?: true
    isActive?: true
    rotatedAt?: true
    expiresAt?: true
    createdAt?: true
    version?: true
  }

  export type EncryptionKeyCountAggregateInputType = {
    id?: true
    keyId?: true
    algorithm?: true
    purpose?: true
    isActive?: true
    rotatedAt?: true
    expiresAt?: true
    createdAt?: true
    version?: true
    _all?: true
  }

  export type EncryptionKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EncryptionKey to aggregate.
     */
    where?: EncryptionKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EncryptionKeys to fetch.
     */
    orderBy?: EncryptionKeyOrderByWithRelationInput | EncryptionKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EncryptionKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EncryptionKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EncryptionKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EncryptionKeys
    **/
    _count?: true | EncryptionKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EncryptionKeyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EncryptionKeySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EncryptionKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EncryptionKeyMaxAggregateInputType
  }

  export type GetEncryptionKeyAggregateType<T extends EncryptionKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateEncryptionKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEncryptionKey[P]>
      : GetScalarType<T[P], AggregateEncryptionKey[P]>
  }




  export type EncryptionKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EncryptionKeyWhereInput
    orderBy?: EncryptionKeyOrderByWithAggregationInput | EncryptionKeyOrderByWithAggregationInput[]
    by: EncryptionKeyScalarFieldEnum[] | EncryptionKeyScalarFieldEnum
    having?: EncryptionKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EncryptionKeyCountAggregateInputType | true
    _avg?: EncryptionKeyAvgAggregateInputType
    _sum?: EncryptionKeySumAggregateInputType
    _min?: EncryptionKeyMinAggregateInputType
    _max?: EncryptionKeyMaxAggregateInputType
  }

  export type EncryptionKeyGroupByOutputType = {
    id: string
    keyId: string
    algorithm: string
    purpose: string
    isActive: boolean
    rotatedAt: Date | null
    expiresAt: Date | null
    createdAt: Date
    version: number
    _count: EncryptionKeyCountAggregateOutputType | null
    _avg: EncryptionKeyAvgAggregateOutputType | null
    _sum: EncryptionKeySumAggregateOutputType | null
    _min: EncryptionKeyMinAggregateOutputType | null
    _max: EncryptionKeyMaxAggregateOutputType | null
  }

  type GetEncryptionKeyGroupByPayload<T extends EncryptionKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EncryptionKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EncryptionKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EncryptionKeyGroupByOutputType[P]>
            : GetScalarType<T[P], EncryptionKeyGroupByOutputType[P]>
        }
      >
    >


  export type EncryptionKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    keyId?: boolean
    algorithm?: boolean
    purpose?: boolean
    isActive?: boolean
    rotatedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    version?: boolean
  }, ExtArgs["result"]["encryptionKey"]>

  export type EncryptionKeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    keyId?: boolean
    algorithm?: boolean
    purpose?: boolean
    isActive?: boolean
    rotatedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    version?: boolean
  }, ExtArgs["result"]["encryptionKey"]>

  export type EncryptionKeySelectScalar = {
    id?: boolean
    keyId?: boolean
    algorithm?: boolean
    purpose?: boolean
    isActive?: boolean
    rotatedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    version?: boolean
  }


  export type $EncryptionKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EncryptionKey"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      keyId: string
      algorithm: string
      purpose: string
      isActive: boolean
      rotatedAt: Date | null
      expiresAt: Date | null
      createdAt: Date
      version: number
    }, ExtArgs["result"]["encryptionKey"]>
    composites: {}
  }

  type EncryptionKeyGetPayload<S extends boolean | null | undefined | EncryptionKeyDefaultArgs> = $Result.GetResult<Prisma.$EncryptionKeyPayload, S>

  type EncryptionKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EncryptionKeyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EncryptionKeyCountAggregateInputType | true
    }

  export interface EncryptionKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EncryptionKey'], meta: { name: 'EncryptionKey' } }
    /**
     * Find zero or one EncryptionKey that matches the filter.
     * @param {EncryptionKeyFindUniqueArgs} args - Arguments to find a EncryptionKey
     * @example
     * // Get one EncryptionKey
     * const encryptionKey = await prisma.encryptionKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EncryptionKeyFindUniqueArgs>(args: SelectSubset<T, EncryptionKeyFindUniqueArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EncryptionKey that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EncryptionKeyFindUniqueOrThrowArgs} args - Arguments to find a EncryptionKey
     * @example
     * // Get one EncryptionKey
     * const encryptionKey = await prisma.encryptionKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EncryptionKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, EncryptionKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EncryptionKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptionKeyFindFirstArgs} args - Arguments to find a EncryptionKey
     * @example
     * // Get one EncryptionKey
     * const encryptionKey = await prisma.encryptionKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EncryptionKeyFindFirstArgs>(args?: SelectSubset<T, EncryptionKeyFindFirstArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EncryptionKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptionKeyFindFirstOrThrowArgs} args - Arguments to find a EncryptionKey
     * @example
     * // Get one EncryptionKey
     * const encryptionKey = await prisma.encryptionKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EncryptionKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, EncryptionKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EncryptionKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptionKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EncryptionKeys
     * const encryptionKeys = await prisma.encryptionKey.findMany()
     * 
     * // Get first 10 EncryptionKeys
     * const encryptionKeys = await prisma.encryptionKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const encryptionKeyWithIdOnly = await prisma.encryptionKey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EncryptionKeyFindManyArgs>(args?: SelectSubset<T, EncryptionKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EncryptionKey.
     * @param {EncryptionKeyCreateArgs} args - Arguments to create a EncryptionKey.
     * @example
     * // Create one EncryptionKey
     * const EncryptionKey = await prisma.encryptionKey.create({
     *   data: {
     *     // ... data to create a EncryptionKey
     *   }
     * })
     * 
     */
    create<T extends EncryptionKeyCreateArgs>(args: SelectSubset<T, EncryptionKeyCreateArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EncryptionKeys.
     * @param {EncryptionKeyCreateManyArgs} args - Arguments to create many EncryptionKeys.
     * @example
     * // Create many EncryptionKeys
     * const encryptionKey = await prisma.encryptionKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EncryptionKeyCreateManyArgs>(args?: SelectSubset<T, EncryptionKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EncryptionKeys and returns the data saved in the database.
     * @param {EncryptionKeyCreateManyAndReturnArgs} args - Arguments to create many EncryptionKeys.
     * @example
     * // Create many EncryptionKeys
     * const encryptionKey = await prisma.encryptionKey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EncryptionKeys and only return the `id`
     * const encryptionKeyWithIdOnly = await prisma.encryptionKey.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EncryptionKeyCreateManyAndReturnArgs>(args?: SelectSubset<T, EncryptionKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EncryptionKey.
     * @param {EncryptionKeyDeleteArgs} args - Arguments to delete one EncryptionKey.
     * @example
     * // Delete one EncryptionKey
     * const EncryptionKey = await prisma.encryptionKey.delete({
     *   where: {
     *     // ... filter to delete one EncryptionKey
     *   }
     * })
     * 
     */
    delete<T extends EncryptionKeyDeleteArgs>(args: SelectSubset<T, EncryptionKeyDeleteArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EncryptionKey.
     * @param {EncryptionKeyUpdateArgs} args - Arguments to update one EncryptionKey.
     * @example
     * // Update one EncryptionKey
     * const encryptionKey = await prisma.encryptionKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EncryptionKeyUpdateArgs>(args: SelectSubset<T, EncryptionKeyUpdateArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EncryptionKeys.
     * @param {EncryptionKeyDeleteManyArgs} args - Arguments to filter EncryptionKeys to delete.
     * @example
     * // Delete a few EncryptionKeys
     * const { count } = await prisma.encryptionKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EncryptionKeyDeleteManyArgs>(args?: SelectSubset<T, EncryptionKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EncryptionKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptionKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EncryptionKeys
     * const encryptionKey = await prisma.encryptionKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EncryptionKeyUpdateManyArgs>(args: SelectSubset<T, EncryptionKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EncryptionKey.
     * @param {EncryptionKeyUpsertArgs} args - Arguments to update or create a EncryptionKey.
     * @example
     * // Update or create a EncryptionKey
     * const encryptionKey = await prisma.encryptionKey.upsert({
     *   create: {
     *     // ... data to create a EncryptionKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EncryptionKey we want to update
     *   }
     * })
     */
    upsert<T extends EncryptionKeyUpsertArgs>(args: SelectSubset<T, EncryptionKeyUpsertArgs<ExtArgs>>): Prisma__EncryptionKeyClient<$Result.GetResult<Prisma.$EncryptionKeyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EncryptionKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptionKeyCountArgs} args - Arguments to filter EncryptionKeys to count.
     * @example
     * // Count the number of EncryptionKeys
     * const count = await prisma.encryptionKey.count({
     *   where: {
     *     // ... the filter for the EncryptionKeys we want to count
     *   }
     * })
    **/
    count<T extends EncryptionKeyCountArgs>(
      args?: Subset<T, EncryptionKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EncryptionKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EncryptionKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptionKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EncryptionKeyAggregateArgs>(args: Subset<T, EncryptionKeyAggregateArgs>): Prisma.PrismaPromise<GetEncryptionKeyAggregateType<T>>

    /**
     * Group by EncryptionKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EncryptionKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EncryptionKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EncryptionKeyGroupByArgs['orderBy'] }
        : { orderBy?: EncryptionKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EncryptionKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEncryptionKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EncryptionKey model
   */
  readonly fields: EncryptionKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EncryptionKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EncryptionKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EncryptionKey model
   */ 
  interface EncryptionKeyFieldRefs {
    readonly id: FieldRef<"EncryptionKey", 'String'>
    readonly keyId: FieldRef<"EncryptionKey", 'String'>
    readonly algorithm: FieldRef<"EncryptionKey", 'String'>
    readonly purpose: FieldRef<"EncryptionKey", 'String'>
    readonly isActive: FieldRef<"EncryptionKey", 'Boolean'>
    readonly rotatedAt: FieldRef<"EncryptionKey", 'DateTime'>
    readonly expiresAt: FieldRef<"EncryptionKey", 'DateTime'>
    readonly createdAt: FieldRef<"EncryptionKey", 'DateTime'>
    readonly version: FieldRef<"EncryptionKey", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * EncryptionKey findUnique
   */
  export type EncryptionKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Filter, which EncryptionKey to fetch.
     */
    where: EncryptionKeyWhereUniqueInput
  }

  /**
   * EncryptionKey findUniqueOrThrow
   */
  export type EncryptionKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Filter, which EncryptionKey to fetch.
     */
    where: EncryptionKeyWhereUniqueInput
  }

  /**
   * EncryptionKey findFirst
   */
  export type EncryptionKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Filter, which EncryptionKey to fetch.
     */
    where?: EncryptionKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EncryptionKeys to fetch.
     */
    orderBy?: EncryptionKeyOrderByWithRelationInput | EncryptionKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EncryptionKeys.
     */
    cursor?: EncryptionKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EncryptionKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EncryptionKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EncryptionKeys.
     */
    distinct?: EncryptionKeyScalarFieldEnum | EncryptionKeyScalarFieldEnum[]
  }

  /**
   * EncryptionKey findFirstOrThrow
   */
  export type EncryptionKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Filter, which EncryptionKey to fetch.
     */
    where?: EncryptionKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EncryptionKeys to fetch.
     */
    orderBy?: EncryptionKeyOrderByWithRelationInput | EncryptionKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EncryptionKeys.
     */
    cursor?: EncryptionKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EncryptionKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EncryptionKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EncryptionKeys.
     */
    distinct?: EncryptionKeyScalarFieldEnum | EncryptionKeyScalarFieldEnum[]
  }

  /**
   * EncryptionKey findMany
   */
  export type EncryptionKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Filter, which EncryptionKeys to fetch.
     */
    where?: EncryptionKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EncryptionKeys to fetch.
     */
    orderBy?: EncryptionKeyOrderByWithRelationInput | EncryptionKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EncryptionKeys.
     */
    cursor?: EncryptionKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EncryptionKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EncryptionKeys.
     */
    skip?: number
    distinct?: EncryptionKeyScalarFieldEnum | EncryptionKeyScalarFieldEnum[]
  }

  /**
   * EncryptionKey create
   */
  export type EncryptionKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * The data needed to create a EncryptionKey.
     */
    data: XOR<EncryptionKeyCreateInput, EncryptionKeyUncheckedCreateInput>
  }

  /**
   * EncryptionKey createMany
   */
  export type EncryptionKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EncryptionKeys.
     */
    data: EncryptionKeyCreateManyInput | EncryptionKeyCreateManyInput[]
  }

  /**
   * EncryptionKey createManyAndReturn
   */
  export type EncryptionKeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EncryptionKeys.
     */
    data: EncryptionKeyCreateManyInput | EncryptionKeyCreateManyInput[]
  }

  /**
   * EncryptionKey update
   */
  export type EncryptionKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * The data needed to update a EncryptionKey.
     */
    data: XOR<EncryptionKeyUpdateInput, EncryptionKeyUncheckedUpdateInput>
    /**
     * Choose, which EncryptionKey to update.
     */
    where: EncryptionKeyWhereUniqueInput
  }

  /**
   * EncryptionKey updateMany
   */
  export type EncryptionKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EncryptionKeys.
     */
    data: XOR<EncryptionKeyUpdateManyMutationInput, EncryptionKeyUncheckedUpdateManyInput>
    /**
     * Filter which EncryptionKeys to update
     */
    where?: EncryptionKeyWhereInput
  }

  /**
   * EncryptionKey upsert
   */
  export type EncryptionKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * The filter to search for the EncryptionKey to update in case it exists.
     */
    where: EncryptionKeyWhereUniqueInput
    /**
     * In case the EncryptionKey found by the `where` argument doesn't exist, create a new EncryptionKey with this data.
     */
    create: XOR<EncryptionKeyCreateInput, EncryptionKeyUncheckedCreateInput>
    /**
     * In case the EncryptionKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EncryptionKeyUpdateInput, EncryptionKeyUncheckedUpdateInput>
  }

  /**
   * EncryptionKey delete
   */
  export type EncryptionKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
    /**
     * Filter which EncryptionKey to delete.
     */
    where: EncryptionKeyWhereUniqueInput
  }

  /**
   * EncryptionKey deleteMany
   */
  export type EncryptionKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EncryptionKeys to delete
     */
    where?: EncryptionKeyWhereInput
  }

  /**
   * EncryptionKey without action
   */
  export type EncryptionKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EncryptionKey
     */
    select?: EncryptionKeySelect<ExtArgs> | null
  }


  /**
   * Model SecurityEvent
   */

  export type AggregateSecurityEvent = {
    _count: SecurityEventCountAggregateOutputType | null
    _avg: SecurityEventAvgAggregateOutputType | null
    _sum: SecurityEventSumAggregateOutputType | null
    _min: SecurityEventMinAggregateOutputType | null
    _max: SecurityEventMaxAggregateOutputType | null
  }

  export type SecurityEventAvgAggregateOutputType = {
    riskScore: number | null
  }

  export type SecurityEventSumAggregateOutputType = {
    riskScore: number | null
  }

  export type SecurityEventMinAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionId: string | null
    eventType: string | null
    severity: string | null
    description: string | null
    details: string | null
    ipAddress: string | null
    userAgent: string | null
    location: string | null
    riskScore: number | null
    isBlocked: boolean | null
    resolvedAt: Date | null
    resolvedById: string | null
    createdAt: Date | null
  }

  export type SecurityEventMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionId: string | null
    eventType: string | null
    severity: string | null
    description: string | null
    details: string | null
    ipAddress: string | null
    userAgent: string | null
    location: string | null
    riskScore: number | null
    isBlocked: boolean | null
    resolvedAt: Date | null
    resolvedById: string | null
    createdAt: Date | null
  }

  export type SecurityEventCountAggregateOutputType = {
    id: number
    userId: number
    sessionId: number
    eventType: number
    severity: number
    description: number
    details: number
    ipAddress: number
    userAgent: number
    location: number
    riskScore: number
    isBlocked: number
    resolvedAt: number
    resolvedById: number
    createdAt: number
    _all: number
  }


  export type SecurityEventAvgAggregateInputType = {
    riskScore?: true
  }

  export type SecurityEventSumAggregateInputType = {
    riskScore?: true
  }

  export type SecurityEventMinAggregateInputType = {
    id?: true
    userId?: true
    sessionId?: true
    eventType?: true
    severity?: true
    description?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    location?: true
    riskScore?: true
    isBlocked?: true
    resolvedAt?: true
    resolvedById?: true
    createdAt?: true
  }

  export type SecurityEventMaxAggregateInputType = {
    id?: true
    userId?: true
    sessionId?: true
    eventType?: true
    severity?: true
    description?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    location?: true
    riskScore?: true
    isBlocked?: true
    resolvedAt?: true
    resolvedById?: true
    createdAt?: true
  }

  export type SecurityEventCountAggregateInputType = {
    id?: true
    userId?: true
    sessionId?: true
    eventType?: true
    severity?: true
    description?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    location?: true
    riskScore?: true
    isBlocked?: true
    resolvedAt?: true
    resolvedById?: true
    createdAt?: true
    _all?: true
  }

  export type SecurityEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SecurityEvent to aggregate.
     */
    where?: SecurityEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityEvents to fetch.
     */
    orderBy?: SecurityEventOrderByWithRelationInput | SecurityEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SecurityEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SecurityEvents
    **/
    _count?: true | SecurityEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SecurityEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SecurityEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SecurityEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SecurityEventMaxAggregateInputType
  }

  export type GetSecurityEventAggregateType<T extends SecurityEventAggregateArgs> = {
        [P in keyof T & keyof AggregateSecurityEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSecurityEvent[P]>
      : GetScalarType<T[P], AggregateSecurityEvent[P]>
  }




  export type SecurityEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SecurityEventWhereInput
    orderBy?: SecurityEventOrderByWithAggregationInput | SecurityEventOrderByWithAggregationInput[]
    by: SecurityEventScalarFieldEnum[] | SecurityEventScalarFieldEnum
    having?: SecurityEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SecurityEventCountAggregateInputType | true
    _avg?: SecurityEventAvgAggregateInputType
    _sum?: SecurityEventSumAggregateInputType
    _min?: SecurityEventMinAggregateInputType
    _max?: SecurityEventMaxAggregateInputType
  }

  export type SecurityEventGroupByOutputType = {
    id: string
    userId: string | null
    sessionId: string | null
    eventType: string
    severity: string
    description: string
    details: string | null
    ipAddress: string | null
    userAgent: string | null
    location: string | null
    riskScore: number
    isBlocked: boolean
    resolvedAt: Date | null
    resolvedById: string | null
    createdAt: Date
    _count: SecurityEventCountAggregateOutputType | null
    _avg: SecurityEventAvgAggregateOutputType | null
    _sum: SecurityEventSumAggregateOutputType | null
    _min: SecurityEventMinAggregateOutputType | null
    _max: SecurityEventMaxAggregateOutputType | null
  }

  type GetSecurityEventGroupByPayload<T extends SecurityEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SecurityEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SecurityEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SecurityEventGroupByOutputType[P]>
            : GetScalarType<T[P], SecurityEventGroupByOutputType[P]>
        }
      >
    >


  export type SecurityEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    eventType?: boolean
    severity?: boolean
    description?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    location?: boolean
    riskScore?: boolean
    isBlocked?: boolean
    resolvedAt?: boolean
    resolvedById?: boolean
    createdAt?: boolean
    user?: boolean | SecurityEvent$userArgs<ExtArgs>
    resolvedBy?: boolean | SecurityEvent$resolvedByArgs<ExtArgs>
  }, ExtArgs["result"]["securityEvent"]>

  export type SecurityEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    eventType?: boolean
    severity?: boolean
    description?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    location?: boolean
    riskScore?: boolean
    isBlocked?: boolean
    resolvedAt?: boolean
    resolvedById?: boolean
    createdAt?: boolean
    user?: boolean | SecurityEvent$userArgs<ExtArgs>
    resolvedBy?: boolean | SecurityEvent$resolvedByArgs<ExtArgs>
  }, ExtArgs["result"]["securityEvent"]>

  export type SecurityEventSelectScalar = {
    id?: boolean
    userId?: boolean
    sessionId?: boolean
    eventType?: boolean
    severity?: boolean
    description?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    location?: boolean
    riskScore?: boolean
    isBlocked?: boolean
    resolvedAt?: boolean
    resolvedById?: boolean
    createdAt?: boolean
  }

  export type SecurityEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | SecurityEvent$userArgs<ExtArgs>
    resolvedBy?: boolean | SecurityEvent$resolvedByArgs<ExtArgs>
  }
  export type SecurityEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | SecurityEvent$userArgs<ExtArgs>
    resolvedBy?: boolean | SecurityEvent$resolvedByArgs<ExtArgs>
  }

  export type $SecurityEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SecurityEvent"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      resolvedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      sessionId: string | null
      eventType: string
      severity: string
      description: string
      details: string | null
      ipAddress: string | null
      userAgent: string | null
      location: string | null
      riskScore: number
      isBlocked: boolean
      resolvedAt: Date | null
      resolvedById: string | null
      createdAt: Date
    }, ExtArgs["result"]["securityEvent"]>
    composites: {}
  }

  type SecurityEventGetPayload<S extends boolean | null | undefined | SecurityEventDefaultArgs> = $Result.GetResult<Prisma.$SecurityEventPayload, S>

  type SecurityEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SecurityEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SecurityEventCountAggregateInputType | true
    }

  export interface SecurityEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SecurityEvent'], meta: { name: 'SecurityEvent' } }
    /**
     * Find zero or one SecurityEvent that matches the filter.
     * @param {SecurityEventFindUniqueArgs} args - Arguments to find a SecurityEvent
     * @example
     * // Get one SecurityEvent
     * const securityEvent = await prisma.securityEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SecurityEventFindUniqueArgs>(args: SelectSubset<T, SecurityEventFindUniqueArgs<ExtArgs>>): Prisma__SecurityEventClient<$Result.GetResult<Prisma.$SecurityEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SecurityEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SecurityEventFindUniqueOrThrowArgs} args - Arguments to find a SecurityEvent
     * @example
     * // Get one SecurityEvent
     * const securityEvent = await prisma.securityEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SecurityEventFindUniqueOrThrowArgs>(args: SelectSubset<T, SecurityEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SecurityEventClient<$Result.GetResult<Prisma.$SecurityEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SecurityEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityEventFindFirstArgs} args - Arguments to find a SecurityEvent
     * @example
     * // Get one SecurityEvent
     * const securityEvent = await prisma.securityEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SecurityEventFindFirstArgs>(args?: SelectSubset<T, SecurityEventFindFirstArgs<ExtArgs>>): Prisma__SecurityEventClient<$Result.GetResult<Prisma.$SecurityEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SecurityEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityEventFindFirstOrThrowArgs} args - Arguments to find a SecurityEvent
     * @example
     * // Get one SecurityEvent
     * const securityEvent = await prisma.securityEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SecurityEventFindFirstOrThrowArgs>(args?: SelectSubset<T, SecurityEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__SecurityEventClient<$Result.GetResult<Prisma.$SecurityEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SecurityEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SecurityEvents
     * const securityEvents = await prisma.securityEvent.findMany()
     * 
     * // Get first 10 SecurityEvents
     * const securityEvents = await prisma.securityEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const securityEventWithIdOnly = await prisma.securityEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SecurityEventFindManyArgs>(args?: SelectSubset<T, SecurityEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecurityEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SecurityEvent.
     * @param {SecurityEventCreateArgs} args - Arguments to create a SecurityEvent.
     * @example
     * // Create one SecurityEvent
     * const SecurityEvent = await prisma.securityEvent.create({
     *   data: {
     *     // ... data to create a SecurityEvent
     *   }
     * })
     * 
     */
    create<T extends SecurityEventCreateArgs>(args: SelectSubset<T, SecurityEventCreateArgs<ExtArgs>>): Prisma__SecurityEventClient<$Result.GetResult<Prisma.$SecurityEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SecurityEvents.
     * @param {SecurityEventCreateManyArgs} args - Arguments to create many SecurityEvents.
     * @example
     * // Create many SecurityEvents
     * const securityEvent = await prisma.securityEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SecurityEventCreateManyArgs>(args?: SelectSubset<T, SecurityEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SecurityEvents and returns the data saved in the database.
     * @param {SecurityEventCreateManyAndReturnArgs} args - Arguments to create many SecurityEvents.
     * @example
     * // Create many SecurityEvents
     * const securityEvent = await prisma.securityEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SecurityEvents and only return the `id`
     * const securityEventWithIdOnly = await prisma.securityEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SecurityEventCreateManyAndReturnArgs>(args?: SelectSubset<T, SecurityEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SecurityEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SecurityEvent.
     * @param {SecurityEventDeleteArgs} args - Arguments to delete one SecurityEvent.
     * @example
     * // Delete one SecurityEvent
     * const SecurityEvent = await prisma.securityEvent.delete({
     *   where: {
     *     // ... filter to delete one SecurityEvent
     *   }
     * })
     * 
     */
    delete<T extends SecurityEventDeleteArgs>(args: SelectSubset<T, SecurityEventDeleteArgs<ExtArgs>>): Prisma__SecurityEventClient<$Result.GetResult<Prisma.$SecurityEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SecurityEvent.
     * @param {SecurityEventUpdateArgs} args - Arguments to update one SecurityEvent.
     * @example
     * // Update one SecurityEvent
     * const securityEvent = await prisma.securityEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SecurityEventUpdateArgs>(args: SelectSubset<T, SecurityEventUpdateArgs<ExtArgs>>): Prisma__SecurityEventClient<$Result.GetResult<Prisma.$SecurityEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SecurityEvents.
     * @param {SecurityEventDeleteManyArgs} args - Arguments to filter SecurityEvents to delete.
     * @example
     * // Delete a few SecurityEvents
     * const { count } = await prisma.securityEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SecurityEventDeleteManyArgs>(args?: SelectSubset<T, SecurityEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SecurityEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SecurityEvents
     * const securityEvent = await prisma.securityEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SecurityEventUpdateManyArgs>(args: SelectSubset<T, SecurityEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SecurityEvent.
     * @param {SecurityEventUpsertArgs} args - Arguments to update or create a SecurityEvent.
     * @example
     * // Update or create a SecurityEvent
     * const securityEvent = await prisma.securityEvent.upsert({
     *   create: {
     *     // ... data to create a SecurityEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SecurityEvent we want to update
     *   }
     * })
     */
    upsert<T extends SecurityEventUpsertArgs>(args: SelectSubset<T, SecurityEventUpsertArgs<ExtArgs>>): Prisma__SecurityEventClient<$Result.GetResult<Prisma.$SecurityEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SecurityEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityEventCountArgs} args - Arguments to filter SecurityEvents to count.
     * @example
     * // Count the number of SecurityEvents
     * const count = await prisma.securityEvent.count({
     *   where: {
     *     // ... the filter for the SecurityEvents we want to count
     *   }
     * })
    **/
    count<T extends SecurityEventCountArgs>(
      args?: Subset<T, SecurityEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SecurityEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SecurityEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SecurityEventAggregateArgs>(args: Subset<T, SecurityEventAggregateArgs>): Prisma.PrismaPromise<GetSecurityEventAggregateType<T>>

    /**
     * Group by SecurityEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SecurityEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SecurityEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SecurityEventGroupByArgs['orderBy'] }
        : { orderBy?: SecurityEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SecurityEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSecurityEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SecurityEvent model
   */
  readonly fields: SecurityEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SecurityEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SecurityEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends SecurityEvent$userArgs<ExtArgs> = {}>(args?: Subset<T, SecurityEvent$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    resolvedBy<T extends SecurityEvent$resolvedByArgs<ExtArgs> = {}>(args?: Subset<T, SecurityEvent$resolvedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SecurityEvent model
   */ 
  interface SecurityEventFieldRefs {
    readonly id: FieldRef<"SecurityEvent", 'String'>
    readonly userId: FieldRef<"SecurityEvent", 'String'>
    readonly sessionId: FieldRef<"SecurityEvent", 'String'>
    readonly eventType: FieldRef<"SecurityEvent", 'String'>
    readonly severity: FieldRef<"SecurityEvent", 'String'>
    readonly description: FieldRef<"SecurityEvent", 'String'>
    readonly details: FieldRef<"SecurityEvent", 'String'>
    readonly ipAddress: FieldRef<"SecurityEvent", 'String'>
    readonly userAgent: FieldRef<"SecurityEvent", 'String'>
    readonly location: FieldRef<"SecurityEvent", 'String'>
    readonly riskScore: FieldRef<"SecurityEvent", 'Float'>
    readonly isBlocked: FieldRef<"SecurityEvent", 'Boolean'>
    readonly resolvedAt: FieldRef<"SecurityEvent", 'DateTime'>
    readonly resolvedById: FieldRef<"SecurityEvent", 'String'>
    readonly createdAt: FieldRef<"SecurityEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SecurityEvent findUnique
   */
  export type SecurityEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityEvent
     */
    select?: SecurityEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityEventInclude<ExtArgs> | null
    /**
     * Filter, which SecurityEvent to fetch.
     */
    where: SecurityEventWhereUniqueInput
  }

  /**
   * SecurityEvent findUniqueOrThrow
   */
  export type SecurityEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityEvent
     */
    select?: SecurityEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityEventInclude<ExtArgs> | null
    /**
     * Filter, which SecurityEvent to fetch.
     */
    where: SecurityEventWhereUniqueInput
  }

  /**
   * SecurityEvent findFirst
   */
  export type SecurityEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityEvent
     */
    select?: SecurityEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityEventInclude<ExtArgs> | null
    /**
     * Filter, which SecurityEvent to fetch.
     */
    where?: SecurityEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityEvents to fetch.
     */
    orderBy?: SecurityEventOrderByWithRelationInput | SecurityEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SecurityEvents.
     */
    cursor?: SecurityEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SecurityEvents.
     */
    distinct?: SecurityEventScalarFieldEnum | SecurityEventScalarFieldEnum[]
  }

  /**
   * SecurityEvent findFirstOrThrow
   */
  export type SecurityEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityEvent
     */
    select?: SecurityEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityEventInclude<ExtArgs> | null
    /**
     * Filter, which SecurityEvent to fetch.
     */
    where?: SecurityEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityEvents to fetch.
     */
    orderBy?: SecurityEventOrderByWithRelationInput | SecurityEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SecurityEvents.
     */
    cursor?: SecurityEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SecurityEvents.
     */
    distinct?: SecurityEventScalarFieldEnum | SecurityEventScalarFieldEnum[]
  }

  /**
   * SecurityEvent findMany
   */
  export type SecurityEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityEvent
     */
    select?: SecurityEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityEventInclude<ExtArgs> | null
    /**
     * Filter, which SecurityEvents to fetch.
     */
    where?: SecurityEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SecurityEvents to fetch.
     */
    orderBy?: SecurityEventOrderByWithRelationInput | SecurityEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SecurityEvents.
     */
    cursor?: SecurityEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SecurityEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SecurityEvents.
     */
    skip?: number
    distinct?: SecurityEventScalarFieldEnum | SecurityEventScalarFieldEnum[]
  }

  /**
   * SecurityEvent create
   */
  export type SecurityEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityEvent
     */
    select?: SecurityEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityEventInclude<ExtArgs> | null
    /**
     * The data needed to create a SecurityEvent.
     */
    data: XOR<SecurityEventCreateInput, SecurityEventUncheckedCreateInput>
  }

  /**
   * SecurityEvent createMany
   */
  export type SecurityEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SecurityEvents.
     */
    data: SecurityEventCreateManyInput | SecurityEventCreateManyInput[]
  }

  /**
   * SecurityEvent createManyAndReturn
   */
  export type SecurityEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityEvent
     */
    select?: SecurityEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SecurityEvents.
     */
    data: SecurityEventCreateManyInput | SecurityEventCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SecurityEvent update
   */
  export type SecurityEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityEvent
     */
    select?: SecurityEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityEventInclude<ExtArgs> | null
    /**
     * The data needed to update a SecurityEvent.
     */
    data: XOR<SecurityEventUpdateInput, SecurityEventUncheckedUpdateInput>
    /**
     * Choose, which SecurityEvent to update.
     */
    where: SecurityEventWhereUniqueInput
  }

  /**
   * SecurityEvent updateMany
   */
  export type SecurityEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SecurityEvents.
     */
    data: XOR<SecurityEventUpdateManyMutationInput, SecurityEventUncheckedUpdateManyInput>
    /**
     * Filter which SecurityEvents to update
     */
    where?: SecurityEventWhereInput
  }

  /**
   * SecurityEvent upsert
   */
  export type SecurityEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityEvent
     */
    select?: SecurityEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityEventInclude<ExtArgs> | null
    /**
     * The filter to search for the SecurityEvent to update in case it exists.
     */
    where: SecurityEventWhereUniqueInput
    /**
     * In case the SecurityEvent found by the `where` argument doesn't exist, create a new SecurityEvent with this data.
     */
    create: XOR<SecurityEventCreateInput, SecurityEventUncheckedCreateInput>
    /**
     * In case the SecurityEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SecurityEventUpdateInput, SecurityEventUncheckedUpdateInput>
  }

  /**
   * SecurityEvent delete
   */
  export type SecurityEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityEvent
     */
    select?: SecurityEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityEventInclude<ExtArgs> | null
    /**
     * Filter which SecurityEvent to delete.
     */
    where: SecurityEventWhereUniqueInput
  }

  /**
   * SecurityEvent deleteMany
   */
  export type SecurityEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SecurityEvents to delete
     */
    where?: SecurityEventWhereInput
  }

  /**
   * SecurityEvent.user
   */
  export type SecurityEvent$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * SecurityEvent.resolvedBy
   */
  export type SecurityEvent$resolvedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * SecurityEvent without action
   */
  export type SecurityEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SecurityEvent
     */
    select?: SecurityEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SecurityEventInclude<ExtArgs> | null
  }


  /**
   * Model PermissionContext
   */

  export type AggregatePermissionContext = {
    _count: PermissionContextCountAggregateOutputType | null
    _min: PermissionContextMinAggregateOutputType | null
    _max: PermissionContextMaxAggregateOutputType | null
  }

  export type PermissionContextMinAggregateOutputType = {
    id: string | null
    userId: string | null
    permissionId: string | null
    context: string | null
    grantedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
    ipRange: string | null
    timeRestriction: string | null
    locationRestriction: string | null
    deviceRestriction: string | null
  }

  export type PermissionContextMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    permissionId: string | null
    context: string | null
    grantedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
    ipRange: string | null
    timeRestriction: string | null
    locationRestriction: string | null
    deviceRestriction: string | null
  }

  export type PermissionContextCountAggregateOutputType = {
    id: number
    userId: number
    permissionId: number
    context: number
    grantedAt: number
    expiresAt: number
    isActive: number
    ipRange: number
    timeRestriction: number
    locationRestriction: number
    deviceRestriction: number
    _all: number
  }


  export type PermissionContextMinAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
    context?: true
    grantedAt?: true
    expiresAt?: true
    isActive?: true
    ipRange?: true
    timeRestriction?: true
    locationRestriction?: true
    deviceRestriction?: true
  }

  export type PermissionContextMaxAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
    context?: true
    grantedAt?: true
    expiresAt?: true
    isActive?: true
    ipRange?: true
    timeRestriction?: true
    locationRestriction?: true
    deviceRestriction?: true
  }

  export type PermissionContextCountAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
    context?: true
    grantedAt?: true
    expiresAt?: true
    isActive?: true
    ipRange?: true
    timeRestriction?: true
    locationRestriction?: true
    deviceRestriction?: true
    _all?: true
  }

  export type PermissionContextAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PermissionContext to aggregate.
     */
    where?: PermissionContextWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionContexts to fetch.
     */
    orderBy?: PermissionContextOrderByWithRelationInput | PermissionContextOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionContextWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionContexts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionContexts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PermissionContexts
    **/
    _count?: true | PermissionContextCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionContextMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionContextMaxAggregateInputType
  }

  export type GetPermissionContextAggregateType<T extends PermissionContextAggregateArgs> = {
        [P in keyof T & keyof AggregatePermissionContext]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermissionContext[P]>
      : GetScalarType<T[P], AggregatePermissionContext[P]>
  }




  export type PermissionContextGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionContextWhereInput
    orderBy?: PermissionContextOrderByWithAggregationInput | PermissionContextOrderByWithAggregationInput[]
    by: PermissionContextScalarFieldEnum[] | PermissionContextScalarFieldEnum
    having?: PermissionContextScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionContextCountAggregateInputType | true
    _min?: PermissionContextMinAggregateInputType
    _max?: PermissionContextMaxAggregateInputType
  }

  export type PermissionContextGroupByOutputType = {
    id: string
    userId: string
    permissionId: string
    context: string
    grantedAt: Date
    expiresAt: Date | null
    isActive: boolean
    ipRange: string | null
    timeRestriction: string | null
    locationRestriction: string | null
    deviceRestriction: string | null
    _count: PermissionContextCountAggregateOutputType | null
    _min: PermissionContextMinAggregateOutputType | null
    _max: PermissionContextMaxAggregateOutputType | null
  }

  type GetPermissionContextGroupByPayload<T extends PermissionContextGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionContextGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionContextGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionContextGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionContextGroupByOutputType[P]>
        }
      >
    >


  export type PermissionContextSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    context?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    ipRange?: boolean
    timeRestriction?: boolean
    locationRestriction?: boolean
    deviceRestriction?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permissionContext"]>

  export type PermissionContextSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    context?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    ipRange?: boolean
    timeRestriction?: boolean
    locationRestriction?: boolean
    deviceRestriction?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permissionContext"]>

  export type PermissionContextSelectScalar = {
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    context?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    ipRange?: boolean
    timeRestriction?: boolean
    locationRestriction?: boolean
    deviceRestriction?: boolean
  }

  export type PermissionContextInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }
  export type PermissionContextIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }

  export type $PermissionContextPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PermissionContext"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      permissionId: string
      context: string
      grantedAt: Date
      expiresAt: Date | null
      isActive: boolean
      ipRange: string | null
      timeRestriction: string | null
      locationRestriction: string | null
      deviceRestriction: string | null
    }, ExtArgs["result"]["permissionContext"]>
    composites: {}
  }

  type PermissionContextGetPayload<S extends boolean | null | undefined | PermissionContextDefaultArgs> = $Result.GetResult<Prisma.$PermissionContextPayload, S>

  type PermissionContextCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PermissionContextFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionContextCountAggregateInputType | true
    }

  export interface PermissionContextDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PermissionContext'], meta: { name: 'PermissionContext' } }
    /**
     * Find zero or one PermissionContext that matches the filter.
     * @param {PermissionContextFindUniqueArgs} args - Arguments to find a PermissionContext
     * @example
     * // Get one PermissionContext
     * const permissionContext = await prisma.permissionContext.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionContextFindUniqueArgs>(args: SelectSubset<T, PermissionContextFindUniqueArgs<ExtArgs>>): Prisma__PermissionContextClient<$Result.GetResult<Prisma.$PermissionContextPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PermissionContext that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PermissionContextFindUniqueOrThrowArgs} args - Arguments to find a PermissionContext
     * @example
     * // Get one PermissionContext
     * const permissionContext = await prisma.permissionContext.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionContextFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionContextFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionContextClient<$Result.GetResult<Prisma.$PermissionContextPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PermissionContext that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionContextFindFirstArgs} args - Arguments to find a PermissionContext
     * @example
     * // Get one PermissionContext
     * const permissionContext = await prisma.permissionContext.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionContextFindFirstArgs>(args?: SelectSubset<T, PermissionContextFindFirstArgs<ExtArgs>>): Prisma__PermissionContextClient<$Result.GetResult<Prisma.$PermissionContextPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PermissionContext that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionContextFindFirstOrThrowArgs} args - Arguments to find a PermissionContext
     * @example
     * // Get one PermissionContext
     * const permissionContext = await prisma.permissionContext.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionContextFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionContextFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionContextClient<$Result.GetResult<Prisma.$PermissionContextPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PermissionContexts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionContextFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PermissionContexts
     * const permissionContexts = await prisma.permissionContext.findMany()
     * 
     * // Get first 10 PermissionContexts
     * const permissionContexts = await prisma.permissionContext.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionContextWithIdOnly = await prisma.permissionContext.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionContextFindManyArgs>(args?: SelectSubset<T, PermissionContextFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionContextPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PermissionContext.
     * @param {PermissionContextCreateArgs} args - Arguments to create a PermissionContext.
     * @example
     * // Create one PermissionContext
     * const PermissionContext = await prisma.permissionContext.create({
     *   data: {
     *     // ... data to create a PermissionContext
     *   }
     * })
     * 
     */
    create<T extends PermissionContextCreateArgs>(args: SelectSubset<T, PermissionContextCreateArgs<ExtArgs>>): Prisma__PermissionContextClient<$Result.GetResult<Prisma.$PermissionContextPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PermissionContexts.
     * @param {PermissionContextCreateManyArgs} args - Arguments to create many PermissionContexts.
     * @example
     * // Create many PermissionContexts
     * const permissionContext = await prisma.permissionContext.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionContextCreateManyArgs>(args?: SelectSubset<T, PermissionContextCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PermissionContexts and returns the data saved in the database.
     * @param {PermissionContextCreateManyAndReturnArgs} args - Arguments to create many PermissionContexts.
     * @example
     * // Create many PermissionContexts
     * const permissionContext = await prisma.permissionContext.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PermissionContexts and only return the `id`
     * const permissionContextWithIdOnly = await prisma.permissionContext.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PermissionContextCreateManyAndReturnArgs>(args?: SelectSubset<T, PermissionContextCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionContextPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PermissionContext.
     * @param {PermissionContextDeleteArgs} args - Arguments to delete one PermissionContext.
     * @example
     * // Delete one PermissionContext
     * const PermissionContext = await prisma.permissionContext.delete({
     *   where: {
     *     // ... filter to delete one PermissionContext
     *   }
     * })
     * 
     */
    delete<T extends PermissionContextDeleteArgs>(args: SelectSubset<T, PermissionContextDeleteArgs<ExtArgs>>): Prisma__PermissionContextClient<$Result.GetResult<Prisma.$PermissionContextPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PermissionContext.
     * @param {PermissionContextUpdateArgs} args - Arguments to update one PermissionContext.
     * @example
     * // Update one PermissionContext
     * const permissionContext = await prisma.permissionContext.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionContextUpdateArgs>(args: SelectSubset<T, PermissionContextUpdateArgs<ExtArgs>>): Prisma__PermissionContextClient<$Result.GetResult<Prisma.$PermissionContextPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PermissionContexts.
     * @param {PermissionContextDeleteManyArgs} args - Arguments to filter PermissionContexts to delete.
     * @example
     * // Delete a few PermissionContexts
     * const { count } = await prisma.permissionContext.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionContextDeleteManyArgs>(args?: SelectSubset<T, PermissionContextDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PermissionContexts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionContextUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PermissionContexts
     * const permissionContext = await prisma.permissionContext.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionContextUpdateManyArgs>(args: SelectSubset<T, PermissionContextUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PermissionContext.
     * @param {PermissionContextUpsertArgs} args - Arguments to update or create a PermissionContext.
     * @example
     * // Update or create a PermissionContext
     * const permissionContext = await prisma.permissionContext.upsert({
     *   create: {
     *     // ... data to create a PermissionContext
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PermissionContext we want to update
     *   }
     * })
     */
    upsert<T extends PermissionContextUpsertArgs>(args: SelectSubset<T, PermissionContextUpsertArgs<ExtArgs>>): Prisma__PermissionContextClient<$Result.GetResult<Prisma.$PermissionContextPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PermissionContexts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionContextCountArgs} args - Arguments to filter PermissionContexts to count.
     * @example
     * // Count the number of PermissionContexts
     * const count = await prisma.permissionContext.count({
     *   where: {
     *     // ... the filter for the PermissionContexts we want to count
     *   }
     * })
    **/
    count<T extends PermissionContextCountArgs>(
      args?: Subset<T, PermissionContextCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionContextCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PermissionContext.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionContextAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionContextAggregateArgs>(args: Subset<T, PermissionContextAggregateArgs>): Prisma.PrismaPromise<GetPermissionContextAggregateType<T>>

    /**
     * Group by PermissionContext.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionContextGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionContextGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionContextGroupByArgs['orderBy'] }
        : { orderBy?: PermissionContextGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionContextGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionContextGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PermissionContext model
   */
  readonly fields: PermissionContextFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PermissionContext.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionContextClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PermissionContext model
   */ 
  interface PermissionContextFieldRefs {
    readonly id: FieldRef<"PermissionContext", 'String'>
    readonly userId: FieldRef<"PermissionContext", 'String'>
    readonly permissionId: FieldRef<"PermissionContext", 'String'>
    readonly context: FieldRef<"PermissionContext", 'String'>
    readonly grantedAt: FieldRef<"PermissionContext", 'DateTime'>
    readonly expiresAt: FieldRef<"PermissionContext", 'DateTime'>
    readonly isActive: FieldRef<"PermissionContext", 'Boolean'>
    readonly ipRange: FieldRef<"PermissionContext", 'String'>
    readonly timeRestriction: FieldRef<"PermissionContext", 'String'>
    readonly locationRestriction: FieldRef<"PermissionContext", 'String'>
    readonly deviceRestriction: FieldRef<"PermissionContext", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PermissionContext findUnique
   */
  export type PermissionContextFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionContext
     */
    select?: PermissionContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionContextInclude<ExtArgs> | null
    /**
     * Filter, which PermissionContext to fetch.
     */
    where: PermissionContextWhereUniqueInput
  }

  /**
   * PermissionContext findUniqueOrThrow
   */
  export type PermissionContextFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionContext
     */
    select?: PermissionContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionContextInclude<ExtArgs> | null
    /**
     * Filter, which PermissionContext to fetch.
     */
    where: PermissionContextWhereUniqueInput
  }

  /**
   * PermissionContext findFirst
   */
  export type PermissionContextFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionContext
     */
    select?: PermissionContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionContextInclude<ExtArgs> | null
    /**
     * Filter, which PermissionContext to fetch.
     */
    where?: PermissionContextWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionContexts to fetch.
     */
    orderBy?: PermissionContextOrderByWithRelationInput | PermissionContextOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PermissionContexts.
     */
    cursor?: PermissionContextWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionContexts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionContexts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PermissionContexts.
     */
    distinct?: PermissionContextScalarFieldEnum | PermissionContextScalarFieldEnum[]
  }

  /**
   * PermissionContext findFirstOrThrow
   */
  export type PermissionContextFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionContext
     */
    select?: PermissionContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionContextInclude<ExtArgs> | null
    /**
     * Filter, which PermissionContext to fetch.
     */
    where?: PermissionContextWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionContexts to fetch.
     */
    orderBy?: PermissionContextOrderByWithRelationInput | PermissionContextOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PermissionContexts.
     */
    cursor?: PermissionContextWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionContexts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionContexts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PermissionContexts.
     */
    distinct?: PermissionContextScalarFieldEnum | PermissionContextScalarFieldEnum[]
  }

  /**
   * PermissionContext findMany
   */
  export type PermissionContextFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionContext
     */
    select?: PermissionContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionContextInclude<ExtArgs> | null
    /**
     * Filter, which PermissionContexts to fetch.
     */
    where?: PermissionContextWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PermissionContexts to fetch.
     */
    orderBy?: PermissionContextOrderByWithRelationInput | PermissionContextOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PermissionContexts.
     */
    cursor?: PermissionContextWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PermissionContexts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PermissionContexts.
     */
    skip?: number
    distinct?: PermissionContextScalarFieldEnum | PermissionContextScalarFieldEnum[]
  }

  /**
   * PermissionContext create
   */
  export type PermissionContextCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionContext
     */
    select?: PermissionContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionContextInclude<ExtArgs> | null
    /**
     * The data needed to create a PermissionContext.
     */
    data: XOR<PermissionContextCreateInput, PermissionContextUncheckedCreateInput>
  }

  /**
   * PermissionContext createMany
   */
  export type PermissionContextCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PermissionContexts.
     */
    data: PermissionContextCreateManyInput | PermissionContextCreateManyInput[]
  }

  /**
   * PermissionContext createManyAndReturn
   */
  export type PermissionContextCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionContext
     */
    select?: PermissionContextSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PermissionContexts.
     */
    data: PermissionContextCreateManyInput | PermissionContextCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionContextIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PermissionContext update
   */
  export type PermissionContextUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionContext
     */
    select?: PermissionContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionContextInclude<ExtArgs> | null
    /**
     * The data needed to update a PermissionContext.
     */
    data: XOR<PermissionContextUpdateInput, PermissionContextUncheckedUpdateInput>
    /**
     * Choose, which PermissionContext to update.
     */
    where: PermissionContextWhereUniqueInput
  }

  /**
   * PermissionContext updateMany
   */
  export type PermissionContextUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PermissionContexts.
     */
    data: XOR<PermissionContextUpdateManyMutationInput, PermissionContextUncheckedUpdateManyInput>
    /**
     * Filter which PermissionContexts to update
     */
    where?: PermissionContextWhereInput
  }

  /**
   * PermissionContext upsert
   */
  export type PermissionContextUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionContext
     */
    select?: PermissionContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionContextInclude<ExtArgs> | null
    /**
     * The filter to search for the PermissionContext to update in case it exists.
     */
    where: PermissionContextWhereUniqueInput
    /**
     * In case the PermissionContext found by the `where` argument doesn't exist, create a new PermissionContext with this data.
     */
    create: XOR<PermissionContextCreateInput, PermissionContextUncheckedCreateInput>
    /**
     * In case the PermissionContext was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionContextUpdateInput, PermissionContextUncheckedUpdateInput>
  }

  /**
   * PermissionContext delete
   */
  export type PermissionContextDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionContext
     */
    select?: PermissionContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionContextInclude<ExtArgs> | null
    /**
     * Filter which PermissionContext to delete.
     */
    where: PermissionContextWhereUniqueInput
  }

  /**
   * PermissionContext deleteMany
   */
  export type PermissionContextDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PermissionContexts to delete
     */
    where?: PermissionContextWhereInput
  }

  /**
   * PermissionContext without action
   */
  export type PermissionContextDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionContext
     */
    select?: PermissionContextSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionContextInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    role: 'role',
    isActive: 'isActive',
    lastLogin: 'lastLogin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    emailVerified: 'emailVerified',
    emailVerifyToken: 'emailVerifyToken',
    emailVerifyExpires: 'emailVerifyExpires',
    passwordResetToken: 'passwordResetToken',
    passwordResetExpires: 'passwordResetExpires',
    failedLoginAttempts: 'failedLoginAttempts',
    accountLockedUntil: 'accountLockedUntil',
    lastFailedLogin: 'lastFailedLogin',
    passwordChangedAt: 'passwordChangedAt',
    mustChangePassword: 'mustChangePassword'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RefreshTokenScalarFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type RefreshTokenScalarFieldEnum = (typeof RefreshTokenScalarFieldEnum)[keyof typeof RefreshTokenScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    accountNumber: 'accountNumber',
    firstName: 'firstName',
    lastName: 'lastName',
    fullName: 'fullName',
    email: 'email',
    address1: 'address1',
    address2: 'address2',
    city: 'city',
    state: 'state',
    zipCode: 'zipCode',
    country: 'country',
    originalAmount: 'originalAmount',
    currentBalance: 'currentBalance',
    amountPaid: 'amountPaid',
    interestRate: 'interestRate',
    lastPaymentDate: 'lastPaymentDate',
    lastPaymentAmount: 'lastPaymentAmount',
    status: 'status',
    priority: 'priority',
    assignedAgentId: 'assignedAgentId',
    assignedDate: 'assignedDate',
    preferredContactMethod: 'preferredContactMethod',
    bestTimeToCall: 'bestTimeToCall',
    timezone: 'timezone',
    language: 'language',
    daysPastDue: 'daysPastDue',
    lastContactDate: 'lastContactDate',
    nextContactDate: 'nextContactDate',
    contactAttempts: 'contactAttempts',
    doNotCall: 'doNotCall',
    disputeFlag: 'disputeFlag',
    bankruptcyFlag: 'bankruptcyFlag',
    deceasedFlag: 'deceasedFlag',
    notes: 'notes',
    source: 'source',
    batchId: 'batchId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const AccountPhoneScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    phoneNumber: 'phoneNumber',
    phoneType: 'phoneType',
    isValid: 'isValid',
    doNotCall: 'doNotCall',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountPhoneScalarFieldEnum = (typeof AccountPhoneScalarFieldEnum)[keyof typeof AccountPhoneScalarFieldEnum]


  export const CallScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    accountPhoneId: 'accountPhoneId',
    agentId: 'agentId',
    direction: 'direction',
    startTime: 'startTime',
    endTime: 'endTime',
    duration: 'duration',
    status: 'status',
    disposition: 'disposition',
    notes: 'notes',
    followUpDate: 'followUpDate',
    amountPromised: 'amountPromised',
    amountCollected: 'amountCollected',
    recordingPath: 'recordingPath',
    callerId: 'callerId',
    campaignId: 'campaignId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CallScalarFieldEnum = (typeof CallScalarFieldEnum)[keyof typeof CallScalarFieldEnum]


  export const AccountActionScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    agentId: 'agentId',
    actionType: 'actionType',
    description: 'description',
    details: 'details',
    createdAt: 'createdAt'
  };

  export type AccountActionScalarFieldEnum = (typeof AccountActionScalarFieldEnum)[keyof typeof AccountActionScalarFieldEnum]


  export const UploadBatchScalarFieldEnum: {
    id: 'id',
    filename: 'filename',
    originalFilename: 'originalFilename',
    fileSize: 'fileSize',
    mimeType: 'mimeType',
    totalRecords: 'totalRecords',
    processedRecords: 'processedRecords',
    successCount: 'successCount',
    errorCount: 'errorCount',
    skipCount: 'skipCount',
    duplicateCount: 'duplicateCount',
    status: 'status',
    uploadedById: 'uploadedById',
    batchName: 'batchName',
    skipErrors: 'skipErrors',
    updateExisting: 'updateExisting',
    processingStarted: 'processingStarted',
    processingCompleted: 'processingCompleted',
    errorLog: 'errorLog',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UploadBatchScalarFieldEnum = (typeof UploadBatchScalarFieldEnum)[keyof typeof UploadBatchScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    isSystem: 'isSystem',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    category: 'category',
    resource: 'resource',
    action: 'action',
    isSystem: 'isSystem',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const RolePermissionScalarFieldEnum: {
    id: 'id',
    roleId: 'roleId',
    permissionId: 'permissionId',
    grantedAt: 'grantedAt',
    grantedById: 'grantedById',
    expiresAt: 'expiresAt'
  };

  export type RolePermissionScalarFieldEnum = (typeof RolePermissionScalarFieldEnum)[keyof typeof RolePermissionScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    roleId: 'roleId',
    assignedAt: 'assignedAt',
    assignedById: 'assignedById',
    expiresAt: 'expiresAt',
    isActive: 'isActive'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    actorId: 'actorId',
    action: 'action',
    entity: 'entity',
    entityId: 'entityId',
    oldValue: 'oldValue',
    newValue: 'newValue',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    sessionId: 'sessionId',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const DispositionCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    color: 'color',
    icon: 'icon',
    sortOrder: 'sortOrder',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DispositionCategoryScalarFieldEnum = (typeof DispositionCategoryScalarFieldEnum)[keyof typeof DispositionCategoryScalarFieldEnum]


  export const DispositionScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    categoryId: 'categoryId',
    requiresFollowUp: 'requiresFollowUp',
    requiresPayment: 'requiresPayment',
    requiresNotes: 'requiresNotes',
    isSuccessful: 'isSuccessful',
    sortOrder: 'sortOrder',
    isActive: 'isActive',
    usageCount: 'usageCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DispositionScalarFieldEnum = (typeof DispositionScalarFieldEnum)[keyof typeof DispositionScalarFieldEnum]


  export const UserMFAScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    secret: 'secret',
    backupCodes: 'backupCodes',
    isEnabled: 'isEnabled',
    lastUsedAt: 'lastUsedAt',
    setupAt: 'setupAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserMFAScalarFieldEnum = (typeof UserMFAScalarFieldEnum)[keyof typeof UserMFAScalarFieldEnum]


  export const UserSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    sessionToken: 'sessionToken',
    deviceFingerprint: 'deviceFingerprint',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    location: 'location',
    riskScore: 'riskScore',
    isActive: 'isActive',
    lastActivityAt: 'lastActivityAt',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    loginMethod: 'loginMethod',
    deviceType: 'deviceType',
    browserInfo: 'browserInfo'
  };

  export type UserSessionScalarFieldEnum = (typeof UserSessionScalarFieldEnum)[keyof typeof UserSessionScalarFieldEnum]


  export const EncryptionKeyScalarFieldEnum: {
    id: 'id',
    keyId: 'keyId',
    algorithm: 'algorithm',
    purpose: 'purpose',
    isActive: 'isActive',
    rotatedAt: 'rotatedAt',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    version: 'version'
  };

  export type EncryptionKeyScalarFieldEnum = (typeof EncryptionKeyScalarFieldEnum)[keyof typeof EncryptionKeyScalarFieldEnum]


  export const SecurityEventScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    sessionId: 'sessionId',
    eventType: 'eventType',
    severity: 'severity',
    description: 'description',
    details: 'details',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    location: 'location',
    riskScore: 'riskScore',
    isBlocked: 'isBlocked',
    resolvedAt: 'resolvedAt',
    resolvedById: 'resolvedById',
    createdAt: 'createdAt'
  };

  export type SecurityEventScalarFieldEnum = (typeof SecurityEventScalarFieldEnum)[keyof typeof SecurityEventScalarFieldEnum]


  export const PermissionContextScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    permissionId: 'permissionId',
    context: 'context',
    grantedAt: 'grantedAt',
    expiresAt: 'expiresAt',
    isActive: 'isActive',
    ipRange: 'ipRange',
    timeRestriction: 'timeRestriction',
    locationRestriction: 'locationRestriction',
    deviceRestriction: 'deviceRestriction'
  };

  export type PermissionContextScalarFieldEnum = (typeof PermissionContextScalarFieldEnum)[keyof typeof PermissionContextScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    emailVerified?: BoolFilter<"User"> | boolean
    emailVerifyToken?: StringNullableFilter<"User"> | string | null
    emailVerifyExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    passwordResetToken?: StringNullableFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    failedLoginAttempts?: IntFilter<"User"> | number
    accountLockedUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    lastFailedLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    passwordChangedAt?: DateTimeFilter<"User"> | Date | string
    mustChangePassword?: BoolFilter<"User"> | boolean
    accountActions?: AccountActionListRelationFilter
    assignedAccounts?: AccountListRelationFilter
    calls?: CallListRelationFilter
    refreshTokens?: RefreshTokenListRelationFilter
    uploadBatches?: UploadBatchListRelationFilter
    createdRoles?: RoleListRelationFilter
    userRoles?: UserRoleListRelationFilter
    assignedRoles?: UserRoleListRelationFilter
    grantedPermissions?: RolePermissionListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    mfaConfig?: XOR<UserMFANullableRelationFilter, UserMFAWhereInput> | null
    sessions?: UserSessionListRelationFilter
    securityEvents?: SecurityEventListRelationFilter
    resolvedSecurityEvents?: SecurityEventListRelationFilter
    permissionContexts?: PermissionContextListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    emailVerified?: SortOrder
    emailVerifyToken?: SortOrderInput | SortOrder
    emailVerifyExpires?: SortOrderInput | SortOrder
    passwordResetToken?: SortOrderInput | SortOrder
    passwordResetExpires?: SortOrderInput | SortOrder
    failedLoginAttempts?: SortOrder
    accountLockedUntil?: SortOrderInput | SortOrder
    lastFailedLogin?: SortOrderInput | SortOrder
    passwordChangedAt?: SortOrder
    mustChangePassword?: SortOrder
    accountActions?: AccountActionOrderByRelationAggregateInput
    assignedAccounts?: AccountOrderByRelationAggregateInput
    calls?: CallOrderByRelationAggregateInput
    refreshTokens?: RefreshTokenOrderByRelationAggregateInput
    uploadBatches?: UploadBatchOrderByRelationAggregateInput
    createdRoles?: RoleOrderByRelationAggregateInput
    userRoles?: UserRoleOrderByRelationAggregateInput
    assignedRoles?: UserRoleOrderByRelationAggregateInput
    grantedPermissions?: RolePermissionOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    mfaConfig?: UserMFAOrderByWithRelationInput
    sessions?: UserSessionOrderByRelationAggregateInput
    securityEvents?: SecurityEventOrderByRelationAggregateInput
    resolvedSecurityEvents?: SecurityEventOrderByRelationAggregateInput
    permissionContexts?: PermissionContextOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    emailVerifyToken?: string
    passwordResetToken?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    emailVerified?: BoolFilter<"User"> | boolean
    emailVerifyExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    passwordResetExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    failedLoginAttempts?: IntFilter<"User"> | number
    accountLockedUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    lastFailedLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    passwordChangedAt?: DateTimeFilter<"User"> | Date | string
    mustChangePassword?: BoolFilter<"User"> | boolean
    accountActions?: AccountActionListRelationFilter
    assignedAccounts?: AccountListRelationFilter
    calls?: CallListRelationFilter
    refreshTokens?: RefreshTokenListRelationFilter
    uploadBatches?: UploadBatchListRelationFilter
    createdRoles?: RoleListRelationFilter
    userRoles?: UserRoleListRelationFilter
    assignedRoles?: UserRoleListRelationFilter
    grantedPermissions?: RolePermissionListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    mfaConfig?: XOR<UserMFANullableRelationFilter, UserMFAWhereInput> | null
    sessions?: UserSessionListRelationFilter
    securityEvents?: SecurityEventListRelationFilter
    resolvedSecurityEvents?: SecurityEventListRelationFilter
    permissionContexts?: PermissionContextListRelationFilter
  }, "id" | "email" | "emailVerifyToken" | "passwordResetToken">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    emailVerified?: SortOrder
    emailVerifyToken?: SortOrderInput | SortOrder
    emailVerifyExpires?: SortOrderInput | SortOrder
    passwordResetToken?: SortOrderInput | SortOrder
    passwordResetExpires?: SortOrderInput | SortOrder
    failedLoginAttempts?: SortOrder
    accountLockedUntil?: SortOrderInput | SortOrder
    lastFailedLogin?: SortOrderInput | SortOrder
    passwordChangedAt?: SortOrder
    mustChangePassword?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    emailVerifyToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerifyExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    passwordResetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    failedLoginAttempts?: IntWithAggregatesFilter<"User"> | number
    accountLockedUntil?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastFailedLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    passwordChangedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    mustChangePassword?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type RefreshTokenWhereInput = {
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    id?: StringFilter<"RefreshToken"> | string
    token?: StringFilter<"RefreshToken"> | string
    userId?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RefreshTokenOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RefreshTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    userId?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type RefreshTokenOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: RefreshTokenCountOrderByAggregateInput
    _max?: RefreshTokenMaxOrderByAggregateInput
    _min?: RefreshTokenMinOrderByAggregateInput
  }

  export type RefreshTokenScalarWhereWithAggregatesInput = {
    AND?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    OR?: RefreshTokenScalarWhereWithAggregatesInput[]
    NOT?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RefreshToken"> | string
    token?: StringWithAggregatesFilter<"RefreshToken"> | string
    userId?: StringWithAggregatesFilter<"RefreshToken"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    accountNumber?: StringFilter<"Account"> | string
    firstName?: StringFilter<"Account"> | string
    lastName?: StringFilter<"Account"> | string
    fullName?: StringFilter<"Account"> | string
    email?: StringNullableFilter<"Account"> | string | null
    address1?: StringNullableFilter<"Account"> | string | null
    address2?: StringNullableFilter<"Account"> | string | null
    city?: StringNullableFilter<"Account"> | string | null
    state?: StringNullableFilter<"Account"> | string | null
    zipCode?: StringNullableFilter<"Account"> | string | null
    country?: StringNullableFilter<"Account"> | string | null
    originalAmount?: FloatFilter<"Account"> | number
    currentBalance?: FloatFilter<"Account"> | number
    amountPaid?: FloatFilter<"Account"> | number
    interestRate?: FloatNullableFilter<"Account"> | number | null
    lastPaymentDate?: DateTimeNullableFilter<"Account"> | Date | string | null
    lastPaymentAmount?: FloatNullableFilter<"Account"> | number | null
    status?: StringFilter<"Account"> | string
    priority?: StringFilter<"Account"> | string
    assignedAgentId?: StringNullableFilter<"Account"> | string | null
    assignedDate?: DateTimeNullableFilter<"Account"> | Date | string | null
    preferredContactMethod?: StringNullableFilter<"Account"> | string | null
    bestTimeToCall?: StringNullableFilter<"Account"> | string | null
    timezone?: StringNullableFilter<"Account"> | string | null
    language?: StringNullableFilter<"Account"> | string | null
    daysPastDue?: IntFilter<"Account"> | number
    lastContactDate?: DateTimeNullableFilter<"Account"> | Date | string | null
    nextContactDate?: DateTimeNullableFilter<"Account"> | Date | string | null
    contactAttempts?: IntFilter<"Account"> | number
    doNotCall?: BoolFilter<"Account"> | boolean
    disputeFlag?: BoolFilter<"Account"> | boolean
    bankruptcyFlag?: BoolFilter<"Account"> | boolean
    deceasedFlag?: BoolFilter<"Account"> | boolean
    notes?: StringNullableFilter<"Account"> | string | null
    source?: StringNullableFilter<"Account"> | string | null
    batchId?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    actions?: AccountActionListRelationFilter
    phoneNumbers?: AccountPhoneListRelationFilter
    assignedAgent?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    calls?: CallListRelationFilter
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    accountNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    fullName?: SortOrder
    email?: SortOrderInput | SortOrder
    address1?: SortOrderInput | SortOrder
    address2?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    originalAmount?: SortOrder
    currentBalance?: SortOrder
    amountPaid?: SortOrder
    interestRate?: SortOrderInput | SortOrder
    lastPaymentDate?: SortOrderInput | SortOrder
    lastPaymentAmount?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    assignedAgentId?: SortOrderInput | SortOrder
    assignedDate?: SortOrderInput | SortOrder
    preferredContactMethod?: SortOrderInput | SortOrder
    bestTimeToCall?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    daysPastDue?: SortOrder
    lastContactDate?: SortOrderInput | SortOrder
    nextContactDate?: SortOrderInput | SortOrder
    contactAttempts?: SortOrder
    doNotCall?: SortOrder
    disputeFlag?: SortOrder
    bankruptcyFlag?: SortOrder
    deceasedFlag?: SortOrder
    notes?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    batchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    actions?: AccountActionOrderByRelationAggregateInput
    phoneNumbers?: AccountPhoneOrderByRelationAggregateInput
    assignedAgent?: UserOrderByWithRelationInput
    calls?: CallOrderByRelationAggregateInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    accountNumber?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    firstName?: StringFilter<"Account"> | string
    lastName?: StringFilter<"Account"> | string
    fullName?: StringFilter<"Account"> | string
    email?: StringNullableFilter<"Account"> | string | null
    address1?: StringNullableFilter<"Account"> | string | null
    address2?: StringNullableFilter<"Account"> | string | null
    city?: StringNullableFilter<"Account"> | string | null
    state?: StringNullableFilter<"Account"> | string | null
    zipCode?: StringNullableFilter<"Account"> | string | null
    country?: StringNullableFilter<"Account"> | string | null
    originalAmount?: FloatFilter<"Account"> | number
    currentBalance?: FloatFilter<"Account"> | number
    amountPaid?: FloatFilter<"Account"> | number
    interestRate?: FloatNullableFilter<"Account"> | number | null
    lastPaymentDate?: DateTimeNullableFilter<"Account"> | Date | string | null
    lastPaymentAmount?: FloatNullableFilter<"Account"> | number | null
    status?: StringFilter<"Account"> | string
    priority?: StringFilter<"Account"> | string
    assignedAgentId?: StringNullableFilter<"Account"> | string | null
    assignedDate?: DateTimeNullableFilter<"Account"> | Date | string | null
    preferredContactMethod?: StringNullableFilter<"Account"> | string | null
    bestTimeToCall?: StringNullableFilter<"Account"> | string | null
    timezone?: StringNullableFilter<"Account"> | string | null
    language?: StringNullableFilter<"Account"> | string | null
    daysPastDue?: IntFilter<"Account"> | number
    lastContactDate?: DateTimeNullableFilter<"Account"> | Date | string | null
    nextContactDate?: DateTimeNullableFilter<"Account"> | Date | string | null
    contactAttempts?: IntFilter<"Account"> | number
    doNotCall?: BoolFilter<"Account"> | boolean
    disputeFlag?: BoolFilter<"Account"> | boolean
    bankruptcyFlag?: BoolFilter<"Account"> | boolean
    deceasedFlag?: BoolFilter<"Account"> | boolean
    notes?: StringNullableFilter<"Account"> | string | null
    source?: StringNullableFilter<"Account"> | string | null
    batchId?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    actions?: AccountActionListRelationFilter
    phoneNumbers?: AccountPhoneListRelationFilter
    assignedAgent?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    calls?: CallListRelationFilter
  }, "id" | "accountNumber">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    accountNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    fullName?: SortOrder
    email?: SortOrderInput | SortOrder
    address1?: SortOrderInput | SortOrder
    address2?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    originalAmount?: SortOrder
    currentBalance?: SortOrder
    amountPaid?: SortOrder
    interestRate?: SortOrderInput | SortOrder
    lastPaymentDate?: SortOrderInput | SortOrder
    lastPaymentAmount?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    assignedAgentId?: SortOrderInput | SortOrder
    assignedDate?: SortOrderInput | SortOrder
    preferredContactMethod?: SortOrderInput | SortOrder
    bestTimeToCall?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    daysPastDue?: SortOrder
    lastContactDate?: SortOrderInput | SortOrder
    nextContactDate?: SortOrderInput | SortOrder
    contactAttempts?: SortOrder
    doNotCall?: SortOrder
    disputeFlag?: SortOrder
    bankruptcyFlag?: SortOrder
    deceasedFlag?: SortOrder
    notes?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    batchId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    accountNumber?: StringWithAggregatesFilter<"Account"> | string
    firstName?: StringWithAggregatesFilter<"Account"> | string
    lastName?: StringWithAggregatesFilter<"Account"> | string
    fullName?: StringWithAggregatesFilter<"Account"> | string
    email?: StringNullableWithAggregatesFilter<"Account"> | string | null
    address1?: StringNullableWithAggregatesFilter<"Account"> | string | null
    address2?: StringNullableWithAggregatesFilter<"Account"> | string | null
    city?: StringNullableWithAggregatesFilter<"Account"> | string | null
    state?: StringNullableWithAggregatesFilter<"Account"> | string | null
    zipCode?: StringNullableWithAggregatesFilter<"Account"> | string | null
    country?: StringNullableWithAggregatesFilter<"Account"> | string | null
    originalAmount?: FloatWithAggregatesFilter<"Account"> | number
    currentBalance?: FloatWithAggregatesFilter<"Account"> | number
    amountPaid?: FloatWithAggregatesFilter<"Account"> | number
    interestRate?: FloatNullableWithAggregatesFilter<"Account"> | number | null
    lastPaymentDate?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    lastPaymentAmount?: FloatNullableWithAggregatesFilter<"Account"> | number | null
    status?: StringWithAggregatesFilter<"Account"> | string
    priority?: StringWithAggregatesFilter<"Account"> | string
    assignedAgentId?: StringNullableWithAggregatesFilter<"Account"> | string | null
    assignedDate?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    preferredContactMethod?: StringNullableWithAggregatesFilter<"Account"> | string | null
    bestTimeToCall?: StringNullableWithAggregatesFilter<"Account"> | string | null
    timezone?: StringNullableWithAggregatesFilter<"Account"> | string | null
    language?: StringNullableWithAggregatesFilter<"Account"> | string | null
    daysPastDue?: IntWithAggregatesFilter<"Account"> | number
    lastContactDate?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    nextContactDate?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    contactAttempts?: IntWithAggregatesFilter<"Account"> | number
    doNotCall?: BoolWithAggregatesFilter<"Account"> | boolean
    disputeFlag?: BoolWithAggregatesFilter<"Account"> | boolean
    bankruptcyFlag?: BoolWithAggregatesFilter<"Account"> | boolean
    deceasedFlag?: BoolWithAggregatesFilter<"Account"> | boolean
    notes?: StringNullableWithAggregatesFilter<"Account"> | string | null
    source?: StringNullableWithAggregatesFilter<"Account"> | string | null
    batchId?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type AccountPhoneWhereInput = {
    AND?: AccountPhoneWhereInput | AccountPhoneWhereInput[]
    OR?: AccountPhoneWhereInput[]
    NOT?: AccountPhoneWhereInput | AccountPhoneWhereInput[]
    id?: StringFilter<"AccountPhone"> | string
    accountId?: StringFilter<"AccountPhone"> | string
    phoneNumber?: StringFilter<"AccountPhone"> | string
    phoneType?: StringFilter<"AccountPhone"> | string
    isValid?: BoolFilter<"AccountPhone"> | boolean
    doNotCall?: BoolFilter<"AccountPhone"> | boolean
    notes?: StringNullableFilter<"AccountPhone"> | string | null
    createdAt?: DateTimeFilter<"AccountPhone"> | Date | string
    updatedAt?: DateTimeFilter<"AccountPhone"> | Date | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
    calls?: CallListRelationFilter
  }

  export type AccountPhoneOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    phoneNumber?: SortOrder
    phoneType?: SortOrder
    isValid?: SortOrder
    doNotCall?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    account?: AccountOrderByWithRelationInput
    calls?: CallOrderByRelationAggregateInput
  }

  export type AccountPhoneWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    accountId_phoneNumber?: AccountPhoneAccountIdPhoneNumberCompoundUniqueInput
    AND?: AccountPhoneWhereInput | AccountPhoneWhereInput[]
    OR?: AccountPhoneWhereInput[]
    NOT?: AccountPhoneWhereInput | AccountPhoneWhereInput[]
    accountId?: StringFilter<"AccountPhone"> | string
    phoneNumber?: StringFilter<"AccountPhone"> | string
    phoneType?: StringFilter<"AccountPhone"> | string
    isValid?: BoolFilter<"AccountPhone"> | boolean
    doNotCall?: BoolFilter<"AccountPhone"> | boolean
    notes?: StringNullableFilter<"AccountPhone"> | string | null
    createdAt?: DateTimeFilter<"AccountPhone"> | Date | string
    updatedAt?: DateTimeFilter<"AccountPhone"> | Date | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
    calls?: CallListRelationFilter
  }, "id" | "accountId_phoneNumber">

  export type AccountPhoneOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    phoneNumber?: SortOrder
    phoneType?: SortOrder
    isValid?: SortOrder
    doNotCall?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountPhoneCountOrderByAggregateInput
    _max?: AccountPhoneMaxOrderByAggregateInput
    _min?: AccountPhoneMinOrderByAggregateInput
  }

  export type AccountPhoneScalarWhereWithAggregatesInput = {
    AND?: AccountPhoneScalarWhereWithAggregatesInput | AccountPhoneScalarWhereWithAggregatesInput[]
    OR?: AccountPhoneScalarWhereWithAggregatesInput[]
    NOT?: AccountPhoneScalarWhereWithAggregatesInput | AccountPhoneScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AccountPhone"> | string
    accountId?: StringWithAggregatesFilter<"AccountPhone"> | string
    phoneNumber?: StringWithAggregatesFilter<"AccountPhone"> | string
    phoneType?: StringWithAggregatesFilter<"AccountPhone"> | string
    isValid?: BoolWithAggregatesFilter<"AccountPhone"> | boolean
    doNotCall?: BoolWithAggregatesFilter<"AccountPhone"> | boolean
    notes?: StringNullableWithAggregatesFilter<"AccountPhone"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AccountPhone"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AccountPhone"> | Date | string
  }

  export type CallWhereInput = {
    AND?: CallWhereInput | CallWhereInput[]
    OR?: CallWhereInput[]
    NOT?: CallWhereInput | CallWhereInput[]
    id?: StringFilter<"Call"> | string
    accountId?: StringFilter<"Call"> | string
    accountPhoneId?: StringNullableFilter<"Call"> | string | null
    agentId?: StringFilter<"Call"> | string
    direction?: StringFilter<"Call"> | string
    startTime?: DateTimeFilter<"Call"> | Date | string
    endTime?: DateTimeNullableFilter<"Call"> | Date | string | null
    duration?: IntNullableFilter<"Call"> | number | null
    status?: StringFilter<"Call"> | string
    disposition?: StringNullableFilter<"Call"> | string | null
    notes?: StringNullableFilter<"Call"> | string | null
    followUpDate?: DateTimeNullableFilter<"Call"> | Date | string | null
    amountPromised?: FloatNullableFilter<"Call"> | number | null
    amountCollected?: FloatNullableFilter<"Call"> | number | null
    recordingPath?: StringNullableFilter<"Call"> | string | null
    callerId?: StringNullableFilter<"Call"> | string | null
    campaignId?: StringNullableFilter<"Call"> | string | null
    createdAt?: DateTimeFilter<"Call"> | Date | string
    updatedAt?: DateTimeFilter<"Call"> | Date | string
    agent?: XOR<UserRelationFilter, UserWhereInput>
    accountPhone?: XOR<AccountPhoneNullableRelationFilter, AccountPhoneWhereInput> | null
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type CallOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    accountPhoneId?: SortOrderInput | SortOrder
    agentId?: SortOrder
    direction?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    status?: SortOrder
    disposition?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    followUpDate?: SortOrderInput | SortOrder
    amountPromised?: SortOrderInput | SortOrder
    amountCollected?: SortOrderInput | SortOrder
    recordingPath?: SortOrderInput | SortOrder
    callerId?: SortOrderInput | SortOrder
    campaignId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agent?: UserOrderByWithRelationInput
    accountPhone?: AccountPhoneOrderByWithRelationInput
    account?: AccountOrderByWithRelationInput
  }

  export type CallWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CallWhereInput | CallWhereInput[]
    OR?: CallWhereInput[]
    NOT?: CallWhereInput | CallWhereInput[]
    accountId?: StringFilter<"Call"> | string
    accountPhoneId?: StringNullableFilter<"Call"> | string | null
    agentId?: StringFilter<"Call"> | string
    direction?: StringFilter<"Call"> | string
    startTime?: DateTimeFilter<"Call"> | Date | string
    endTime?: DateTimeNullableFilter<"Call"> | Date | string | null
    duration?: IntNullableFilter<"Call"> | number | null
    status?: StringFilter<"Call"> | string
    disposition?: StringNullableFilter<"Call"> | string | null
    notes?: StringNullableFilter<"Call"> | string | null
    followUpDate?: DateTimeNullableFilter<"Call"> | Date | string | null
    amountPromised?: FloatNullableFilter<"Call"> | number | null
    amountCollected?: FloatNullableFilter<"Call"> | number | null
    recordingPath?: StringNullableFilter<"Call"> | string | null
    callerId?: StringNullableFilter<"Call"> | string | null
    campaignId?: StringNullableFilter<"Call"> | string | null
    createdAt?: DateTimeFilter<"Call"> | Date | string
    updatedAt?: DateTimeFilter<"Call"> | Date | string
    agent?: XOR<UserRelationFilter, UserWhereInput>
    accountPhone?: XOR<AccountPhoneNullableRelationFilter, AccountPhoneWhereInput> | null
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }, "id">

  export type CallOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    accountPhoneId?: SortOrderInput | SortOrder
    agentId?: SortOrder
    direction?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    status?: SortOrder
    disposition?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    followUpDate?: SortOrderInput | SortOrder
    amountPromised?: SortOrderInput | SortOrder
    amountCollected?: SortOrderInput | SortOrder
    recordingPath?: SortOrderInput | SortOrder
    callerId?: SortOrderInput | SortOrder
    campaignId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CallCountOrderByAggregateInput
    _avg?: CallAvgOrderByAggregateInput
    _max?: CallMaxOrderByAggregateInput
    _min?: CallMinOrderByAggregateInput
    _sum?: CallSumOrderByAggregateInput
  }

  export type CallScalarWhereWithAggregatesInput = {
    AND?: CallScalarWhereWithAggregatesInput | CallScalarWhereWithAggregatesInput[]
    OR?: CallScalarWhereWithAggregatesInput[]
    NOT?: CallScalarWhereWithAggregatesInput | CallScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Call"> | string
    accountId?: StringWithAggregatesFilter<"Call"> | string
    accountPhoneId?: StringNullableWithAggregatesFilter<"Call"> | string | null
    agentId?: StringWithAggregatesFilter<"Call"> | string
    direction?: StringWithAggregatesFilter<"Call"> | string
    startTime?: DateTimeWithAggregatesFilter<"Call"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"Call"> | Date | string | null
    duration?: IntNullableWithAggregatesFilter<"Call"> | number | null
    status?: StringWithAggregatesFilter<"Call"> | string
    disposition?: StringNullableWithAggregatesFilter<"Call"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Call"> | string | null
    followUpDate?: DateTimeNullableWithAggregatesFilter<"Call"> | Date | string | null
    amountPromised?: FloatNullableWithAggregatesFilter<"Call"> | number | null
    amountCollected?: FloatNullableWithAggregatesFilter<"Call"> | number | null
    recordingPath?: StringNullableWithAggregatesFilter<"Call"> | string | null
    callerId?: StringNullableWithAggregatesFilter<"Call"> | string | null
    campaignId?: StringNullableWithAggregatesFilter<"Call"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Call"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Call"> | Date | string
  }

  export type AccountActionWhereInput = {
    AND?: AccountActionWhereInput | AccountActionWhereInput[]
    OR?: AccountActionWhereInput[]
    NOT?: AccountActionWhereInput | AccountActionWhereInput[]
    id?: StringFilter<"AccountAction"> | string
    accountId?: StringFilter<"AccountAction"> | string
    agentId?: StringFilter<"AccountAction"> | string
    actionType?: StringFilter<"AccountAction"> | string
    description?: StringFilter<"AccountAction"> | string
    details?: StringNullableFilter<"AccountAction"> | string | null
    createdAt?: DateTimeFilter<"AccountAction"> | Date | string
    agent?: XOR<UserRelationFilter, UserWhereInput>
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type AccountActionOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    agentId?: SortOrder
    actionType?: SortOrder
    description?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    agent?: UserOrderByWithRelationInput
    account?: AccountOrderByWithRelationInput
  }

  export type AccountActionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountActionWhereInput | AccountActionWhereInput[]
    OR?: AccountActionWhereInput[]
    NOT?: AccountActionWhereInput | AccountActionWhereInput[]
    accountId?: StringFilter<"AccountAction"> | string
    agentId?: StringFilter<"AccountAction"> | string
    actionType?: StringFilter<"AccountAction"> | string
    description?: StringFilter<"AccountAction"> | string
    details?: StringNullableFilter<"AccountAction"> | string | null
    createdAt?: DateTimeFilter<"AccountAction"> | Date | string
    agent?: XOR<UserRelationFilter, UserWhereInput>
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }, "id">

  export type AccountActionOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    agentId?: SortOrder
    actionType?: SortOrder
    description?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AccountActionCountOrderByAggregateInput
    _max?: AccountActionMaxOrderByAggregateInput
    _min?: AccountActionMinOrderByAggregateInput
  }

  export type AccountActionScalarWhereWithAggregatesInput = {
    AND?: AccountActionScalarWhereWithAggregatesInput | AccountActionScalarWhereWithAggregatesInput[]
    OR?: AccountActionScalarWhereWithAggregatesInput[]
    NOT?: AccountActionScalarWhereWithAggregatesInput | AccountActionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AccountAction"> | string
    accountId?: StringWithAggregatesFilter<"AccountAction"> | string
    agentId?: StringWithAggregatesFilter<"AccountAction"> | string
    actionType?: StringWithAggregatesFilter<"AccountAction"> | string
    description?: StringWithAggregatesFilter<"AccountAction"> | string
    details?: StringNullableWithAggregatesFilter<"AccountAction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AccountAction"> | Date | string
  }

  export type UploadBatchWhereInput = {
    AND?: UploadBatchWhereInput | UploadBatchWhereInput[]
    OR?: UploadBatchWhereInput[]
    NOT?: UploadBatchWhereInput | UploadBatchWhereInput[]
    id?: StringFilter<"UploadBatch"> | string
    filename?: StringFilter<"UploadBatch"> | string
    originalFilename?: StringFilter<"UploadBatch"> | string
    fileSize?: IntFilter<"UploadBatch"> | number
    mimeType?: StringFilter<"UploadBatch"> | string
    totalRecords?: IntFilter<"UploadBatch"> | number
    processedRecords?: IntFilter<"UploadBatch"> | number
    successCount?: IntFilter<"UploadBatch"> | number
    errorCount?: IntFilter<"UploadBatch"> | number
    skipCount?: IntFilter<"UploadBatch"> | number
    duplicateCount?: IntFilter<"UploadBatch"> | number
    status?: StringFilter<"UploadBatch"> | string
    uploadedById?: StringFilter<"UploadBatch"> | string
    batchName?: StringNullableFilter<"UploadBatch"> | string | null
    skipErrors?: BoolFilter<"UploadBatch"> | boolean
    updateExisting?: BoolFilter<"UploadBatch"> | boolean
    processingStarted?: DateTimeNullableFilter<"UploadBatch"> | Date | string | null
    processingCompleted?: DateTimeNullableFilter<"UploadBatch"> | Date | string | null
    errorLog?: StringNullableFilter<"UploadBatch"> | string | null
    createdAt?: DateTimeFilter<"UploadBatch"> | Date | string
    updatedAt?: DateTimeFilter<"UploadBatch"> | Date | string
    uploadedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UploadBatchOrderByWithRelationInput = {
    id?: SortOrder
    filename?: SortOrder
    originalFilename?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    totalRecords?: SortOrder
    processedRecords?: SortOrder
    successCount?: SortOrder
    errorCount?: SortOrder
    skipCount?: SortOrder
    duplicateCount?: SortOrder
    status?: SortOrder
    uploadedById?: SortOrder
    batchName?: SortOrderInput | SortOrder
    skipErrors?: SortOrder
    updateExisting?: SortOrder
    processingStarted?: SortOrderInput | SortOrder
    processingCompleted?: SortOrderInput | SortOrder
    errorLog?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    uploadedBy?: UserOrderByWithRelationInput
  }

  export type UploadBatchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UploadBatchWhereInput | UploadBatchWhereInput[]
    OR?: UploadBatchWhereInput[]
    NOT?: UploadBatchWhereInput | UploadBatchWhereInput[]
    filename?: StringFilter<"UploadBatch"> | string
    originalFilename?: StringFilter<"UploadBatch"> | string
    fileSize?: IntFilter<"UploadBatch"> | number
    mimeType?: StringFilter<"UploadBatch"> | string
    totalRecords?: IntFilter<"UploadBatch"> | number
    processedRecords?: IntFilter<"UploadBatch"> | number
    successCount?: IntFilter<"UploadBatch"> | number
    errorCount?: IntFilter<"UploadBatch"> | number
    skipCount?: IntFilter<"UploadBatch"> | number
    duplicateCount?: IntFilter<"UploadBatch"> | number
    status?: StringFilter<"UploadBatch"> | string
    uploadedById?: StringFilter<"UploadBatch"> | string
    batchName?: StringNullableFilter<"UploadBatch"> | string | null
    skipErrors?: BoolFilter<"UploadBatch"> | boolean
    updateExisting?: BoolFilter<"UploadBatch"> | boolean
    processingStarted?: DateTimeNullableFilter<"UploadBatch"> | Date | string | null
    processingCompleted?: DateTimeNullableFilter<"UploadBatch"> | Date | string | null
    errorLog?: StringNullableFilter<"UploadBatch"> | string | null
    createdAt?: DateTimeFilter<"UploadBatch"> | Date | string
    updatedAt?: DateTimeFilter<"UploadBatch"> | Date | string
    uploadedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UploadBatchOrderByWithAggregationInput = {
    id?: SortOrder
    filename?: SortOrder
    originalFilename?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    totalRecords?: SortOrder
    processedRecords?: SortOrder
    successCount?: SortOrder
    errorCount?: SortOrder
    skipCount?: SortOrder
    duplicateCount?: SortOrder
    status?: SortOrder
    uploadedById?: SortOrder
    batchName?: SortOrderInput | SortOrder
    skipErrors?: SortOrder
    updateExisting?: SortOrder
    processingStarted?: SortOrderInput | SortOrder
    processingCompleted?: SortOrderInput | SortOrder
    errorLog?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UploadBatchCountOrderByAggregateInput
    _avg?: UploadBatchAvgOrderByAggregateInput
    _max?: UploadBatchMaxOrderByAggregateInput
    _min?: UploadBatchMinOrderByAggregateInput
    _sum?: UploadBatchSumOrderByAggregateInput
  }

  export type UploadBatchScalarWhereWithAggregatesInput = {
    AND?: UploadBatchScalarWhereWithAggregatesInput | UploadBatchScalarWhereWithAggregatesInput[]
    OR?: UploadBatchScalarWhereWithAggregatesInput[]
    NOT?: UploadBatchScalarWhereWithAggregatesInput | UploadBatchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UploadBatch"> | string
    filename?: StringWithAggregatesFilter<"UploadBatch"> | string
    originalFilename?: StringWithAggregatesFilter<"UploadBatch"> | string
    fileSize?: IntWithAggregatesFilter<"UploadBatch"> | number
    mimeType?: StringWithAggregatesFilter<"UploadBatch"> | string
    totalRecords?: IntWithAggregatesFilter<"UploadBatch"> | number
    processedRecords?: IntWithAggregatesFilter<"UploadBatch"> | number
    successCount?: IntWithAggregatesFilter<"UploadBatch"> | number
    errorCount?: IntWithAggregatesFilter<"UploadBatch"> | number
    skipCount?: IntWithAggregatesFilter<"UploadBatch"> | number
    duplicateCount?: IntWithAggregatesFilter<"UploadBatch"> | number
    status?: StringWithAggregatesFilter<"UploadBatch"> | string
    uploadedById?: StringWithAggregatesFilter<"UploadBatch"> | string
    batchName?: StringNullableWithAggregatesFilter<"UploadBatch"> | string | null
    skipErrors?: BoolWithAggregatesFilter<"UploadBatch"> | boolean
    updateExisting?: BoolWithAggregatesFilter<"UploadBatch"> | boolean
    processingStarted?: DateTimeNullableWithAggregatesFilter<"UploadBatch"> | Date | string | null
    processingCompleted?: DateTimeNullableWithAggregatesFilter<"UploadBatch"> | Date | string | null
    errorLog?: StringNullableWithAggregatesFilter<"UploadBatch"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UploadBatch"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UploadBatch"> | Date | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    description?: StringNullableFilter<"Role"> | string | null
    isSystem?: BoolFilter<"Role"> | boolean
    isActive?: BoolFilter<"Role"> | boolean
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    createdById?: StringNullableFilter<"Role"> | string | null
    permissions?: RolePermissionListRelationFilter
    userRoles?: UserRoleListRelationFilter
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isSystem?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    permissions?: RolePermissionOrderByRelationAggregateInput
    userRoles?: UserRoleOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    description?: StringNullableFilter<"Role"> | string | null
    isSystem?: BoolFilter<"Role"> | boolean
    isActive?: BoolFilter<"Role"> | boolean
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    createdById?: StringNullableFilter<"Role"> | string | null
    permissions?: RolePermissionListRelationFilter
    userRoles?: UserRoleListRelationFilter
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "name">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isSystem?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Role"> | string
    name?: StringWithAggregatesFilter<"Role"> | string
    description?: StringNullableWithAggregatesFilter<"Role"> | string | null
    isSystem?: BoolWithAggregatesFilter<"Role"> | boolean
    isActive?: BoolWithAggregatesFilter<"Role"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"Role"> | string | null
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: StringFilter<"Permission"> | string
    code?: StringFilter<"Permission"> | string
    name?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    category?: StringFilter<"Permission"> | string
    resource?: StringFilter<"Permission"> | string
    action?: StringFilter<"Permission"> | string
    isSystem?: BoolFilter<"Permission"> | boolean
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    rolePermissions?: RolePermissionListRelationFilter
    contexts?: PermissionContextListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    isSystem?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rolePermissions?: RolePermissionOrderByRelationAggregateInput
    contexts?: PermissionContextOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    name?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    category?: StringFilter<"Permission"> | string
    resource?: StringFilter<"Permission"> | string
    action?: StringFilter<"Permission"> | string
    isSystem?: BoolFilter<"Permission"> | boolean
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    rolePermissions?: RolePermissionListRelationFilter
    contexts?: PermissionContextListRelationFilter
  }, "id" | "code">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    isSystem?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Permission"> | string
    code?: StringWithAggregatesFilter<"Permission"> | string
    name?: StringWithAggregatesFilter<"Permission"> | string
    description?: StringNullableWithAggregatesFilter<"Permission"> | string | null
    category?: StringWithAggregatesFilter<"Permission"> | string
    resource?: StringWithAggregatesFilter<"Permission"> | string
    action?: StringWithAggregatesFilter<"Permission"> | string
    isSystem?: BoolWithAggregatesFilter<"Permission"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
  }

  export type RolePermissionWhereInput = {
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    id?: StringFilter<"RolePermission"> | string
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    grantedAt?: DateTimeFilter<"RolePermission"> | Date | string
    grantedById?: StringNullableFilter<"RolePermission"> | string | null
    expiresAt?: DateTimeNullableFilter<"RolePermission"> | Date | string | null
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
    grantedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type RolePermissionOrderByWithRelationInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    grantedAt?: SortOrder
    grantedById?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    role?: RoleOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
    grantedBy?: UserOrderByWithRelationInput
  }

  export type RolePermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    roleId_permissionId?: RolePermissionRoleIdPermissionIdCompoundUniqueInput
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    grantedAt?: DateTimeFilter<"RolePermission"> | Date | string
    grantedById?: StringNullableFilter<"RolePermission"> | string | null
    expiresAt?: DateTimeNullableFilter<"RolePermission"> | Date | string | null
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
    grantedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "roleId_permissionId">

  export type RolePermissionOrderByWithAggregationInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    grantedAt?: SortOrder
    grantedById?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    _count?: RolePermissionCountOrderByAggregateInput
    _max?: RolePermissionMaxOrderByAggregateInput
    _min?: RolePermissionMinOrderByAggregateInput
  }

  export type RolePermissionScalarWhereWithAggregatesInput = {
    AND?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    OR?: RolePermissionScalarWhereWithAggregatesInput[]
    NOT?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RolePermission"> | string
    roleId?: StringWithAggregatesFilter<"RolePermission"> | string
    permissionId?: StringWithAggregatesFilter<"RolePermission"> | string
    grantedAt?: DateTimeWithAggregatesFilter<"RolePermission"> | Date | string
    grantedById?: StringNullableWithAggregatesFilter<"RolePermission"> | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"RolePermission"> | Date | string | null
  }

  export type UserRoleWhereInput = {
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    id?: StringFilter<"UserRole"> | string
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    assignedAt?: DateTimeFilter<"UserRole"> | Date | string
    assignedById?: StringNullableFilter<"UserRole"> | string | null
    expiresAt?: DateTimeNullableFilter<"UserRole"> | Date | string | null
    isActive?: BoolFilter<"UserRole"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    assignedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type UserRoleOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    assignedAt?: SortOrder
    assignedById?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    user?: UserOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
    assignedBy?: UserOrderByWithRelationInput
  }

  export type UserRoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_roleId?: UserRoleUserIdRoleIdCompoundUniqueInput
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    assignedAt?: DateTimeFilter<"UserRole"> | Date | string
    assignedById?: StringNullableFilter<"UserRole"> | string | null
    expiresAt?: DateTimeNullableFilter<"UserRole"> | Date | string | null
    isActive?: BoolFilter<"UserRole"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    assignedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "userId_roleId">

  export type UserRoleOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    assignedAt?: SortOrder
    assignedById?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    _count?: UserRoleCountOrderByAggregateInput
    _max?: UserRoleMaxOrderByAggregateInput
    _min?: UserRoleMinOrderByAggregateInput
  }

  export type UserRoleScalarWhereWithAggregatesInput = {
    AND?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    OR?: UserRoleScalarWhereWithAggregatesInput[]
    NOT?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserRole"> | string
    userId?: StringWithAggregatesFilter<"UserRole"> | string
    roleId?: StringWithAggregatesFilter<"UserRole"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"UserRole"> | Date | string
    assignedById?: StringNullableWithAggregatesFilter<"UserRole"> | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"UserRole"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"UserRole"> | boolean
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    actorId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    oldValue?: StringNullableFilter<"AuditLog"> | string | null
    newValue?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    sessionId?: StringNullableFilter<"AuditLog"> | string | null
    metadata?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    actor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    actorId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    oldValue?: SortOrderInput | SortOrder
    newValue?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    actor?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    actorId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    oldValue?: StringNullableFilter<"AuditLog"> | string | null
    newValue?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    sessionId?: StringNullableFilter<"AuditLog"> | string | null
    metadata?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    actor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    actorId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    oldValue?: SortOrderInput | SortOrder
    newValue?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    actorId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entity?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    oldValue?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    newValue?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    sessionId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    metadata?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type DispositionCategoryWhereInput = {
    AND?: DispositionCategoryWhereInput | DispositionCategoryWhereInput[]
    OR?: DispositionCategoryWhereInput[]
    NOT?: DispositionCategoryWhereInput | DispositionCategoryWhereInput[]
    id?: StringFilter<"DispositionCategory"> | string
    name?: StringFilter<"DispositionCategory"> | string
    description?: StringNullableFilter<"DispositionCategory"> | string | null
    color?: StringNullableFilter<"DispositionCategory"> | string | null
    icon?: StringNullableFilter<"DispositionCategory"> | string | null
    sortOrder?: IntFilter<"DispositionCategory"> | number
    isActive?: BoolFilter<"DispositionCategory"> | boolean
    createdAt?: DateTimeFilter<"DispositionCategory"> | Date | string
    updatedAt?: DateTimeFilter<"DispositionCategory"> | Date | string
    dispositions?: DispositionListRelationFilter
  }

  export type DispositionCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    dispositions?: DispositionOrderByRelationAggregateInput
  }

  export type DispositionCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: DispositionCategoryWhereInput | DispositionCategoryWhereInput[]
    OR?: DispositionCategoryWhereInput[]
    NOT?: DispositionCategoryWhereInput | DispositionCategoryWhereInput[]
    description?: StringNullableFilter<"DispositionCategory"> | string | null
    color?: StringNullableFilter<"DispositionCategory"> | string | null
    icon?: StringNullableFilter<"DispositionCategory"> | string | null
    sortOrder?: IntFilter<"DispositionCategory"> | number
    isActive?: BoolFilter<"DispositionCategory"> | boolean
    createdAt?: DateTimeFilter<"DispositionCategory"> | Date | string
    updatedAt?: DateTimeFilter<"DispositionCategory"> | Date | string
    dispositions?: DispositionListRelationFilter
  }, "id" | "name">

  export type DispositionCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DispositionCategoryCountOrderByAggregateInput
    _avg?: DispositionCategoryAvgOrderByAggregateInput
    _max?: DispositionCategoryMaxOrderByAggregateInput
    _min?: DispositionCategoryMinOrderByAggregateInput
    _sum?: DispositionCategorySumOrderByAggregateInput
  }

  export type DispositionCategoryScalarWhereWithAggregatesInput = {
    AND?: DispositionCategoryScalarWhereWithAggregatesInput | DispositionCategoryScalarWhereWithAggregatesInput[]
    OR?: DispositionCategoryScalarWhereWithAggregatesInput[]
    NOT?: DispositionCategoryScalarWhereWithAggregatesInput | DispositionCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DispositionCategory"> | string
    name?: StringWithAggregatesFilter<"DispositionCategory"> | string
    description?: StringNullableWithAggregatesFilter<"DispositionCategory"> | string | null
    color?: StringNullableWithAggregatesFilter<"DispositionCategory"> | string | null
    icon?: StringNullableWithAggregatesFilter<"DispositionCategory"> | string | null
    sortOrder?: IntWithAggregatesFilter<"DispositionCategory"> | number
    isActive?: BoolWithAggregatesFilter<"DispositionCategory"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"DispositionCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DispositionCategory"> | Date | string
  }

  export type DispositionWhereInput = {
    AND?: DispositionWhereInput | DispositionWhereInput[]
    OR?: DispositionWhereInput[]
    NOT?: DispositionWhereInput | DispositionWhereInput[]
    id?: StringFilter<"Disposition"> | string
    code?: StringFilter<"Disposition"> | string
    name?: StringFilter<"Disposition"> | string
    description?: StringNullableFilter<"Disposition"> | string | null
    categoryId?: StringFilter<"Disposition"> | string
    requiresFollowUp?: BoolFilter<"Disposition"> | boolean
    requiresPayment?: BoolFilter<"Disposition"> | boolean
    requiresNotes?: BoolFilter<"Disposition"> | boolean
    isSuccessful?: BoolFilter<"Disposition"> | boolean
    sortOrder?: IntFilter<"Disposition"> | number
    isActive?: BoolFilter<"Disposition"> | boolean
    usageCount?: IntFilter<"Disposition"> | number
    createdAt?: DateTimeFilter<"Disposition"> | Date | string
    updatedAt?: DateTimeFilter<"Disposition"> | Date | string
    category?: XOR<DispositionCategoryRelationFilter, DispositionCategoryWhereInput>
  }

  export type DispositionOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    requiresFollowUp?: SortOrder
    requiresPayment?: SortOrder
    requiresNotes?: SortOrder
    isSuccessful?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    usageCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: DispositionCategoryOrderByWithRelationInput
  }

  export type DispositionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: DispositionWhereInput | DispositionWhereInput[]
    OR?: DispositionWhereInput[]
    NOT?: DispositionWhereInput | DispositionWhereInput[]
    name?: StringFilter<"Disposition"> | string
    description?: StringNullableFilter<"Disposition"> | string | null
    categoryId?: StringFilter<"Disposition"> | string
    requiresFollowUp?: BoolFilter<"Disposition"> | boolean
    requiresPayment?: BoolFilter<"Disposition"> | boolean
    requiresNotes?: BoolFilter<"Disposition"> | boolean
    isSuccessful?: BoolFilter<"Disposition"> | boolean
    sortOrder?: IntFilter<"Disposition"> | number
    isActive?: BoolFilter<"Disposition"> | boolean
    usageCount?: IntFilter<"Disposition"> | number
    createdAt?: DateTimeFilter<"Disposition"> | Date | string
    updatedAt?: DateTimeFilter<"Disposition"> | Date | string
    category?: XOR<DispositionCategoryRelationFilter, DispositionCategoryWhereInput>
  }, "id" | "code">

  export type DispositionOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    requiresFollowUp?: SortOrder
    requiresPayment?: SortOrder
    requiresNotes?: SortOrder
    isSuccessful?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    usageCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DispositionCountOrderByAggregateInput
    _avg?: DispositionAvgOrderByAggregateInput
    _max?: DispositionMaxOrderByAggregateInput
    _min?: DispositionMinOrderByAggregateInput
    _sum?: DispositionSumOrderByAggregateInput
  }

  export type DispositionScalarWhereWithAggregatesInput = {
    AND?: DispositionScalarWhereWithAggregatesInput | DispositionScalarWhereWithAggregatesInput[]
    OR?: DispositionScalarWhereWithAggregatesInput[]
    NOT?: DispositionScalarWhereWithAggregatesInput | DispositionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Disposition"> | string
    code?: StringWithAggregatesFilter<"Disposition"> | string
    name?: StringWithAggregatesFilter<"Disposition"> | string
    description?: StringNullableWithAggregatesFilter<"Disposition"> | string | null
    categoryId?: StringWithAggregatesFilter<"Disposition"> | string
    requiresFollowUp?: BoolWithAggregatesFilter<"Disposition"> | boolean
    requiresPayment?: BoolWithAggregatesFilter<"Disposition"> | boolean
    requiresNotes?: BoolWithAggregatesFilter<"Disposition"> | boolean
    isSuccessful?: BoolWithAggregatesFilter<"Disposition"> | boolean
    sortOrder?: IntWithAggregatesFilter<"Disposition"> | number
    isActive?: BoolWithAggregatesFilter<"Disposition"> | boolean
    usageCount?: IntWithAggregatesFilter<"Disposition"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Disposition"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Disposition"> | Date | string
  }

  export type UserMFAWhereInput = {
    AND?: UserMFAWhereInput | UserMFAWhereInput[]
    OR?: UserMFAWhereInput[]
    NOT?: UserMFAWhereInput | UserMFAWhereInput[]
    id?: StringFilter<"UserMFA"> | string
    userId?: StringFilter<"UserMFA"> | string
    secret?: StringFilter<"UserMFA"> | string
    backupCodes?: StringNullableFilter<"UserMFA"> | string | null
    isEnabled?: BoolFilter<"UserMFA"> | boolean
    lastUsedAt?: DateTimeNullableFilter<"UserMFA"> | Date | string | null
    setupAt?: DateTimeFilter<"UserMFA"> | Date | string
    createdAt?: DateTimeFilter<"UserMFA"> | Date | string
    updatedAt?: DateTimeFilter<"UserMFA"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserMFAOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    secret?: SortOrder
    backupCodes?: SortOrderInput | SortOrder
    isEnabled?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    setupAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserMFAWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserMFAWhereInput | UserMFAWhereInput[]
    OR?: UserMFAWhereInput[]
    NOT?: UserMFAWhereInput | UserMFAWhereInput[]
    secret?: StringFilter<"UserMFA"> | string
    backupCodes?: StringNullableFilter<"UserMFA"> | string | null
    isEnabled?: BoolFilter<"UserMFA"> | boolean
    lastUsedAt?: DateTimeNullableFilter<"UserMFA"> | Date | string | null
    setupAt?: DateTimeFilter<"UserMFA"> | Date | string
    createdAt?: DateTimeFilter<"UserMFA"> | Date | string
    updatedAt?: DateTimeFilter<"UserMFA"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserMFAOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    secret?: SortOrder
    backupCodes?: SortOrderInput | SortOrder
    isEnabled?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    setupAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserMFACountOrderByAggregateInput
    _max?: UserMFAMaxOrderByAggregateInput
    _min?: UserMFAMinOrderByAggregateInput
  }

  export type UserMFAScalarWhereWithAggregatesInput = {
    AND?: UserMFAScalarWhereWithAggregatesInput | UserMFAScalarWhereWithAggregatesInput[]
    OR?: UserMFAScalarWhereWithAggregatesInput[]
    NOT?: UserMFAScalarWhereWithAggregatesInput | UserMFAScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserMFA"> | string
    userId?: StringWithAggregatesFilter<"UserMFA"> | string
    secret?: StringWithAggregatesFilter<"UserMFA"> | string
    backupCodes?: StringNullableWithAggregatesFilter<"UserMFA"> | string | null
    isEnabled?: BoolWithAggregatesFilter<"UserMFA"> | boolean
    lastUsedAt?: DateTimeNullableWithAggregatesFilter<"UserMFA"> | Date | string | null
    setupAt?: DateTimeWithAggregatesFilter<"UserMFA"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UserMFA"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserMFA"> | Date | string
  }

  export type UserSessionWhereInput = {
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    sessionToken?: StringFilter<"UserSession"> | string
    deviceFingerprint?: StringFilter<"UserSession"> | string
    ipAddress?: StringFilter<"UserSession"> | string
    userAgent?: StringFilter<"UserSession"> | string
    location?: StringNullableFilter<"UserSession"> | string | null
    riskScore?: FloatFilter<"UserSession"> | number
    isActive?: BoolFilter<"UserSession"> | boolean
    lastActivityAt?: DateTimeFilter<"UserSession"> | Date | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    loginMethod?: StringNullableFilter<"UserSession"> | string | null
    deviceType?: StringNullableFilter<"UserSession"> | string | null
    browserInfo?: StringNullableFilter<"UserSession"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionToken?: SortOrder
    deviceFingerprint?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    location?: SortOrderInput | SortOrder
    riskScore?: SortOrder
    isActive?: SortOrder
    lastActivityAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    loginMethod?: SortOrderInput | SortOrder
    deviceType?: SortOrderInput | SortOrder
    browserInfo?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    userId?: StringFilter<"UserSession"> | string
    deviceFingerprint?: StringFilter<"UserSession"> | string
    ipAddress?: StringFilter<"UserSession"> | string
    userAgent?: StringFilter<"UserSession"> | string
    location?: StringNullableFilter<"UserSession"> | string | null
    riskScore?: FloatFilter<"UserSession"> | number
    isActive?: BoolFilter<"UserSession"> | boolean
    lastActivityAt?: DateTimeFilter<"UserSession"> | Date | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    loginMethod?: StringNullableFilter<"UserSession"> | string | null
    deviceType?: StringNullableFilter<"UserSession"> | string | null
    browserInfo?: StringNullableFilter<"UserSession"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type UserSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionToken?: SortOrder
    deviceFingerprint?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    location?: SortOrderInput | SortOrder
    riskScore?: SortOrder
    isActive?: SortOrder
    lastActivityAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    loginMethod?: SortOrderInput | SortOrder
    deviceType?: SortOrderInput | SortOrder
    browserInfo?: SortOrderInput | SortOrder
    _count?: UserSessionCountOrderByAggregateInput
    _avg?: UserSessionAvgOrderByAggregateInput
    _max?: UserSessionMaxOrderByAggregateInput
    _min?: UserSessionMinOrderByAggregateInput
    _sum?: UserSessionSumOrderByAggregateInput
  }

  export type UserSessionScalarWhereWithAggregatesInput = {
    AND?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    OR?: UserSessionScalarWhereWithAggregatesInput[]
    NOT?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSession"> | string
    userId?: StringWithAggregatesFilter<"UserSession"> | string
    sessionToken?: StringWithAggregatesFilter<"UserSession"> | string
    deviceFingerprint?: StringWithAggregatesFilter<"UserSession"> | string
    ipAddress?: StringWithAggregatesFilter<"UserSession"> | string
    userAgent?: StringWithAggregatesFilter<"UserSession"> | string
    location?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    riskScore?: FloatWithAggregatesFilter<"UserSession"> | number
    isActive?: BoolWithAggregatesFilter<"UserSession"> | boolean
    lastActivityAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    loginMethod?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    deviceType?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    browserInfo?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
  }

  export type EncryptionKeyWhereInput = {
    AND?: EncryptionKeyWhereInput | EncryptionKeyWhereInput[]
    OR?: EncryptionKeyWhereInput[]
    NOT?: EncryptionKeyWhereInput | EncryptionKeyWhereInput[]
    id?: StringFilter<"EncryptionKey"> | string
    keyId?: StringFilter<"EncryptionKey"> | string
    algorithm?: StringFilter<"EncryptionKey"> | string
    purpose?: StringFilter<"EncryptionKey"> | string
    isActive?: BoolFilter<"EncryptionKey"> | boolean
    rotatedAt?: DateTimeNullableFilter<"EncryptionKey"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"EncryptionKey"> | Date | string | null
    createdAt?: DateTimeFilter<"EncryptionKey"> | Date | string
    version?: IntFilter<"EncryptionKey"> | number
  }

  export type EncryptionKeyOrderByWithRelationInput = {
    id?: SortOrder
    keyId?: SortOrder
    algorithm?: SortOrder
    purpose?: SortOrder
    isActive?: SortOrder
    rotatedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    version?: SortOrder
  }

  export type EncryptionKeyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    keyId?: string
    AND?: EncryptionKeyWhereInput | EncryptionKeyWhereInput[]
    OR?: EncryptionKeyWhereInput[]
    NOT?: EncryptionKeyWhereInput | EncryptionKeyWhereInput[]
    algorithm?: StringFilter<"EncryptionKey"> | string
    purpose?: StringFilter<"EncryptionKey"> | string
    isActive?: BoolFilter<"EncryptionKey"> | boolean
    rotatedAt?: DateTimeNullableFilter<"EncryptionKey"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"EncryptionKey"> | Date | string | null
    createdAt?: DateTimeFilter<"EncryptionKey"> | Date | string
    version?: IntFilter<"EncryptionKey"> | number
  }, "id" | "keyId">

  export type EncryptionKeyOrderByWithAggregationInput = {
    id?: SortOrder
    keyId?: SortOrder
    algorithm?: SortOrder
    purpose?: SortOrder
    isActive?: SortOrder
    rotatedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    version?: SortOrder
    _count?: EncryptionKeyCountOrderByAggregateInput
    _avg?: EncryptionKeyAvgOrderByAggregateInput
    _max?: EncryptionKeyMaxOrderByAggregateInput
    _min?: EncryptionKeyMinOrderByAggregateInput
    _sum?: EncryptionKeySumOrderByAggregateInput
  }

  export type EncryptionKeyScalarWhereWithAggregatesInput = {
    AND?: EncryptionKeyScalarWhereWithAggregatesInput | EncryptionKeyScalarWhereWithAggregatesInput[]
    OR?: EncryptionKeyScalarWhereWithAggregatesInput[]
    NOT?: EncryptionKeyScalarWhereWithAggregatesInput | EncryptionKeyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EncryptionKey"> | string
    keyId?: StringWithAggregatesFilter<"EncryptionKey"> | string
    algorithm?: StringWithAggregatesFilter<"EncryptionKey"> | string
    purpose?: StringWithAggregatesFilter<"EncryptionKey"> | string
    isActive?: BoolWithAggregatesFilter<"EncryptionKey"> | boolean
    rotatedAt?: DateTimeNullableWithAggregatesFilter<"EncryptionKey"> | Date | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"EncryptionKey"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EncryptionKey"> | Date | string
    version?: IntWithAggregatesFilter<"EncryptionKey"> | number
  }

  export type SecurityEventWhereInput = {
    AND?: SecurityEventWhereInput | SecurityEventWhereInput[]
    OR?: SecurityEventWhereInput[]
    NOT?: SecurityEventWhereInput | SecurityEventWhereInput[]
    id?: StringFilter<"SecurityEvent"> | string
    userId?: StringNullableFilter<"SecurityEvent"> | string | null
    sessionId?: StringNullableFilter<"SecurityEvent"> | string | null
    eventType?: StringFilter<"SecurityEvent"> | string
    severity?: StringFilter<"SecurityEvent"> | string
    description?: StringFilter<"SecurityEvent"> | string
    details?: StringNullableFilter<"SecurityEvent"> | string | null
    ipAddress?: StringNullableFilter<"SecurityEvent"> | string | null
    userAgent?: StringNullableFilter<"SecurityEvent"> | string | null
    location?: StringNullableFilter<"SecurityEvent"> | string | null
    riskScore?: FloatFilter<"SecurityEvent"> | number
    isBlocked?: BoolFilter<"SecurityEvent"> | boolean
    resolvedAt?: DateTimeNullableFilter<"SecurityEvent"> | Date | string | null
    resolvedById?: StringNullableFilter<"SecurityEvent"> | string | null
    createdAt?: DateTimeFilter<"SecurityEvent"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    resolvedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type SecurityEventOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    eventType?: SortOrder
    severity?: SortOrder
    description?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    riskScore?: SortOrder
    isBlocked?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    resolvedById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    resolvedBy?: UserOrderByWithRelationInput
  }

  export type SecurityEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SecurityEventWhereInput | SecurityEventWhereInput[]
    OR?: SecurityEventWhereInput[]
    NOT?: SecurityEventWhereInput | SecurityEventWhereInput[]
    userId?: StringNullableFilter<"SecurityEvent"> | string | null
    sessionId?: StringNullableFilter<"SecurityEvent"> | string | null
    eventType?: StringFilter<"SecurityEvent"> | string
    severity?: StringFilter<"SecurityEvent"> | string
    description?: StringFilter<"SecurityEvent"> | string
    details?: StringNullableFilter<"SecurityEvent"> | string | null
    ipAddress?: StringNullableFilter<"SecurityEvent"> | string | null
    userAgent?: StringNullableFilter<"SecurityEvent"> | string | null
    location?: StringNullableFilter<"SecurityEvent"> | string | null
    riskScore?: FloatFilter<"SecurityEvent"> | number
    isBlocked?: BoolFilter<"SecurityEvent"> | boolean
    resolvedAt?: DateTimeNullableFilter<"SecurityEvent"> | Date | string | null
    resolvedById?: StringNullableFilter<"SecurityEvent"> | string | null
    createdAt?: DateTimeFilter<"SecurityEvent"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    resolvedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type SecurityEventOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    eventType?: SortOrder
    severity?: SortOrder
    description?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    riskScore?: SortOrder
    isBlocked?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    resolvedById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SecurityEventCountOrderByAggregateInput
    _avg?: SecurityEventAvgOrderByAggregateInput
    _max?: SecurityEventMaxOrderByAggregateInput
    _min?: SecurityEventMinOrderByAggregateInput
    _sum?: SecurityEventSumOrderByAggregateInput
  }

  export type SecurityEventScalarWhereWithAggregatesInput = {
    AND?: SecurityEventScalarWhereWithAggregatesInput | SecurityEventScalarWhereWithAggregatesInput[]
    OR?: SecurityEventScalarWhereWithAggregatesInput[]
    NOT?: SecurityEventScalarWhereWithAggregatesInput | SecurityEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SecurityEvent"> | string
    userId?: StringNullableWithAggregatesFilter<"SecurityEvent"> | string | null
    sessionId?: StringNullableWithAggregatesFilter<"SecurityEvent"> | string | null
    eventType?: StringWithAggregatesFilter<"SecurityEvent"> | string
    severity?: StringWithAggregatesFilter<"SecurityEvent"> | string
    description?: StringWithAggregatesFilter<"SecurityEvent"> | string
    details?: StringNullableWithAggregatesFilter<"SecurityEvent"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"SecurityEvent"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"SecurityEvent"> | string | null
    location?: StringNullableWithAggregatesFilter<"SecurityEvent"> | string | null
    riskScore?: FloatWithAggregatesFilter<"SecurityEvent"> | number
    isBlocked?: BoolWithAggregatesFilter<"SecurityEvent"> | boolean
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"SecurityEvent"> | Date | string | null
    resolvedById?: StringNullableWithAggregatesFilter<"SecurityEvent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SecurityEvent"> | Date | string
  }

  export type PermissionContextWhereInput = {
    AND?: PermissionContextWhereInput | PermissionContextWhereInput[]
    OR?: PermissionContextWhereInput[]
    NOT?: PermissionContextWhereInput | PermissionContextWhereInput[]
    id?: StringFilter<"PermissionContext"> | string
    userId?: StringFilter<"PermissionContext"> | string
    permissionId?: StringFilter<"PermissionContext"> | string
    context?: StringFilter<"PermissionContext"> | string
    grantedAt?: DateTimeFilter<"PermissionContext"> | Date | string
    expiresAt?: DateTimeNullableFilter<"PermissionContext"> | Date | string | null
    isActive?: BoolFilter<"PermissionContext"> | boolean
    ipRange?: StringNullableFilter<"PermissionContext"> | string | null
    timeRestriction?: StringNullableFilter<"PermissionContext"> | string | null
    locationRestriction?: StringNullableFilter<"PermissionContext"> | string | null
    deviceRestriction?: StringNullableFilter<"PermissionContext"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }

  export type PermissionContextOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    context?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    ipRange?: SortOrderInput | SortOrder
    timeRestriction?: SortOrderInput | SortOrder
    locationRestriction?: SortOrderInput | SortOrder
    deviceRestriction?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
  }

  export type PermissionContextWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_permissionId?: PermissionContextUserIdPermissionIdCompoundUniqueInput
    AND?: PermissionContextWhereInput | PermissionContextWhereInput[]
    OR?: PermissionContextWhereInput[]
    NOT?: PermissionContextWhereInput | PermissionContextWhereInput[]
    userId?: StringFilter<"PermissionContext"> | string
    permissionId?: StringFilter<"PermissionContext"> | string
    context?: StringFilter<"PermissionContext"> | string
    grantedAt?: DateTimeFilter<"PermissionContext"> | Date | string
    expiresAt?: DateTimeNullableFilter<"PermissionContext"> | Date | string | null
    isActive?: BoolFilter<"PermissionContext"> | boolean
    ipRange?: StringNullableFilter<"PermissionContext"> | string | null
    timeRestriction?: StringNullableFilter<"PermissionContext"> | string | null
    locationRestriction?: StringNullableFilter<"PermissionContext"> | string | null
    deviceRestriction?: StringNullableFilter<"PermissionContext"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }, "id" | "userId_permissionId">

  export type PermissionContextOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    context?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    ipRange?: SortOrderInput | SortOrder
    timeRestriction?: SortOrderInput | SortOrder
    locationRestriction?: SortOrderInput | SortOrder
    deviceRestriction?: SortOrderInput | SortOrder
    _count?: PermissionContextCountOrderByAggregateInput
    _max?: PermissionContextMaxOrderByAggregateInput
    _min?: PermissionContextMinOrderByAggregateInput
  }

  export type PermissionContextScalarWhereWithAggregatesInput = {
    AND?: PermissionContextScalarWhereWithAggregatesInput | PermissionContextScalarWhereWithAggregatesInput[]
    OR?: PermissionContextScalarWhereWithAggregatesInput[]
    NOT?: PermissionContextScalarWhereWithAggregatesInput | PermissionContextScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PermissionContext"> | string
    userId?: StringWithAggregatesFilter<"PermissionContext"> | string
    permissionId?: StringWithAggregatesFilter<"PermissionContext"> | string
    context?: StringWithAggregatesFilter<"PermissionContext"> | string
    grantedAt?: DateTimeWithAggregatesFilter<"PermissionContext"> | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"PermissionContext"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"PermissionContext"> | boolean
    ipRange?: StringNullableWithAggregatesFilter<"PermissionContext"> | string | null
    timeRestriction?: StringNullableWithAggregatesFilter<"PermissionContext"> | string | null
    locationRestriction?: StringNullableWithAggregatesFilter<"PermissionContext"> | string | null
    deviceRestriction?: StringNullableWithAggregatesFilter<"PermissionContext"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountCreateNestedManyWithoutAssignedAgentInput
    calls?: CallCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFACreateNestedOneWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionUncheckedCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountUncheckedCreateNestedManyWithoutAssignedAgentInput
    calls?: CallUncheckedCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleUncheckedCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFAUncheckedCreateNestedOneWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventUncheckedCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUncheckedUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUncheckedUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUncheckedUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUncheckedUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RefreshTokenCreateInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRefreshTokensInput
  }

  export type RefreshTokenUncheckedCreateInput = {
    id?: string
    token: string
    userId: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRefreshTokensNestedInput
  }

  export type RefreshTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenCreateManyInput = {
    id?: string
    token: string
    userId: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    accountNumber: string
    firstName: string
    lastName: string
    fullName: string
    email?: string | null
    address1?: string | null
    address2?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    originalAmount: number
    currentBalance: number
    amountPaid?: number
    interestRate?: number | null
    lastPaymentDate?: Date | string | null
    lastPaymentAmount?: number | null
    status?: string
    priority?: string
    assignedDate?: Date | string | null
    preferredContactMethod?: string | null
    bestTimeToCall?: string | null
    timezone?: string | null
    language?: string | null
    daysPastDue?: number
    lastContactDate?: Date | string | null
    nextContactDate?: Date | string | null
    contactAttempts?: number
    doNotCall?: boolean
    disputeFlag?: boolean
    bankruptcyFlag?: boolean
    deceasedFlag?: boolean
    notes?: string | null
    source?: string | null
    batchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    actions?: AccountActionCreateNestedManyWithoutAccountInput
    phoneNumbers?: AccountPhoneCreateNestedManyWithoutAccountInput
    assignedAgent?: UserCreateNestedOneWithoutAssignedAccountsInput
    calls?: CallCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    accountNumber: string
    firstName: string
    lastName: string
    fullName: string
    email?: string | null
    address1?: string | null
    address2?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    originalAmount: number
    currentBalance: number
    amountPaid?: number
    interestRate?: number | null
    lastPaymentDate?: Date | string | null
    lastPaymentAmount?: number | null
    status?: string
    priority?: string
    assignedAgentId?: string | null
    assignedDate?: Date | string | null
    preferredContactMethod?: string | null
    bestTimeToCall?: string | null
    timezone?: string | null
    language?: string | null
    daysPastDue?: number
    lastContactDate?: Date | string | null
    nextContactDate?: Date | string | null
    contactAttempts?: number
    doNotCall?: boolean
    disputeFlag?: boolean
    bankruptcyFlag?: boolean
    deceasedFlag?: boolean
    notes?: string | null
    source?: string | null
    batchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    actions?: AccountActionUncheckedCreateNestedManyWithoutAccountInput
    phoneNumbers?: AccountPhoneUncheckedCreateNestedManyWithoutAccountInput
    calls?: CallUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    originalAmount?: FloatFieldUpdateOperationsInput | number
    currentBalance?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    assignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    bestTimeToCall?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    daysPastDue?: IntFieldUpdateOperationsInput | number
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactAttempts?: IntFieldUpdateOperationsInput | number
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    disputeFlag?: BoolFieldUpdateOperationsInput | boolean
    bankruptcyFlag?: BoolFieldUpdateOperationsInput | boolean
    deceasedFlag?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: AccountActionUpdateManyWithoutAccountNestedInput
    phoneNumbers?: AccountPhoneUpdateManyWithoutAccountNestedInput
    assignedAgent?: UserUpdateOneWithoutAssignedAccountsNestedInput
    calls?: CallUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    originalAmount?: FloatFieldUpdateOperationsInput | number
    currentBalance?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    bestTimeToCall?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    daysPastDue?: IntFieldUpdateOperationsInput | number
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactAttempts?: IntFieldUpdateOperationsInput | number
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    disputeFlag?: BoolFieldUpdateOperationsInput | boolean
    bankruptcyFlag?: BoolFieldUpdateOperationsInput | boolean
    deceasedFlag?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: AccountActionUncheckedUpdateManyWithoutAccountNestedInput
    phoneNumbers?: AccountPhoneUncheckedUpdateManyWithoutAccountNestedInput
    calls?: CallUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountCreateManyInput = {
    id?: string
    accountNumber: string
    firstName: string
    lastName: string
    fullName: string
    email?: string | null
    address1?: string | null
    address2?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    originalAmount: number
    currentBalance: number
    amountPaid?: number
    interestRate?: number | null
    lastPaymentDate?: Date | string | null
    lastPaymentAmount?: number | null
    status?: string
    priority?: string
    assignedAgentId?: string | null
    assignedDate?: Date | string | null
    preferredContactMethod?: string | null
    bestTimeToCall?: string | null
    timezone?: string | null
    language?: string | null
    daysPastDue?: number
    lastContactDate?: Date | string | null
    nextContactDate?: Date | string | null
    contactAttempts?: number
    doNotCall?: boolean
    disputeFlag?: boolean
    bankruptcyFlag?: boolean
    deceasedFlag?: boolean
    notes?: string | null
    source?: string | null
    batchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    originalAmount?: FloatFieldUpdateOperationsInput | number
    currentBalance?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    assignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    bestTimeToCall?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    daysPastDue?: IntFieldUpdateOperationsInput | number
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactAttempts?: IntFieldUpdateOperationsInput | number
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    disputeFlag?: BoolFieldUpdateOperationsInput | boolean
    bankruptcyFlag?: BoolFieldUpdateOperationsInput | boolean
    deceasedFlag?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    originalAmount?: FloatFieldUpdateOperationsInput | number
    currentBalance?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    bestTimeToCall?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    daysPastDue?: IntFieldUpdateOperationsInput | number
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactAttempts?: IntFieldUpdateOperationsInput | number
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    disputeFlag?: BoolFieldUpdateOperationsInput | boolean
    bankruptcyFlag?: BoolFieldUpdateOperationsInput | boolean
    deceasedFlag?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountPhoneCreateInput = {
    id?: string
    phoneNumber: string
    phoneType?: string
    isValid?: boolean
    doNotCall?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    account: AccountCreateNestedOneWithoutPhoneNumbersInput
    calls?: CallCreateNestedManyWithoutAccountPhoneInput
  }

  export type AccountPhoneUncheckedCreateInput = {
    id?: string
    accountId: string
    phoneNumber: string
    phoneType?: string
    isValid?: boolean
    doNotCall?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    calls?: CallUncheckedCreateNestedManyWithoutAccountPhoneInput
  }

  export type AccountPhoneUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneRequiredWithoutPhoneNumbersNestedInput
    calls?: CallUpdateManyWithoutAccountPhoneNestedInput
  }

  export type AccountPhoneUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    calls?: CallUncheckedUpdateManyWithoutAccountPhoneNestedInput
  }

  export type AccountPhoneCreateManyInput = {
    id?: string
    accountId: string
    phoneNumber: string
    phoneType?: string
    isValid?: boolean
    doNotCall?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountPhoneUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountPhoneUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallCreateInput = {
    id?: string
    direction: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status: string
    disposition?: string | null
    notes?: string | null
    followUpDate?: Date | string | null
    amountPromised?: number | null
    amountCollected?: number | null
    recordingPath?: string | null
    callerId?: string | null
    campaignId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agent: UserCreateNestedOneWithoutCallsInput
    accountPhone?: AccountPhoneCreateNestedOneWithoutCallsInput
    account: AccountCreateNestedOneWithoutCallsInput
  }

  export type CallUncheckedCreateInput = {
    id?: string
    accountId: string
    accountPhoneId?: string | null
    agentId: string
    direction: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status: string
    disposition?: string | null
    notes?: string | null
    followUpDate?: Date | string | null
    amountPromised?: number | null
    amountCollected?: number | null
    recordingPath?: string | null
    callerId?: string | null
    campaignId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CallUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPromised?: NullableFloatFieldUpdateOperationsInput | number | null
    amountCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    recordingPath?: NullableStringFieldUpdateOperationsInput | string | null
    callerId?: NullableStringFieldUpdateOperationsInput | string | null
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: UserUpdateOneRequiredWithoutCallsNestedInput
    accountPhone?: AccountPhoneUpdateOneWithoutCallsNestedInput
    account?: AccountUpdateOneRequiredWithoutCallsNestedInput
  }

  export type CallUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    accountPhoneId?: NullableStringFieldUpdateOperationsInput | string | null
    agentId?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPromised?: NullableFloatFieldUpdateOperationsInput | number | null
    amountCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    recordingPath?: NullableStringFieldUpdateOperationsInput | string | null
    callerId?: NullableStringFieldUpdateOperationsInput | string | null
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallCreateManyInput = {
    id?: string
    accountId: string
    accountPhoneId?: string | null
    agentId: string
    direction: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status: string
    disposition?: string | null
    notes?: string | null
    followUpDate?: Date | string | null
    amountPromised?: number | null
    amountCollected?: number | null
    recordingPath?: string | null
    callerId?: string | null
    campaignId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CallUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPromised?: NullableFloatFieldUpdateOperationsInput | number | null
    amountCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    recordingPath?: NullableStringFieldUpdateOperationsInput | string | null
    callerId?: NullableStringFieldUpdateOperationsInput | string | null
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    accountPhoneId?: NullableStringFieldUpdateOperationsInput | string | null
    agentId?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPromised?: NullableFloatFieldUpdateOperationsInput | number | null
    amountCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    recordingPath?: NullableStringFieldUpdateOperationsInput | string | null
    callerId?: NullableStringFieldUpdateOperationsInput | string | null
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountActionCreateInput = {
    id?: string
    actionType: string
    description: string
    details?: string | null
    createdAt?: Date | string
    agent: UserCreateNestedOneWithoutAccountActionsInput
    account: AccountCreateNestedOneWithoutActionsInput
  }

  export type AccountActionUncheckedCreateInput = {
    id?: string
    accountId: string
    agentId: string
    actionType: string
    description: string
    details?: string | null
    createdAt?: Date | string
  }

  export type AccountActionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: UserUpdateOneRequiredWithoutAccountActionsNestedInput
    account?: AccountUpdateOneRequiredWithoutActionsNestedInput
  }

  export type AccountActionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountActionCreateManyInput = {
    id?: string
    accountId: string
    agentId: string
    actionType: string
    description: string
    details?: string | null
    createdAt?: Date | string
  }

  export type AccountActionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountActionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadBatchCreateInput = {
    id?: string
    filename: string
    originalFilename: string
    fileSize: number
    mimeType: string
    totalRecords?: number
    processedRecords?: number
    successCount?: number
    errorCount?: number
    skipCount?: number
    duplicateCount?: number
    status?: string
    batchName?: string | null
    skipErrors?: boolean
    updateExisting?: boolean
    processingStarted?: Date | string | null
    processingCompleted?: Date | string | null
    errorLog?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedBy: UserCreateNestedOneWithoutUploadBatchesInput
  }

  export type UploadBatchUncheckedCreateInput = {
    id?: string
    filename: string
    originalFilename: string
    fileSize: number
    mimeType: string
    totalRecords?: number
    processedRecords?: number
    successCount?: number
    errorCount?: number
    skipCount?: number
    duplicateCount?: number
    status?: string
    uploadedById: string
    batchName?: string | null
    skipErrors?: boolean
    updateExisting?: boolean
    processingStarted?: Date | string | null
    processingCompleted?: Date | string | null
    errorLog?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UploadBatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalFilename?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successCount?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    skipCount?: IntFieldUpdateOperationsInput | number
    duplicateCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    batchName?: NullableStringFieldUpdateOperationsInput | string | null
    skipErrors?: BoolFieldUpdateOperationsInput | boolean
    updateExisting?: BoolFieldUpdateOperationsInput | boolean
    processingStarted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorLog?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: UserUpdateOneRequiredWithoutUploadBatchesNestedInput
  }

  export type UploadBatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalFilename?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successCount?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    skipCount?: IntFieldUpdateOperationsInput | number
    duplicateCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    batchName?: NullableStringFieldUpdateOperationsInput | string | null
    skipErrors?: BoolFieldUpdateOperationsInput | boolean
    updateExisting?: BoolFieldUpdateOperationsInput | boolean
    processingStarted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorLog?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadBatchCreateManyInput = {
    id?: string
    filename: string
    originalFilename: string
    fileSize: number
    mimeType: string
    totalRecords?: number
    processedRecords?: number
    successCount?: number
    errorCount?: number
    skipCount?: number
    duplicateCount?: number
    status?: string
    uploadedById: string
    batchName?: string | null
    skipErrors?: boolean
    updateExisting?: boolean
    processingStarted?: Date | string | null
    processingCompleted?: Date | string | null
    errorLog?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UploadBatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalFilename?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successCount?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    skipCount?: IntFieldUpdateOperationsInput | number
    duplicateCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    batchName?: NullableStringFieldUpdateOperationsInput | string | null
    skipErrors?: BoolFieldUpdateOperationsInput | boolean
    updateExisting?: BoolFieldUpdateOperationsInput | boolean
    processingStarted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorLog?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadBatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalFilename?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successCount?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    skipCount?: IntFieldUpdateOperationsInput | number
    duplicateCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    batchName?: NullableStringFieldUpdateOperationsInput | string | null
    skipErrors?: BoolFieldUpdateOperationsInput | boolean
    updateExisting?: BoolFieldUpdateOperationsInput | boolean
    processingStarted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorLog?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleCreateInput = {
    id?: string
    name: string
    description?: string | null
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
    userRoles?: UserRoleCreateNestedManyWithoutRoleInput
    createdBy?: UserCreateNestedOneWithoutCreatedRolesInput
  }

  export type RoleUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
    userRoles?: UserRoleUpdateManyWithoutRoleNestedInput
    createdBy?: UserUpdateOneWithoutCreatedRolesNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type RoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    resource: string
    action: string
    isSystem?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    rolePermissions?: RolePermissionCreateNestedManyWithoutPermissionInput
    contexts?: PermissionContextCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    resource: string
    action: string
    isSystem?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    rolePermissions?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
    contexts?: PermissionContextUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rolePermissions?: RolePermissionUpdateManyWithoutPermissionNestedInput
    contexts?: PermissionContextUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rolePermissions?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
    contexts?: PermissionContextUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    resource: string
    action: string
    isSystem?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionCreateInput = {
    id?: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    role: RoleCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutRolePermissionsInput
    grantedBy?: UserCreateNestedOneWithoutGrantedPermissionsInput
  }

  export type RolePermissionUncheckedCreateInput = {
    id?: string
    roleId: string
    permissionId: string
    grantedAt?: Date | string
    grantedById?: string | null
    expiresAt?: Date | string | null
  }

  export type RolePermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: RoleUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutRolePermissionsNestedInput
    grantedBy?: UserUpdateOneWithoutGrantedPermissionsNestedInput
  }

  export type RolePermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedById?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RolePermissionCreateManyInput = {
    id?: string
    roleId: string
    permissionId: string
    grantedAt?: Date | string
    grantedById?: string | null
    expiresAt?: Date | string | null
  }

  export type RolePermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RolePermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedById?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserRoleCreateInput = {
    id?: string
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    user: UserCreateNestedOneWithoutUserRolesInput
    role: RoleCreateNestedOneWithoutUserRolesInput
    assignedBy?: UserCreateNestedOneWithoutAssignedRolesInput
  }

  export type UserRoleUncheckedCreateInput = {
    id?: string
    userId: string
    roleId: string
    assignedAt?: Date | string
    assignedById?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
  }

  export type UserRoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutUserRolesNestedInput
    role?: RoleUpdateOneRequiredWithoutUserRolesNestedInput
    assignedBy?: UserUpdateOneWithoutAssignedRolesNestedInput
  }

  export type UserRoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedById?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserRoleCreateManyInput = {
    id?: string
    userId: string
    roleId: string
    assignedAt?: Date | string
    assignedById?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
  }

  export type UserRoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserRoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedById?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValue?: string | null
    newValue?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
    actor?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    actorId?: string | null
    action: string
    entity: string
    entityId?: string | null
    oldValue?: string | null
    newValue?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actor?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    actorId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    actorId?: string | null
    action: string
    entity: string
    entityId?: string | null
    oldValue?: string | null
    newValue?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    actorId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DispositionCategoryCreateInput = {
    id?: string
    name: string
    description?: string | null
    color?: string | null
    icon?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dispositions?: DispositionCreateNestedManyWithoutCategoryInput
  }

  export type DispositionCategoryUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    color?: string | null
    icon?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dispositions?: DispositionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type DispositionCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dispositions?: DispositionUpdateManyWithoutCategoryNestedInput
  }

  export type DispositionCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dispositions?: DispositionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type DispositionCategoryCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    color?: string | null
    icon?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DispositionCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DispositionCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DispositionCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    requiresFollowUp?: boolean
    requiresPayment?: boolean
    requiresNotes?: boolean
    isSuccessful?: boolean
    sortOrder?: number
    isActive?: boolean
    usageCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    category: DispositionCategoryCreateNestedOneWithoutDispositionsInput
  }

  export type DispositionUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    categoryId: string
    requiresFollowUp?: boolean
    requiresPayment?: boolean
    requiresNotes?: boolean
    isSuccessful?: boolean
    sortOrder?: number
    isActive?: boolean
    usageCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DispositionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    requiresFollowUp?: BoolFieldUpdateOperationsInput | boolean
    requiresPayment?: BoolFieldUpdateOperationsInput | boolean
    requiresNotes?: BoolFieldUpdateOperationsInput | boolean
    isSuccessful?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: DispositionCategoryUpdateOneRequiredWithoutDispositionsNestedInput
  }

  export type DispositionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    requiresFollowUp?: BoolFieldUpdateOperationsInput | boolean
    requiresPayment?: BoolFieldUpdateOperationsInput | boolean
    requiresNotes?: BoolFieldUpdateOperationsInput | boolean
    isSuccessful?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DispositionCreateManyInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    categoryId: string
    requiresFollowUp?: boolean
    requiresPayment?: boolean
    requiresNotes?: boolean
    isSuccessful?: boolean
    sortOrder?: number
    isActive?: boolean
    usageCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DispositionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    requiresFollowUp?: BoolFieldUpdateOperationsInput | boolean
    requiresPayment?: BoolFieldUpdateOperationsInput | boolean
    requiresNotes?: BoolFieldUpdateOperationsInput | boolean
    isSuccessful?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DispositionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    requiresFollowUp?: BoolFieldUpdateOperationsInput | boolean
    requiresPayment?: BoolFieldUpdateOperationsInput | boolean
    requiresNotes?: BoolFieldUpdateOperationsInput | boolean
    isSuccessful?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMFACreateInput = {
    id?: string
    secret: string
    backupCodes?: string | null
    isEnabled?: boolean
    lastUsedAt?: Date | string | null
    setupAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMfaConfigInput
  }

  export type UserMFAUncheckedCreateInput = {
    id?: string
    userId: string
    secret: string
    backupCodes?: string | null
    isEnabled?: boolean
    lastUsedAt?: Date | string | null
    setupAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMFAUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    backupCodes?: NullableStringFieldUpdateOperationsInput | string | null
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMfaConfigNestedInput
  }

  export type UserMFAUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    backupCodes?: NullableStringFieldUpdateOperationsInput | string | null
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMFACreateManyInput = {
    id?: string
    userId: string
    secret: string
    backupCodes?: string | null
    isEnabled?: boolean
    lastUsedAt?: Date | string | null
    setupAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMFAUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    backupCodes?: NullableStringFieldUpdateOperationsInput | string | null
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMFAUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    backupCodes?: NullableStringFieldUpdateOperationsInput | string | null
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateInput = {
    id?: string
    sessionToken: string
    deviceFingerprint: string
    ipAddress: string
    userAgent: string
    location?: string | null
    riskScore?: number
    isActive?: boolean
    lastActivityAt?: Date | string
    expiresAt: Date | string
    createdAt?: Date | string
    loginMethod?: string | null
    deviceType?: string | null
    browserInfo?: string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type UserSessionUncheckedCreateInput = {
    id?: string
    userId: string
    sessionToken: string
    deviceFingerprint: string
    ipAddress: string
    userAgent: string
    location?: string | null
    riskScore?: number
    isActive?: boolean
    lastActivityAt?: Date | string
    expiresAt: Date | string
    createdAt?: Date | string
    loginMethod?: string | null
    deviceType?: string | null
    browserInfo?: string | null
  }

  export type UserSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastActivityAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginMethod?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableStringFieldUpdateOperationsInput | string | null
    browserInfo?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type UserSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastActivityAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginMethod?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableStringFieldUpdateOperationsInput | string | null
    browserInfo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSessionCreateManyInput = {
    id?: string
    userId: string
    sessionToken: string
    deviceFingerprint: string
    ipAddress: string
    userAgent: string
    location?: string | null
    riskScore?: number
    isActive?: boolean
    lastActivityAt?: Date | string
    expiresAt: Date | string
    createdAt?: Date | string
    loginMethod?: string | null
    deviceType?: string | null
    browserInfo?: string | null
  }

  export type UserSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastActivityAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginMethod?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableStringFieldUpdateOperationsInput | string | null
    browserInfo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastActivityAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginMethod?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableStringFieldUpdateOperationsInput | string | null
    browserInfo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EncryptionKeyCreateInput = {
    id?: string
    keyId: string
    algorithm?: string
    purpose: string
    isActive?: boolean
    rotatedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    version?: number
  }

  export type EncryptionKeyUncheckedCreateInput = {
    id?: string
    keyId: string
    algorithm?: string
    purpose: string
    isActive?: boolean
    rotatedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    version?: number
  }

  export type EncryptionKeyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyId?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    rotatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
  }

  export type EncryptionKeyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyId?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    rotatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
  }

  export type EncryptionKeyCreateManyInput = {
    id?: string
    keyId: string
    algorithm?: string
    purpose: string
    isActive?: boolean
    rotatedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    version?: number
  }

  export type EncryptionKeyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyId?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    rotatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
  }

  export type EncryptionKeyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyId?: StringFieldUpdateOperationsInput | string
    algorithm?: StringFieldUpdateOperationsInput | string
    purpose?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    rotatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: IntFieldUpdateOperationsInput | number
  }

  export type SecurityEventCreateInput = {
    id?: string
    sessionId?: string | null
    eventType: string
    severity: string
    description: string
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    location?: string | null
    riskScore?: number
    isBlocked?: boolean
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutSecurityEventsInput
    resolvedBy?: UserCreateNestedOneWithoutResolvedSecurityEventsInput
  }

  export type SecurityEventUncheckedCreateInput = {
    id?: string
    userId?: string | null
    sessionId?: string | null
    eventType: string
    severity: string
    description: string
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    location?: string | null
    riskScore?: number
    isBlocked?: boolean
    resolvedAt?: Date | string | null
    resolvedById?: string | null
    createdAt?: Date | string
  }

  export type SecurityEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutSecurityEventsNestedInput
    resolvedBy?: UserUpdateOneWithoutResolvedSecurityEventsNestedInput
  }

  export type SecurityEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecurityEventCreateManyInput = {
    id?: string
    userId?: string | null
    sessionId?: string | null
    eventType: string
    severity: string
    description: string
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    location?: string | null
    riskScore?: number
    isBlocked?: boolean
    resolvedAt?: Date | string | null
    resolvedById?: string | null
    createdAt?: Date | string
  }

  export type SecurityEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecurityEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionContextCreateInput = {
    id?: string
    context: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    ipRange?: string | null
    timeRestriction?: string | null
    locationRestriction?: string | null
    deviceRestriction?: string | null
    user: UserCreateNestedOneWithoutPermissionContextsInput
    permission: PermissionCreateNestedOneWithoutContextsInput
  }

  export type PermissionContextUncheckedCreateInput = {
    id?: string
    userId: string
    permissionId: string
    context: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    ipRange?: string | null
    timeRestriction?: string | null
    locationRestriction?: string | null
    deviceRestriction?: string | null
  }

  export type PermissionContextUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipRange?: NullableStringFieldUpdateOperationsInput | string | null
    timeRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    locationRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    deviceRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPermissionContextsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutContextsNestedInput
  }

  export type PermissionContextUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipRange?: NullableStringFieldUpdateOperationsInput | string | null
    timeRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    locationRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    deviceRestriction?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionContextCreateManyInput = {
    id?: string
    userId: string
    permissionId: string
    context: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    ipRange?: string | null
    timeRestriction?: string | null
    locationRestriction?: string | null
    deviceRestriction?: string | null
  }

  export type PermissionContextUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipRange?: NullableStringFieldUpdateOperationsInput | string | null
    timeRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    locationRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    deviceRestriction?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionContextUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipRange?: NullableStringFieldUpdateOperationsInput | string | null
    timeRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    locationRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    deviceRestriction?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AccountActionListRelationFilter = {
    every?: AccountActionWhereInput
    some?: AccountActionWhereInput
    none?: AccountActionWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type CallListRelationFilter = {
    every?: CallWhereInput
    some?: CallWhereInput
    none?: CallWhereInput
  }

  export type RefreshTokenListRelationFilter = {
    every?: RefreshTokenWhereInput
    some?: RefreshTokenWhereInput
    none?: RefreshTokenWhereInput
  }

  export type UploadBatchListRelationFilter = {
    every?: UploadBatchWhereInput
    some?: UploadBatchWhereInput
    none?: UploadBatchWhereInput
  }

  export type RoleListRelationFilter = {
    every?: RoleWhereInput
    some?: RoleWhereInput
    none?: RoleWhereInput
  }

  export type UserRoleListRelationFilter = {
    every?: UserRoleWhereInput
    some?: UserRoleWhereInput
    none?: UserRoleWhereInput
  }

  export type RolePermissionListRelationFilter = {
    every?: RolePermissionWhereInput
    some?: RolePermissionWhereInput
    none?: RolePermissionWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type UserMFANullableRelationFilter = {
    is?: UserMFAWhereInput | null
    isNot?: UserMFAWhereInput | null
  }

  export type UserSessionListRelationFilter = {
    every?: UserSessionWhereInput
    some?: UserSessionWhereInput
    none?: UserSessionWhereInput
  }

  export type SecurityEventListRelationFilter = {
    every?: SecurityEventWhereInput
    some?: SecurityEventWhereInput
    none?: SecurityEventWhereInput
  }

  export type PermissionContextListRelationFilter = {
    every?: PermissionContextWhereInput
    some?: PermissionContextWhereInput
    none?: PermissionContextWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CallOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RefreshTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UploadBatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RolePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SecurityEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PermissionContextOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    emailVerified?: SortOrder
    emailVerifyToken?: SortOrder
    emailVerifyExpires?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    failedLoginAttempts?: SortOrder
    accountLockedUntil?: SortOrder
    lastFailedLogin?: SortOrder
    passwordChangedAt?: SortOrder
    mustChangePassword?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    failedLoginAttempts?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    emailVerified?: SortOrder
    emailVerifyToken?: SortOrder
    emailVerifyExpires?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    failedLoginAttempts?: SortOrder
    accountLockedUntil?: SortOrder
    lastFailedLogin?: SortOrder
    passwordChangedAt?: SortOrder
    mustChangePassword?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    emailVerified?: SortOrder
    emailVerifyToken?: SortOrder
    emailVerifyExpires?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    failedLoginAttempts?: SortOrder
    accountLockedUntil?: SortOrder
    lastFailedLogin?: SortOrder
    passwordChangedAt?: SortOrder
    mustChangePassword?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    failedLoginAttempts?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RefreshTokenCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RefreshTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type RefreshTokenMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type AccountPhoneListRelationFilter = {
    every?: AccountPhoneWhereInput
    some?: AccountPhoneWhereInput
    none?: AccountPhoneWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AccountPhoneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    accountNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    country?: SortOrder
    originalAmount?: SortOrder
    currentBalance?: SortOrder
    amountPaid?: SortOrder
    interestRate?: SortOrder
    lastPaymentDate?: SortOrder
    lastPaymentAmount?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    assignedAgentId?: SortOrder
    assignedDate?: SortOrder
    preferredContactMethod?: SortOrder
    bestTimeToCall?: SortOrder
    timezone?: SortOrder
    language?: SortOrder
    daysPastDue?: SortOrder
    lastContactDate?: SortOrder
    nextContactDate?: SortOrder
    contactAttempts?: SortOrder
    doNotCall?: SortOrder
    disputeFlag?: SortOrder
    bankruptcyFlag?: SortOrder
    deceasedFlag?: SortOrder
    notes?: SortOrder
    source?: SortOrder
    batchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    originalAmount?: SortOrder
    currentBalance?: SortOrder
    amountPaid?: SortOrder
    interestRate?: SortOrder
    lastPaymentAmount?: SortOrder
    daysPastDue?: SortOrder
    contactAttempts?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    accountNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    country?: SortOrder
    originalAmount?: SortOrder
    currentBalance?: SortOrder
    amountPaid?: SortOrder
    interestRate?: SortOrder
    lastPaymentDate?: SortOrder
    lastPaymentAmount?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    assignedAgentId?: SortOrder
    assignedDate?: SortOrder
    preferredContactMethod?: SortOrder
    bestTimeToCall?: SortOrder
    timezone?: SortOrder
    language?: SortOrder
    daysPastDue?: SortOrder
    lastContactDate?: SortOrder
    nextContactDate?: SortOrder
    contactAttempts?: SortOrder
    doNotCall?: SortOrder
    disputeFlag?: SortOrder
    bankruptcyFlag?: SortOrder
    deceasedFlag?: SortOrder
    notes?: SortOrder
    source?: SortOrder
    batchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    accountNumber?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    address1?: SortOrder
    address2?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    country?: SortOrder
    originalAmount?: SortOrder
    currentBalance?: SortOrder
    amountPaid?: SortOrder
    interestRate?: SortOrder
    lastPaymentDate?: SortOrder
    lastPaymentAmount?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    assignedAgentId?: SortOrder
    assignedDate?: SortOrder
    preferredContactMethod?: SortOrder
    bestTimeToCall?: SortOrder
    timezone?: SortOrder
    language?: SortOrder
    daysPastDue?: SortOrder
    lastContactDate?: SortOrder
    nextContactDate?: SortOrder
    contactAttempts?: SortOrder
    doNotCall?: SortOrder
    disputeFlag?: SortOrder
    bankruptcyFlag?: SortOrder
    deceasedFlag?: SortOrder
    notes?: SortOrder
    source?: SortOrder
    batchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    originalAmount?: SortOrder
    currentBalance?: SortOrder
    amountPaid?: SortOrder
    interestRate?: SortOrder
    lastPaymentAmount?: SortOrder
    daysPastDue?: SortOrder
    contactAttempts?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type AccountRelationFilter = {
    is?: AccountWhereInput
    isNot?: AccountWhereInput
  }

  export type AccountPhoneAccountIdPhoneNumberCompoundUniqueInput = {
    accountId: string
    phoneNumber: string
  }

  export type AccountPhoneCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    phoneNumber?: SortOrder
    phoneType?: SortOrder
    isValid?: SortOrder
    doNotCall?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountPhoneMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    phoneNumber?: SortOrder
    phoneType?: SortOrder
    isValid?: SortOrder
    doNotCall?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountPhoneMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    phoneNumber?: SortOrder
    phoneType?: SortOrder
    isValid?: SortOrder
    doNotCall?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AccountPhoneNullableRelationFilter = {
    is?: AccountPhoneWhereInput | null
    isNot?: AccountPhoneWhereInput | null
  }

  export type CallCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    accountPhoneId?: SortOrder
    agentId?: SortOrder
    direction?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    status?: SortOrder
    disposition?: SortOrder
    notes?: SortOrder
    followUpDate?: SortOrder
    amountPromised?: SortOrder
    amountCollected?: SortOrder
    recordingPath?: SortOrder
    callerId?: SortOrder
    campaignId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CallAvgOrderByAggregateInput = {
    duration?: SortOrder
    amountPromised?: SortOrder
    amountCollected?: SortOrder
  }

  export type CallMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    accountPhoneId?: SortOrder
    agentId?: SortOrder
    direction?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    status?: SortOrder
    disposition?: SortOrder
    notes?: SortOrder
    followUpDate?: SortOrder
    amountPromised?: SortOrder
    amountCollected?: SortOrder
    recordingPath?: SortOrder
    callerId?: SortOrder
    campaignId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CallMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    accountPhoneId?: SortOrder
    agentId?: SortOrder
    direction?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    status?: SortOrder
    disposition?: SortOrder
    notes?: SortOrder
    followUpDate?: SortOrder
    amountPromised?: SortOrder
    amountCollected?: SortOrder
    recordingPath?: SortOrder
    callerId?: SortOrder
    campaignId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CallSumOrderByAggregateInput = {
    duration?: SortOrder
    amountPromised?: SortOrder
    amountCollected?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type AccountActionCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    agentId?: SortOrder
    actionType?: SortOrder
    description?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type AccountActionMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    agentId?: SortOrder
    actionType?: SortOrder
    description?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type AccountActionMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    agentId?: SortOrder
    actionType?: SortOrder
    description?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type UploadBatchCountOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalFilename?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    totalRecords?: SortOrder
    processedRecords?: SortOrder
    successCount?: SortOrder
    errorCount?: SortOrder
    skipCount?: SortOrder
    duplicateCount?: SortOrder
    status?: SortOrder
    uploadedById?: SortOrder
    batchName?: SortOrder
    skipErrors?: SortOrder
    updateExisting?: SortOrder
    processingStarted?: SortOrder
    processingCompleted?: SortOrder
    errorLog?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UploadBatchAvgOrderByAggregateInput = {
    fileSize?: SortOrder
    totalRecords?: SortOrder
    processedRecords?: SortOrder
    successCount?: SortOrder
    errorCount?: SortOrder
    skipCount?: SortOrder
    duplicateCount?: SortOrder
  }

  export type UploadBatchMaxOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalFilename?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    totalRecords?: SortOrder
    processedRecords?: SortOrder
    successCount?: SortOrder
    errorCount?: SortOrder
    skipCount?: SortOrder
    duplicateCount?: SortOrder
    status?: SortOrder
    uploadedById?: SortOrder
    batchName?: SortOrder
    skipErrors?: SortOrder
    updateExisting?: SortOrder
    processingStarted?: SortOrder
    processingCompleted?: SortOrder
    errorLog?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UploadBatchMinOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalFilename?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    totalRecords?: SortOrder
    processedRecords?: SortOrder
    successCount?: SortOrder
    errorCount?: SortOrder
    skipCount?: SortOrder
    duplicateCount?: SortOrder
    status?: SortOrder
    uploadedById?: SortOrder
    batchName?: SortOrder
    skipErrors?: SortOrder
    updateExisting?: SortOrder
    processingStarted?: SortOrder
    processingCompleted?: SortOrder
    errorLog?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UploadBatchSumOrderByAggregateInput = {
    fileSize?: SortOrder
    totalRecords?: SortOrder
    processedRecords?: SortOrder
    successCount?: SortOrder
    errorCount?: SortOrder
    skipCount?: SortOrder
    duplicateCount?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isSystem?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isSystem?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isSystem?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    isSystem?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    isSystem?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    isSystem?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type PermissionRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type RolePermissionRoleIdPermissionIdCompoundUniqueInput = {
    roleId: string
    permissionId: string
  }

  export type RolePermissionCountOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    grantedAt?: SortOrder
    grantedById?: SortOrder
    expiresAt?: SortOrder
  }

  export type RolePermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    grantedAt?: SortOrder
    grantedById?: SortOrder
    expiresAt?: SortOrder
  }

  export type RolePermissionMinOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    grantedAt?: SortOrder
    grantedById?: SortOrder
    expiresAt?: SortOrder
  }

  export type UserRoleUserIdRoleIdCompoundUniqueInput = {
    userId: string
    roleId: string
  }

  export type UserRoleCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    assignedAt?: SortOrder
    assignedById?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
  }

  export type UserRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    assignedAt?: SortOrder
    assignedById?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
  }

  export type UserRoleMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    assignedAt?: SortOrder
    assignedById?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    actorId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldValue?: SortOrder
    newValue?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    sessionId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    actorId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldValue?: SortOrder
    newValue?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    sessionId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    actorId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldValue?: SortOrder
    newValue?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    sessionId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type DispositionListRelationFilter = {
    every?: DispositionWhereInput
    some?: DispositionWhereInput
    none?: DispositionWhereInput
  }

  export type DispositionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DispositionCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    icon?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DispositionCategoryAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type DispositionCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    icon?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DispositionCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    color?: SortOrder
    icon?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DispositionCategorySumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type DispositionCategoryRelationFilter = {
    is?: DispositionCategoryWhereInput
    isNot?: DispositionCategoryWhereInput
  }

  export type DispositionCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    requiresFollowUp?: SortOrder
    requiresPayment?: SortOrder
    requiresNotes?: SortOrder
    isSuccessful?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    usageCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DispositionAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
    usageCount?: SortOrder
  }

  export type DispositionMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    requiresFollowUp?: SortOrder
    requiresPayment?: SortOrder
    requiresNotes?: SortOrder
    isSuccessful?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    usageCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DispositionMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    requiresFollowUp?: SortOrder
    requiresPayment?: SortOrder
    requiresNotes?: SortOrder
    isSuccessful?: SortOrder
    sortOrder?: SortOrder
    isActive?: SortOrder
    usageCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DispositionSumOrderByAggregateInput = {
    sortOrder?: SortOrder
    usageCount?: SortOrder
  }

  export type UserMFACountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    secret?: SortOrder
    backupCodes?: SortOrder
    isEnabled?: SortOrder
    lastUsedAt?: SortOrder
    setupAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMFAMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    secret?: SortOrder
    backupCodes?: SortOrder
    isEnabled?: SortOrder
    lastUsedAt?: SortOrder
    setupAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMFAMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    secret?: SortOrder
    backupCodes?: SortOrder
    isEnabled?: SortOrder
    lastUsedAt?: SortOrder
    setupAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionToken?: SortOrder
    deviceFingerprint?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    location?: SortOrder
    riskScore?: SortOrder
    isActive?: SortOrder
    lastActivityAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    loginMethod?: SortOrder
    deviceType?: SortOrder
    browserInfo?: SortOrder
  }

  export type UserSessionAvgOrderByAggregateInput = {
    riskScore?: SortOrder
  }

  export type UserSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionToken?: SortOrder
    deviceFingerprint?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    location?: SortOrder
    riskScore?: SortOrder
    isActive?: SortOrder
    lastActivityAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    loginMethod?: SortOrder
    deviceType?: SortOrder
    browserInfo?: SortOrder
  }

  export type UserSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionToken?: SortOrder
    deviceFingerprint?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    location?: SortOrder
    riskScore?: SortOrder
    isActive?: SortOrder
    lastActivityAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    loginMethod?: SortOrder
    deviceType?: SortOrder
    browserInfo?: SortOrder
  }

  export type UserSessionSumOrderByAggregateInput = {
    riskScore?: SortOrder
  }

  export type EncryptionKeyCountOrderByAggregateInput = {
    id?: SortOrder
    keyId?: SortOrder
    algorithm?: SortOrder
    purpose?: SortOrder
    isActive?: SortOrder
    rotatedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    version?: SortOrder
  }

  export type EncryptionKeyAvgOrderByAggregateInput = {
    version?: SortOrder
  }

  export type EncryptionKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    keyId?: SortOrder
    algorithm?: SortOrder
    purpose?: SortOrder
    isActive?: SortOrder
    rotatedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    version?: SortOrder
  }

  export type EncryptionKeyMinOrderByAggregateInput = {
    id?: SortOrder
    keyId?: SortOrder
    algorithm?: SortOrder
    purpose?: SortOrder
    isActive?: SortOrder
    rotatedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    version?: SortOrder
  }

  export type EncryptionKeySumOrderByAggregateInput = {
    version?: SortOrder
  }

  export type SecurityEventCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    eventType?: SortOrder
    severity?: SortOrder
    description?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    location?: SortOrder
    riskScore?: SortOrder
    isBlocked?: SortOrder
    resolvedAt?: SortOrder
    resolvedById?: SortOrder
    createdAt?: SortOrder
  }

  export type SecurityEventAvgOrderByAggregateInput = {
    riskScore?: SortOrder
  }

  export type SecurityEventMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    eventType?: SortOrder
    severity?: SortOrder
    description?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    location?: SortOrder
    riskScore?: SortOrder
    isBlocked?: SortOrder
    resolvedAt?: SortOrder
    resolvedById?: SortOrder
    createdAt?: SortOrder
  }

  export type SecurityEventMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    eventType?: SortOrder
    severity?: SortOrder
    description?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    location?: SortOrder
    riskScore?: SortOrder
    isBlocked?: SortOrder
    resolvedAt?: SortOrder
    resolvedById?: SortOrder
    createdAt?: SortOrder
  }

  export type SecurityEventSumOrderByAggregateInput = {
    riskScore?: SortOrder
  }

  export type PermissionContextUserIdPermissionIdCompoundUniqueInput = {
    userId: string
    permissionId: string
  }

  export type PermissionContextCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    context?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    ipRange?: SortOrder
    timeRestriction?: SortOrder
    locationRestriction?: SortOrder
    deviceRestriction?: SortOrder
  }

  export type PermissionContextMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    context?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    ipRange?: SortOrder
    timeRestriction?: SortOrder
    locationRestriction?: SortOrder
    deviceRestriction?: SortOrder
  }

  export type PermissionContextMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    context?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    ipRange?: SortOrder
    timeRestriction?: SortOrder
    locationRestriction?: SortOrder
    deviceRestriction?: SortOrder
  }

  export type AccountActionCreateNestedManyWithoutAgentInput = {
    create?: XOR<AccountActionCreateWithoutAgentInput, AccountActionUncheckedCreateWithoutAgentInput> | AccountActionCreateWithoutAgentInput[] | AccountActionUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AccountActionCreateOrConnectWithoutAgentInput | AccountActionCreateOrConnectWithoutAgentInput[]
    createMany?: AccountActionCreateManyAgentInputEnvelope
    connect?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutAssignedAgentInput = {
    create?: XOR<AccountCreateWithoutAssignedAgentInput, AccountUncheckedCreateWithoutAssignedAgentInput> | AccountCreateWithoutAssignedAgentInput[] | AccountUncheckedCreateWithoutAssignedAgentInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutAssignedAgentInput | AccountCreateOrConnectWithoutAssignedAgentInput[]
    createMany?: AccountCreateManyAssignedAgentInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type CallCreateNestedManyWithoutAgentInput = {
    create?: XOR<CallCreateWithoutAgentInput, CallUncheckedCreateWithoutAgentInput> | CallCreateWithoutAgentInput[] | CallUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: CallCreateOrConnectWithoutAgentInput | CallCreateOrConnectWithoutAgentInput[]
    createMany?: CallCreateManyAgentInputEnvelope
    connect?: CallWhereUniqueInput | CallWhereUniqueInput[]
  }

  export type RefreshTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type UploadBatchCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<UploadBatchCreateWithoutUploadedByInput, UploadBatchUncheckedCreateWithoutUploadedByInput> | UploadBatchCreateWithoutUploadedByInput[] | UploadBatchUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: UploadBatchCreateOrConnectWithoutUploadedByInput | UploadBatchCreateOrConnectWithoutUploadedByInput[]
    createMany?: UploadBatchCreateManyUploadedByInputEnvelope
    connect?: UploadBatchWhereUniqueInput | UploadBatchWhereUniqueInput[]
  }

  export type RoleCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<RoleCreateWithoutCreatedByInput, RoleUncheckedCreateWithoutCreatedByInput> | RoleCreateWithoutCreatedByInput[] | RoleUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutCreatedByInput | RoleCreateOrConnectWithoutCreatedByInput[]
    createMany?: RoleCreateManyCreatedByInputEnvelope
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type UserRoleCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type UserRoleCreateNestedManyWithoutAssignedByInput = {
    create?: XOR<UserRoleCreateWithoutAssignedByInput, UserRoleUncheckedCreateWithoutAssignedByInput> | UserRoleCreateWithoutAssignedByInput[] | UserRoleUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutAssignedByInput | UserRoleCreateOrConnectWithoutAssignedByInput[]
    createMany?: UserRoleCreateManyAssignedByInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type RolePermissionCreateNestedManyWithoutGrantedByInput = {
    create?: XOR<RolePermissionCreateWithoutGrantedByInput, RolePermissionUncheckedCreateWithoutGrantedByInput> | RolePermissionCreateWithoutGrantedByInput[] | RolePermissionUncheckedCreateWithoutGrantedByInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutGrantedByInput | RolePermissionCreateOrConnectWithoutGrantedByInput[]
    createMany?: RolePermissionCreateManyGrantedByInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutActorInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type UserMFACreateNestedOneWithoutUserInput = {
    create?: XOR<UserMFACreateWithoutUserInput, UserMFAUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserMFACreateOrConnectWithoutUserInput
    connect?: UserMFAWhereUniqueInput
  }

  export type UserSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type SecurityEventCreateNestedManyWithoutUserInput = {
    create?: XOR<SecurityEventCreateWithoutUserInput, SecurityEventUncheckedCreateWithoutUserInput> | SecurityEventCreateWithoutUserInput[] | SecurityEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SecurityEventCreateOrConnectWithoutUserInput | SecurityEventCreateOrConnectWithoutUserInput[]
    createMany?: SecurityEventCreateManyUserInputEnvelope
    connect?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
  }

  export type SecurityEventCreateNestedManyWithoutResolvedByInput = {
    create?: XOR<SecurityEventCreateWithoutResolvedByInput, SecurityEventUncheckedCreateWithoutResolvedByInput> | SecurityEventCreateWithoutResolvedByInput[] | SecurityEventUncheckedCreateWithoutResolvedByInput[]
    connectOrCreate?: SecurityEventCreateOrConnectWithoutResolvedByInput | SecurityEventCreateOrConnectWithoutResolvedByInput[]
    createMany?: SecurityEventCreateManyResolvedByInputEnvelope
    connect?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
  }

  export type PermissionContextCreateNestedManyWithoutUserInput = {
    create?: XOR<PermissionContextCreateWithoutUserInput, PermissionContextUncheckedCreateWithoutUserInput> | PermissionContextCreateWithoutUserInput[] | PermissionContextUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PermissionContextCreateOrConnectWithoutUserInput | PermissionContextCreateOrConnectWithoutUserInput[]
    createMany?: PermissionContextCreateManyUserInputEnvelope
    connect?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
  }

  export type AccountActionUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<AccountActionCreateWithoutAgentInput, AccountActionUncheckedCreateWithoutAgentInput> | AccountActionCreateWithoutAgentInput[] | AccountActionUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AccountActionCreateOrConnectWithoutAgentInput | AccountActionCreateOrConnectWithoutAgentInput[]
    createMany?: AccountActionCreateManyAgentInputEnvelope
    connect?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutAssignedAgentInput = {
    create?: XOR<AccountCreateWithoutAssignedAgentInput, AccountUncheckedCreateWithoutAssignedAgentInput> | AccountCreateWithoutAssignedAgentInput[] | AccountUncheckedCreateWithoutAssignedAgentInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutAssignedAgentInput | AccountCreateOrConnectWithoutAssignedAgentInput[]
    createMany?: AccountCreateManyAssignedAgentInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type CallUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<CallCreateWithoutAgentInput, CallUncheckedCreateWithoutAgentInput> | CallCreateWithoutAgentInput[] | CallUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: CallCreateOrConnectWithoutAgentInput | CallCreateOrConnectWithoutAgentInput[]
    createMany?: CallCreateManyAgentInputEnvelope
    connect?: CallWhereUniqueInput | CallWhereUniqueInput[]
  }

  export type RefreshTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
  }

  export type UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<UploadBatchCreateWithoutUploadedByInput, UploadBatchUncheckedCreateWithoutUploadedByInput> | UploadBatchCreateWithoutUploadedByInput[] | UploadBatchUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: UploadBatchCreateOrConnectWithoutUploadedByInput | UploadBatchCreateOrConnectWithoutUploadedByInput[]
    createMany?: UploadBatchCreateManyUploadedByInputEnvelope
    connect?: UploadBatchWhereUniqueInput | UploadBatchWhereUniqueInput[]
  }

  export type RoleUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<RoleCreateWithoutCreatedByInput, RoleUncheckedCreateWithoutCreatedByInput> | RoleCreateWithoutCreatedByInput[] | RoleUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutCreatedByInput | RoleCreateOrConnectWithoutCreatedByInput[]
    createMany?: RoleCreateManyCreatedByInputEnvelope
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutAssignedByInput = {
    create?: XOR<UserRoleCreateWithoutAssignedByInput, UserRoleUncheckedCreateWithoutAssignedByInput> | UserRoleCreateWithoutAssignedByInput[] | UserRoleUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutAssignedByInput | UserRoleCreateOrConnectWithoutAssignedByInput[]
    createMany?: UserRoleCreateManyAssignedByInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput = {
    create?: XOR<RolePermissionCreateWithoutGrantedByInput, RolePermissionUncheckedCreateWithoutGrantedByInput> | RolePermissionCreateWithoutGrantedByInput[] | RolePermissionUncheckedCreateWithoutGrantedByInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutGrantedByInput | RolePermissionCreateOrConnectWithoutGrantedByInput[]
    createMany?: RolePermissionCreateManyGrantedByInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutActorInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type UserMFAUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserMFACreateWithoutUserInput, UserMFAUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserMFACreateOrConnectWithoutUserInput
    connect?: UserMFAWhereUniqueInput
  }

  export type UserSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type SecurityEventUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SecurityEventCreateWithoutUserInput, SecurityEventUncheckedCreateWithoutUserInput> | SecurityEventCreateWithoutUserInput[] | SecurityEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SecurityEventCreateOrConnectWithoutUserInput | SecurityEventCreateOrConnectWithoutUserInput[]
    createMany?: SecurityEventCreateManyUserInputEnvelope
    connect?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
  }

  export type SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput = {
    create?: XOR<SecurityEventCreateWithoutResolvedByInput, SecurityEventUncheckedCreateWithoutResolvedByInput> | SecurityEventCreateWithoutResolvedByInput[] | SecurityEventUncheckedCreateWithoutResolvedByInput[]
    connectOrCreate?: SecurityEventCreateOrConnectWithoutResolvedByInput | SecurityEventCreateOrConnectWithoutResolvedByInput[]
    createMany?: SecurityEventCreateManyResolvedByInputEnvelope
    connect?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
  }

  export type PermissionContextUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PermissionContextCreateWithoutUserInput, PermissionContextUncheckedCreateWithoutUserInput> | PermissionContextCreateWithoutUserInput[] | PermissionContextUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PermissionContextCreateOrConnectWithoutUserInput | PermissionContextCreateOrConnectWithoutUserInput[]
    createMany?: PermissionContextCreateManyUserInputEnvelope
    connect?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountActionUpdateManyWithoutAgentNestedInput = {
    create?: XOR<AccountActionCreateWithoutAgentInput, AccountActionUncheckedCreateWithoutAgentInput> | AccountActionCreateWithoutAgentInput[] | AccountActionUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AccountActionCreateOrConnectWithoutAgentInput | AccountActionCreateOrConnectWithoutAgentInput[]
    upsert?: AccountActionUpsertWithWhereUniqueWithoutAgentInput | AccountActionUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: AccountActionCreateManyAgentInputEnvelope
    set?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    disconnect?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    delete?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    connect?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    update?: AccountActionUpdateWithWhereUniqueWithoutAgentInput | AccountActionUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: AccountActionUpdateManyWithWhereWithoutAgentInput | AccountActionUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: AccountActionScalarWhereInput | AccountActionScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutAssignedAgentNestedInput = {
    create?: XOR<AccountCreateWithoutAssignedAgentInput, AccountUncheckedCreateWithoutAssignedAgentInput> | AccountCreateWithoutAssignedAgentInput[] | AccountUncheckedCreateWithoutAssignedAgentInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutAssignedAgentInput | AccountCreateOrConnectWithoutAssignedAgentInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutAssignedAgentInput | AccountUpsertWithWhereUniqueWithoutAssignedAgentInput[]
    createMany?: AccountCreateManyAssignedAgentInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutAssignedAgentInput | AccountUpdateWithWhereUniqueWithoutAssignedAgentInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutAssignedAgentInput | AccountUpdateManyWithWhereWithoutAssignedAgentInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type CallUpdateManyWithoutAgentNestedInput = {
    create?: XOR<CallCreateWithoutAgentInput, CallUncheckedCreateWithoutAgentInput> | CallCreateWithoutAgentInput[] | CallUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: CallCreateOrConnectWithoutAgentInput | CallCreateOrConnectWithoutAgentInput[]
    upsert?: CallUpsertWithWhereUniqueWithoutAgentInput | CallUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: CallCreateManyAgentInputEnvelope
    set?: CallWhereUniqueInput | CallWhereUniqueInput[]
    disconnect?: CallWhereUniqueInput | CallWhereUniqueInput[]
    delete?: CallWhereUniqueInput | CallWhereUniqueInput[]
    connect?: CallWhereUniqueInput | CallWhereUniqueInput[]
    update?: CallUpdateWithWhereUniqueWithoutAgentInput | CallUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: CallUpdateManyWithWhereWithoutAgentInput | CallUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: CallScalarWhereInput | CallScalarWhereInput[]
  }

  export type RefreshTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type UploadBatchUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<UploadBatchCreateWithoutUploadedByInput, UploadBatchUncheckedCreateWithoutUploadedByInput> | UploadBatchCreateWithoutUploadedByInput[] | UploadBatchUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: UploadBatchCreateOrConnectWithoutUploadedByInput | UploadBatchCreateOrConnectWithoutUploadedByInput[]
    upsert?: UploadBatchUpsertWithWhereUniqueWithoutUploadedByInput | UploadBatchUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: UploadBatchCreateManyUploadedByInputEnvelope
    set?: UploadBatchWhereUniqueInput | UploadBatchWhereUniqueInput[]
    disconnect?: UploadBatchWhereUniqueInput | UploadBatchWhereUniqueInput[]
    delete?: UploadBatchWhereUniqueInput | UploadBatchWhereUniqueInput[]
    connect?: UploadBatchWhereUniqueInput | UploadBatchWhereUniqueInput[]
    update?: UploadBatchUpdateWithWhereUniqueWithoutUploadedByInput | UploadBatchUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: UploadBatchUpdateManyWithWhereWithoutUploadedByInput | UploadBatchUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: UploadBatchScalarWhereInput | UploadBatchScalarWhereInput[]
  }

  export type RoleUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<RoleCreateWithoutCreatedByInput, RoleUncheckedCreateWithoutCreatedByInput> | RoleCreateWithoutCreatedByInput[] | RoleUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutCreatedByInput | RoleCreateOrConnectWithoutCreatedByInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutCreatedByInput | RoleUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: RoleCreateManyCreatedByInputEnvelope
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutCreatedByInput | RoleUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutCreatedByInput | RoleUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type UserRoleUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type UserRoleUpdateManyWithoutAssignedByNestedInput = {
    create?: XOR<UserRoleCreateWithoutAssignedByInput, UserRoleUncheckedCreateWithoutAssignedByInput> | UserRoleCreateWithoutAssignedByInput[] | UserRoleUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutAssignedByInput | UserRoleCreateOrConnectWithoutAssignedByInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutAssignedByInput | UserRoleUpsertWithWhereUniqueWithoutAssignedByInput[]
    createMany?: UserRoleCreateManyAssignedByInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutAssignedByInput | UserRoleUpdateWithWhereUniqueWithoutAssignedByInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutAssignedByInput | UserRoleUpdateManyWithWhereWithoutAssignedByInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type RolePermissionUpdateManyWithoutGrantedByNestedInput = {
    create?: XOR<RolePermissionCreateWithoutGrantedByInput, RolePermissionUncheckedCreateWithoutGrantedByInput> | RolePermissionCreateWithoutGrantedByInput[] | RolePermissionUncheckedCreateWithoutGrantedByInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutGrantedByInput | RolePermissionCreateOrConnectWithoutGrantedByInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutGrantedByInput | RolePermissionUpsertWithWhereUniqueWithoutGrantedByInput[]
    createMany?: RolePermissionCreateManyGrantedByInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutGrantedByInput | RolePermissionUpdateWithWhereUniqueWithoutGrantedByInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutGrantedByInput | RolePermissionUpdateManyWithWhereWithoutGrantedByInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutActorNestedInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutActorInput | AuditLogUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutActorInput | AuditLogUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutActorInput | AuditLogUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserMFAUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserMFACreateWithoutUserInput, UserMFAUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserMFACreateOrConnectWithoutUserInput
    upsert?: UserMFAUpsertWithoutUserInput
    disconnect?: UserMFAWhereInput | boolean
    delete?: UserMFAWhereInput | boolean
    connect?: UserMFAWhereUniqueInput
    update?: XOR<XOR<UserMFAUpdateToOneWithWhereWithoutUserInput, UserMFAUpdateWithoutUserInput>, UserMFAUncheckedUpdateWithoutUserInput>
  }

  export type UserSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type SecurityEventUpdateManyWithoutUserNestedInput = {
    create?: XOR<SecurityEventCreateWithoutUserInput, SecurityEventUncheckedCreateWithoutUserInput> | SecurityEventCreateWithoutUserInput[] | SecurityEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SecurityEventCreateOrConnectWithoutUserInput | SecurityEventCreateOrConnectWithoutUserInput[]
    upsert?: SecurityEventUpsertWithWhereUniqueWithoutUserInput | SecurityEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SecurityEventCreateManyUserInputEnvelope
    set?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    disconnect?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    delete?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    connect?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    update?: SecurityEventUpdateWithWhereUniqueWithoutUserInput | SecurityEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SecurityEventUpdateManyWithWhereWithoutUserInput | SecurityEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SecurityEventScalarWhereInput | SecurityEventScalarWhereInput[]
  }

  export type SecurityEventUpdateManyWithoutResolvedByNestedInput = {
    create?: XOR<SecurityEventCreateWithoutResolvedByInput, SecurityEventUncheckedCreateWithoutResolvedByInput> | SecurityEventCreateWithoutResolvedByInput[] | SecurityEventUncheckedCreateWithoutResolvedByInput[]
    connectOrCreate?: SecurityEventCreateOrConnectWithoutResolvedByInput | SecurityEventCreateOrConnectWithoutResolvedByInput[]
    upsert?: SecurityEventUpsertWithWhereUniqueWithoutResolvedByInput | SecurityEventUpsertWithWhereUniqueWithoutResolvedByInput[]
    createMany?: SecurityEventCreateManyResolvedByInputEnvelope
    set?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    disconnect?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    delete?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    connect?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    update?: SecurityEventUpdateWithWhereUniqueWithoutResolvedByInput | SecurityEventUpdateWithWhereUniqueWithoutResolvedByInput[]
    updateMany?: SecurityEventUpdateManyWithWhereWithoutResolvedByInput | SecurityEventUpdateManyWithWhereWithoutResolvedByInput[]
    deleteMany?: SecurityEventScalarWhereInput | SecurityEventScalarWhereInput[]
  }

  export type PermissionContextUpdateManyWithoutUserNestedInput = {
    create?: XOR<PermissionContextCreateWithoutUserInput, PermissionContextUncheckedCreateWithoutUserInput> | PermissionContextCreateWithoutUserInput[] | PermissionContextUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PermissionContextCreateOrConnectWithoutUserInput | PermissionContextCreateOrConnectWithoutUserInput[]
    upsert?: PermissionContextUpsertWithWhereUniqueWithoutUserInput | PermissionContextUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PermissionContextCreateManyUserInputEnvelope
    set?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    disconnect?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    delete?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    connect?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    update?: PermissionContextUpdateWithWhereUniqueWithoutUserInput | PermissionContextUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PermissionContextUpdateManyWithWhereWithoutUserInput | PermissionContextUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PermissionContextScalarWhereInput | PermissionContextScalarWhereInput[]
  }

  export type AccountActionUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<AccountActionCreateWithoutAgentInput, AccountActionUncheckedCreateWithoutAgentInput> | AccountActionCreateWithoutAgentInput[] | AccountActionUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: AccountActionCreateOrConnectWithoutAgentInput | AccountActionCreateOrConnectWithoutAgentInput[]
    upsert?: AccountActionUpsertWithWhereUniqueWithoutAgentInput | AccountActionUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: AccountActionCreateManyAgentInputEnvelope
    set?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    disconnect?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    delete?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    connect?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    update?: AccountActionUpdateWithWhereUniqueWithoutAgentInput | AccountActionUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: AccountActionUpdateManyWithWhereWithoutAgentInput | AccountActionUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: AccountActionScalarWhereInput | AccountActionScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput = {
    create?: XOR<AccountCreateWithoutAssignedAgentInput, AccountUncheckedCreateWithoutAssignedAgentInput> | AccountCreateWithoutAssignedAgentInput[] | AccountUncheckedCreateWithoutAssignedAgentInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutAssignedAgentInput | AccountCreateOrConnectWithoutAssignedAgentInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutAssignedAgentInput | AccountUpsertWithWhereUniqueWithoutAssignedAgentInput[]
    createMany?: AccountCreateManyAssignedAgentInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutAssignedAgentInput | AccountUpdateWithWhereUniqueWithoutAssignedAgentInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutAssignedAgentInput | AccountUpdateManyWithWhereWithoutAssignedAgentInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type CallUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<CallCreateWithoutAgentInput, CallUncheckedCreateWithoutAgentInput> | CallCreateWithoutAgentInput[] | CallUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: CallCreateOrConnectWithoutAgentInput | CallCreateOrConnectWithoutAgentInput[]
    upsert?: CallUpsertWithWhereUniqueWithoutAgentInput | CallUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: CallCreateManyAgentInputEnvelope
    set?: CallWhereUniqueInput | CallWhereUniqueInput[]
    disconnect?: CallWhereUniqueInput | CallWhereUniqueInput[]
    delete?: CallWhereUniqueInput | CallWhereUniqueInput[]
    connect?: CallWhereUniqueInput | CallWhereUniqueInput[]
    update?: CallUpdateWithWhereUniqueWithoutAgentInput | CallUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: CallUpdateManyWithWhereWithoutAgentInput | CallUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: CallScalarWhereInput | CallScalarWhereInput[]
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput> | RefreshTokenCreateWithoutUserInput[] | RefreshTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput | RefreshTokenCreateOrConnectWithoutUserInput[]
    upsert?: RefreshTokenUpsertWithWhereUniqueWithoutUserInput | RefreshTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RefreshTokenCreateManyUserInputEnvelope
    set?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    disconnect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    delete?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    connect?: RefreshTokenWhereUniqueInput | RefreshTokenWhereUniqueInput[]
    update?: RefreshTokenUpdateWithWhereUniqueWithoutUserInput | RefreshTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RefreshTokenUpdateManyWithWhereWithoutUserInput | RefreshTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
  }

  export type UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<UploadBatchCreateWithoutUploadedByInput, UploadBatchUncheckedCreateWithoutUploadedByInput> | UploadBatchCreateWithoutUploadedByInput[] | UploadBatchUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: UploadBatchCreateOrConnectWithoutUploadedByInput | UploadBatchCreateOrConnectWithoutUploadedByInput[]
    upsert?: UploadBatchUpsertWithWhereUniqueWithoutUploadedByInput | UploadBatchUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: UploadBatchCreateManyUploadedByInputEnvelope
    set?: UploadBatchWhereUniqueInput | UploadBatchWhereUniqueInput[]
    disconnect?: UploadBatchWhereUniqueInput | UploadBatchWhereUniqueInput[]
    delete?: UploadBatchWhereUniqueInput | UploadBatchWhereUniqueInput[]
    connect?: UploadBatchWhereUniqueInput | UploadBatchWhereUniqueInput[]
    update?: UploadBatchUpdateWithWhereUniqueWithoutUploadedByInput | UploadBatchUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: UploadBatchUpdateManyWithWhereWithoutUploadedByInput | UploadBatchUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: UploadBatchScalarWhereInput | UploadBatchScalarWhereInput[]
  }

  export type RoleUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<RoleCreateWithoutCreatedByInput, RoleUncheckedCreateWithoutCreatedByInput> | RoleCreateWithoutCreatedByInput[] | RoleUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutCreatedByInput | RoleCreateOrConnectWithoutCreatedByInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutCreatedByInput | RoleUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: RoleCreateManyCreatedByInputEnvelope
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutCreatedByInput | RoleUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutCreatedByInput | RoleUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput = {
    create?: XOR<UserRoleCreateWithoutAssignedByInput, UserRoleUncheckedCreateWithoutAssignedByInput> | UserRoleCreateWithoutAssignedByInput[] | UserRoleUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutAssignedByInput | UserRoleCreateOrConnectWithoutAssignedByInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutAssignedByInput | UserRoleUpsertWithWhereUniqueWithoutAssignedByInput[]
    createMany?: UserRoleCreateManyAssignedByInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutAssignedByInput | UserRoleUpdateWithWhereUniqueWithoutAssignedByInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutAssignedByInput | UserRoleUpdateManyWithWhereWithoutAssignedByInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput = {
    create?: XOR<RolePermissionCreateWithoutGrantedByInput, RolePermissionUncheckedCreateWithoutGrantedByInput> | RolePermissionCreateWithoutGrantedByInput[] | RolePermissionUncheckedCreateWithoutGrantedByInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutGrantedByInput | RolePermissionCreateOrConnectWithoutGrantedByInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutGrantedByInput | RolePermissionUpsertWithWhereUniqueWithoutGrantedByInput[]
    createMany?: RolePermissionCreateManyGrantedByInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutGrantedByInput | RolePermissionUpdateWithWhereUniqueWithoutGrantedByInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutGrantedByInput | RolePermissionUpdateManyWithWhereWithoutGrantedByInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutActorNestedInput = {
    create?: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput> | AuditLogCreateWithoutActorInput[] | AuditLogUncheckedCreateWithoutActorInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutActorInput | AuditLogCreateOrConnectWithoutActorInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutActorInput | AuditLogUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: AuditLogCreateManyActorInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutActorInput | AuditLogUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutActorInput | AuditLogUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserMFAUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserMFACreateWithoutUserInput, UserMFAUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserMFACreateOrConnectWithoutUserInput
    upsert?: UserMFAUpsertWithoutUserInput
    disconnect?: UserMFAWhereInput | boolean
    delete?: UserMFAWhereInput | boolean
    connect?: UserMFAWhereUniqueInput
    update?: XOR<XOR<UserMFAUpdateToOneWithWhereWithoutUserInput, UserMFAUpdateWithoutUserInput>, UserMFAUncheckedUpdateWithoutUserInput>
  }

  export type UserSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type SecurityEventUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SecurityEventCreateWithoutUserInput, SecurityEventUncheckedCreateWithoutUserInput> | SecurityEventCreateWithoutUserInput[] | SecurityEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SecurityEventCreateOrConnectWithoutUserInput | SecurityEventCreateOrConnectWithoutUserInput[]
    upsert?: SecurityEventUpsertWithWhereUniqueWithoutUserInput | SecurityEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SecurityEventCreateManyUserInputEnvelope
    set?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    disconnect?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    delete?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    connect?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    update?: SecurityEventUpdateWithWhereUniqueWithoutUserInput | SecurityEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SecurityEventUpdateManyWithWhereWithoutUserInput | SecurityEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SecurityEventScalarWhereInput | SecurityEventScalarWhereInput[]
  }

  export type SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput = {
    create?: XOR<SecurityEventCreateWithoutResolvedByInput, SecurityEventUncheckedCreateWithoutResolvedByInput> | SecurityEventCreateWithoutResolvedByInput[] | SecurityEventUncheckedCreateWithoutResolvedByInput[]
    connectOrCreate?: SecurityEventCreateOrConnectWithoutResolvedByInput | SecurityEventCreateOrConnectWithoutResolvedByInput[]
    upsert?: SecurityEventUpsertWithWhereUniqueWithoutResolvedByInput | SecurityEventUpsertWithWhereUniqueWithoutResolvedByInput[]
    createMany?: SecurityEventCreateManyResolvedByInputEnvelope
    set?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    disconnect?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    delete?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    connect?: SecurityEventWhereUniqueInput | SecurityEventWhereUniqueInput[]
    update?: SecurityEventUpdateWithWhereUniqueWithoutResolvedByInput | SecurityEventUpdateWithWhereUniqueWithoutResolvedByInput[]
    updateMany?: SecurityEventUpdateManyWithWhereWithoutResolvedByInput | SecurityEventUpdateManyWithWhereWithoutResolvedByInput[]
    deleteMany?: SecurityEventScalarWhereInput | SecurityEventScalarWhereInput[]
  }

  export type PermissionContextUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PermissionContextCreateWithoutUserInput, PermissionContextUncheckedCreateWithoutUserInput> | PermissionContextCreateWithoutUserInput[] | PermissionContextUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PermissionContextCreateOrConnectWithoutUserInput | PermissionContextCreateOrConnectWithoutUserInput[]
    upsert?: PermissionContextUpsertWithWhereUniqueWithoutUserInput | PermissionContextUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PermissionContextCreateManyUserInputEnvelope
    set?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    disconnect?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    delete?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    connect?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    update?: PermissionContextUpdateWithWhereUniqueWithoutUserInput | PermissionContextUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PermissionContextUpdateManyWithWhereWithoutUserInput | PermissionContextUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PermissionContextScalarWhereInput | PermissionContextScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRefreshTokensInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRefreshTokensNestedInput = {
    create?: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokensInput
    upsert?: UserUpsertWithoutRefreshTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRefreshTokensInput, UserUpdateWithoutRefreshTokensInput>, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type AccountActionCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountActionCreateWithoutAccountInput, AccountActionUncheckedCreateWithoutAccountInput> | AccountActionCreateWithoutAccountInput[] | AccountActionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountActionCreateOrConnectWithoutAccountInput | AccountActionCreateOrConnectWithoutAccountInput[]
    createMany?: AccountActionCreateManyAccountInputEnvelope
    connect?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
  }

  export type AccountPhoneCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountPhoneCreateWithoutAccountInput, AccountPhoneUncheckedCreateWithoutAccountInput> | AccountPhoneCreateWithoutAccountInput[] | AccountPhoneUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountPhoneCreateOrConnectWithoutAccountInput | AccountPhoneCreateOrConnectWithoutAccountInput[]
    createMany?: AccountPhoneCreateManyAccountInputEnvelope
    connect?: AccountPhoneWhereUniqueInput | AccountPhoneWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutAssignedAccountsInput = {
    create?: XOR<UserCreateWithoutAssignedAccountsInput, UserUncheckedCreateWithoutAssignedAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type CallCreateNestedManyWithoutAccountInput = {
    create?: XOR<CallCreateWithoutAccountInput, CallUncheckedCreateWithoutAccountInput> | CallCreateWithoutAccountInput[] | CallUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: CallCreateOrConnectWithoutAccountInput | CallCreateOrConnectWithoutAccountInput[]
    createMany?: CallCreateManyAccountInputEnvelope
    connect?: CallWhereUniqueInput | CallWhereUniqueInput[]
  }

  export type AccountActionUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountActionCreateWithoutAccountInput, AccountActionUncheckedCreateWithoutAccountInput> | AccountActionCreateWithoutAccountInput[] | AccountActionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountActionCreateOrConnectWithoutAccountInput | AccountActionCreateOrConnectWithoutAccountInput[]
    createMany?: AccountActionCreateManyAccountInputEnvelope
    connect?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
  }

  export type AccountPhoneUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<AccountPhoneCreateWithoutAccountInput, AccountPhoneUncheckedCreateWithoutAccountInput> | AccountPhoneCreateWithoutAccountInput[] | AccountPhoneUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountPhoneCreateOrConnectWithoutAccountInput | AccountPhoneCreateOrConnectWithoutAccountInput[]
    createMany?: AccountPhoneCreateManyAccountInputEnvelope
    connect?: AccountPhoneWhereUniqueInput | AccountPhoneWhereUniqueInput[]
  }

  export type CallUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<CallCreateWithoutAccountInput, CallUncheckedCreateWithoutAccountInput> | CallCreateWithoutAccountInput[] | CallUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: CallCreateOrConnectWithoutAccountInput | CallCreateOrConnectWithoutAccountInput[]
    createMany?: CallCreateManyAccountInputEnvelope
    connect?: CallWhereUniqueInput | CallWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountActionUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountActionCreateWithoutAccountInput, AccountActionUncheckedCreateWithoutAccountInput> | AccountActionCreateWithoutAccountInput[] | AccountActionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountActionCreateOrConnectWithoutAccountInput | AccountActionCreateOrConnectWithoutAccountInput[]
    upsert?: AccountActionUpsertWithWhereUniqueWithoutAccountInput | AccountActionUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountActionCreateManyAccountInputEnvelope
    set?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    disconnect?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    delete?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    connect?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    update?: AccountActionUpdateWithWhereUniqueWithoutAccountInput | AccountActionUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountActionUpdateManyWithWhereWithoutAccountInput | AccountActionUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountActionScalarWhereInput | AccountActionScalarWhereInput[]
  }

  export type AccountPhoneUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountPhoneCreateWithoutAccountInput, AccountPhoneUncheckedCreateWithoutAccountInput> | AccountPhoneCreateWithoutAccountInput[] | AccountPhoneUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountPhoneCreateOrConnectWithoutAccountInput | AccountPhoneCreateOrConnectWithoutAccountInput[]
    upsert?: AccountPhoneUpsertWithWhereUniqueWithoutAccountInput | AccountPhoneUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountPhoneCreateManyAccountInputEnvelope
    set?: AccountPhoneWhereUniqueInput | AccountPhoneWhereUniqueInput[]
    disconnect?: AccountPhoneWhereUniqueInput | AccountPhoneWhereUniqueInput[]
    delete?: AccountPhoneWhereUniqueInput | AccountPhoneWhereUniqueInput[]
    connect?: AccountPhoneWhereUniqueInput | AccountPhoneWhereUniqueInput[]
    update?: AccountPhoneUpdateWithWhereUniqueWithoutAccountInput | AccountPhoneUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountPhoneUpdateManyWithWhereWithoutAccountInput | AccountPhoneUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountPhoneScalarWhereInput | AccountPhoneScalarWhereInput[]
  }

  export type UserUpdateOneWithoutAssignedAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedAccountsInput, UserUncheckedCreateWithoutAssignedAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedAccountsInput
    upsert?: UserUpsertWithoutAssignedAccountsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedAccountsInput, UserUpdateWithoutAssignedAccountsInput>, UserUncheckedUpdateWithoutAssignedAccountsInput>
  }

  export type CallUpdateManyWithoutAccountNestedInput = {
    create?: XOR<CallCreateWithoutAccountInput, CallUncheckedCreateWithoutAccountInput> | CallCreateWithoutAccountInput[] | CallUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: CallCreateOrConnectWithoutAccountInput | CallCreateOrConnectWithoutAccountInput[]
    upsert?: CallUpsertWithWhereUniqueWithoutAccountInput | CallUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: CallCreateManyAccountInputEnvelope
    set?: CallWhereUniqueInput | CallWhereUniqueInput[]
    disconnect?: CallWhereUniqueInput | CallWhereUniqueInput[]
    delete?: CallWhereUniqueInput | CallWhereUniqueInput[]
    connect?: CallWhereUniqueInput | CallWhereUniqueInput[]
    update?: CallUpdateWithWhereUniqueWithoutAccountInput | CallUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: CallUpdateManyWithWhereWithoutAccountInput | CallUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: CallScalarWhereInput | CallScalarWhereInput[]
  }

  export type AccountActionUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountActionCreateWithoutAccountInput, AccountActionUncheckedCreateWithoutAccountInput> | AccountActionCreateWithoutAccountInput[] | AccountActionUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountActionCreateOrConnectWithoutAccountInput | AccountActionCreateOrConnectWithoutAccountInput[]
    upsert?: AccountActionUpsertWithWhereUniqueWithoutAccountInput | AccountActionUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountActionCreateManyAccountInputEnvelope
    set?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    disconnect?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    delete?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    connect?: AccountActionWhereUniqueInput | AccountActionWhereUniqueInput[]
    update?: AccountActionUpdateWithWhereUniqueWithoutAccountInput | AccountActionUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountActionUpdateManyWithWhereWithoutAccountInput | AccountActionUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountActionScalarWhereInput | AccountActionScalarWhereInput[]
  }

  export type AccountPhoneUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<AccountPhoneCreateWithoutAccountInput, AccountPhoneUncheckedCreateWithoutAccountInput> | AccountPhoneCreateWithoutAccountInput[] | AccountPhoneUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: AccountPhoneCreateOrConnectWithoutAccountInput | AccountPhoneCreateOrConnectWithoutAccountInput[]
    upsert?: AccountPhoneUpsertWithWhereUniqueWithoutAccountInput | AccountPhoneUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: AccountPhoneCreateManyAccountInputEnvelope
    set?: AccountPhoneWhereUniqueInput | AccountPhoneWhereUniqueInput[]
    disconnect?: AccountPhoneWhereUniqueInput | AccountPhoneWhereUniqueInput[]
    delete?: AccountPhoneWhereUniqueInput | AccountPhoneWhereUniqueInput[]
    connect?: AccountPhoneWhereUniqueInput | AccountPhoneWhereUniqueInput[]
    update?: AccountPhoneUpdateWithWhereUniqueWithoutAccountInput | AccountPhoneUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: AccountPhoneUpdateManyWithWhereWithoutAccountInput | AccountPhoneUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: AccountPhoneScalarWhereInput | AccountPhoneScalarWhereInput[]
  }

  export type CallUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<CallCreateWithoutAccountInput, CallUncheckedCreateWithoutAccountInput> | CallCreateWithoutAccountInput[] | CallUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: CallCreateOrConnectWithoutAccountInput | CallCreateOrConnectWithoutAccountInput[]
    upsert?: CallUpsertWithWhereUniqueWithoutAccountInput | CallUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: CallCreateManyAccountInputEnvelope
    set?: CallWhereUniqueInput | CallWhereUniqueInput[]
    disconnect?: CallWhereUniqueInput | CallWhereUniqueInput[]
    delete?: CallWhereUniqueInput | CallWhereUniqueInput[]
    connect?: CallWhereUniqueInput | CallWhereUniqueInput[]
    update?: CallUpdateWithWhereUniqueWithoutAccountInput | CallUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: CallUpdateManyWithWhereWithoutAccountInput | CallUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: CallScalarWhereInput | CallScalarWhereInput[]
  }

  export type AccountCreateNestedOneWithoutPhoneNumbersInput = {
    create?: XOR<AccountCreateWithoutPhoneNumbersInput, AccountUncheckedCreateWithoutPhoneNumbersInput>
    connectOrCreate?: AccountCreateOrConnectWithoutPhoneNumbersInput
    connect?: AccountWhereUniqueInput
  }

  export type CallCreateNestedManyWithoutAccountPhoneInput = {
    create?: XOR<CallCreateWithoutAccountPhoneInput, CallUncheckedCreateWithoutAccountPhoneInput> | CallCreateWithoutAccountPhoneInput[] | CallUncheckedCreateWithoutAccountPhoneInput[]
    connectOrCreate?: CallCreateOrConnectWithoutAccountPhoneInput | CallCreateOrConnectWithoutAccountPhoneInput[]
    createMany?: CallCreateManyAccountPhoneInputEnvelope
    connect?: CallWhereUniqueInput | CallWhereUniqueInput[]
  }

  export type CallUncheckedCreateNestedManyWithoutAccountPhoneInput = {
    create?: XOR<CallCreateWithoutAccountPhoneInput, CallUncheckedCreateWithoutAccountPhoneInput> | CallCreateWithoutAccountPhoneInput[] | CallUncheckedCreateWithoutAccountPhoneInput[]
    connectOrCreate?: CallCreateOrConnectWithoutAccountPhoneInput | CallCreateOrConnectWithoutAccountPhoneInput[]
    createMany?: CallCreateManyAccountPhoneInputEnvelope
    connect?: CallWhereUniqueInput | CallWhereUniqueInput[]
  }

  export type AccountUpdateOneRequiredWithoutPhoneNumbersNestedInput = {
    create?: XOR<AccountCreateWithoutPhoneNumbersInput, AccountUncheckedCreateWithoutPhoneNumbersInput>
    connectOrCreate?: AccountCreateOrConnectWithoutPhoneNumbersInput
    upsert?: AccountUpsertWithoutPhoneNumbersInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutPhoneNumbersInput, AccountUpdateWithoutPhoneNumbersInput>, AccountUncheckedUpdateWithoutPhoneNumbersInput>
  }

  export type CallUpdateManyWithoutAccountPhoneNestedInput = {
    create?: XOR<CallCreateWithoutAccountPhoneInput, CallUncheckedCreateWithoutAccountPhoneInput> | CallCreateWithoutAccountPhoneInput[] | CallUncheckedCreateWithoutAccountPhoneInput[]
    connectOrCreate?: CallCreateOrConnectWithoutAccountPhoneInput | CallCreateOrConnectWithoutAccountPhoneInput[]
    upsert?: CallUpsertWithWhereUniqueWithoutAccountPhoneInput | CallUpsertWithWhereUniqueWithoutAccountPhoneInput[]
    createMany?: CallCreateManyAccountPhoneInputEnvelope
    set?: CallWhereUniqueInput | CallWhereUniqueInput[]
    disconnect?: CallWhereUniqueInput | CallWhereUniqueInput[]
    delete?: CallWhereUniqueInput | CallWhereUniqueInput[]
    connect?: CallWhereUniqueInput | CallWhereUniqueInput[]
    update?: CallUpdateWithWhereUniqueWithoutAccountPhoneInput | CallUpdateWithWhereUniqueWithoutAccountPhoneInput[]
    updateMany?: CallUpdateManyWithWhereWithoutAccountPhoneInput | CallUpdateManyWithWhereWithoutAccountPhoneInput[]
    deleteMany?: CallScalarWhereInput | CallScalarWhereInput[]
  }

  export type CallUncheckedUpdateManyWithoutAccountPhoneNestedInput = {
    create?: XOR<CallCreateWithoutAccountPhoneInput, CallUncheckedCreateWithoutAccountPhoneInput> | CallCreateWithoutAccountPhoneInput[] | CallUncheckedCreateWithoutAccountPhoneInput[]
    connectOrCreate?: CallCreateOrConnectWithoutAccountPhoneInput | CallCreateOrConnectWithoutAccountPhoneInput[]
    upsert?: CallUpsertWithWhereUniqueWithoutAccountPhoneInput | CallUpsertWithWhereUniqueWithoutAccountPhoneInput[]
    createMany?: CallCreateManyAccountPhoneInputEnvelope
    set?: CallWhereUniqueInput | CallWhereUniqueInput[]
    disconnect?: CallWhereUniqueInput | CallWhereUniqueInput[]
    delete?: CallWhereUniqueInput | CallWhereUniqueInput[]
    connect?: CallWhereUniqueInput | CallWhereUniqueInput[]
    update?: CallUpdateWithWhereUniqueWithoutAccountPhoneInput | CallUpdateWithWhereUniqueWithoutAccountPhoneInput[]
    updateMany?: CallUpdateManyWithWhereWithoutAccountPhoneInput | CallUpdateManyWithWhereWithoutAccountPhoneInput[]
    deleteMany?: CallScalarWhereInput | CallScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCallsInput = {
    create?: XOR<UserCreateWithoutCallsInput, UserUncheckedCreateWithoutCallsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCallsInput
    connect?: UserWhereUniqueInput
  }

  export type AccountPhoneCreateNestedOneWithoutCallsInput = {
    create?: XOR<AccountPhoneCreateWithoutCallsInput, AccountPhoneUncheckedCreateWithoutCallsInput>
    connectOrCreate?: AccountPhoneCreateOrConnectWithoutCallsInput
    connect?: AccountPhoneWhereUniqueInput
  }

  export type AccountCreateNestedOneWithoutCallsInput = {
    create?: XOR<AccountCreateWithoutCallsInput, AccountUncheckedCreateWithoutCallsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutCallsInput
    connect?: AccountWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutCallsNestedInput = {
    create?: XOR<UserCreateWithoutCallsInput, UserUncheckedCreateWithoutCallsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCallsInput
    upsert?: UserUpsertWithoutCallsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCallsInput, UserUpdateWithoutCallsInput>, UserUncheckedUpdateWithoutCallsInput>
  }

  export type AccountPhoneUpdateOneWithoutCallsNestedInput = {
    create?: XOR<AccountPhoneCreateWithoutCallsInput, AccountPhoneUncheckedCreateWithoutCallsInput>
    connectOrCreate?: AccountPhoneCreateOrConnectWithoutCallsInput
    upsert?: AccountPhoneUpsertWithoutCallsInput
    disconnect?: AccountPhoneWhereInput | boolean
    delete?: AccountPhoneWhereInput | boolean
    connect?: AccountPhoneWhereUniqueInput
    update?: XOR<XOR<AccountPhoneUpdateToOneWithWhereWithoutCallsInput, AccountPhoneUpdateWithoutCallsInput>, AccountPhoneUncheckedUpdateWithoutCallsInput>
  }

  export type AccountUpdateOneRequiredWithoutCallsNestedInput = {
    create?: XOR<AccountCreateWithoutCallsInput, AccountUncheckedCreateWithoutCallsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutCallsInput
    upsert?: AccountUpsertWithoutCallsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutCallsInput, AccountUpdateWithoutCallsInput>, AccountUncheckedUpdateWithoutCallsInput>
  }

  export type UserCreateNestedOneWithoutAccountActionsInput = {
    create?: XOR<UserCreateWithoutAccountActionsInput, UserUncheckedCreateWithoutAccountActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountActionsInput
    connect?: UserWhereUniqueInput
  }

  export type AccountCreateNestedOneWithoutActionsInput = {
    create?: XOR<AccountCreateWithoutActionsInput, AccountUncheckedCreateWithoutActionsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutActionsInput
    connect?: AccountWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountActionsNestedInput = {
    create?: XOR<UserCreateWithoutAccountActionsInput, UserUncheckedCreateWithoutAccountActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountActionsInput
    upsert?: UserUpsertWithoutAccountActionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountActionsInput, UserUpdateWithoutAccountActionsInput>, UserUncheckedUpdateWithoutAccountActionsInput>
  }

  export type AccountUpdateOneRequiredWithoutActionsNestedInput = {
    create?: XOR<AccountCreateWithoutActionsInput, AccountUncheckedCreateWithoutActionsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutActionsInput
    upsert?: AccountUpsertWithoutActionsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutActionsInput, AccountUpdateWithoutActionsInput>, AccountUncheckedUpdateWithoutActionsInput>
  }

  export type UserCreateNestedOneWithoutUploadBatchesInput = {
    create?: XOR<UserCreateWithoutUploadBatchesInput, UserUncheckedCreateWithoutUploadBatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadBatchesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUploadBatchesNestedInput = {
    create?: XOR<UserCreateWithoutUploadBatchesInput, UserUncheckedCreateWithoutUploadBatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadBatchesInput
    upsert?: UserUpsertWithoutUploadBatchesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUploadBatchesInput, UserUpdateWithoutUploadBatchesInput>, UserUncheckedUpdateWithoutUploadBatchesInput>
  }

  export type RolePermissionCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserRoleCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedRolesInput = {
    create?: XOR<UserCreateWithoutCreatedRolesInput, UserUncheckedCreateWithoutCreatedRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRolesInput
    connect?: UserWhereUniqueInput
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type RolePermissionUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserRoleUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type UserUpdateOneWithoutCreatedRolesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedRolesInput, UserUncheckedCreateWithoutCreatedRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRolesInput
    upsert?: UserUpsertWithoutCreatedRolesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedRolesInput, UserUpdateWithoutCreatedRolesInput>, UserUncheckedUpdateWithoutCreatedRolesInput>
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type RolePermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type PermissionContextCreateNestedManyWithoutPermissionInput = {
    create?: XOR<PermissionContextCreateWithoutPermissionInput, PermissionContextUncheckedCreateWithoutPermissionInput> | PermissionContextCreateWithoutPermissionInput[] | PermissionContextUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: PermissionContextCreateOrConnectWithoutPermissionInput | PermissionContextCreateOrConnectWithoutPermissionInput[]
    createMany?: PermissionContextCreateManyPermissionInputEnvelope
    connect?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type PermissionContextUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<PermissionContextCreateWithoutPermissionInput, PermissionContextUncheckedCreateWithoutPermissionInput> | PermissionContextCreateWithoutPermissionInput[] | PermissionContextUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: PermissionContextCreateOrConnectWithoutPermissionInput | PermissionContextCreateOrConnectWithoutPermissionInput[]
    createMany?: PermissionContextCreateManyPermissionInputEnvelope
    connect?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
  }

  export type RolePermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type PermissionContextUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<PermissionContextCreateWithoutPermissionInput, PermissionContextUncheckedCreateWithoutPermissionInput> | PermissionContextCreateWithoutPermissionInput[] | PermissionContextUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: PermissionContextCreateOrConnectWithoutPermissionInput | PermissionContextCreateOrConnectWithoutPermissionInput[]
    upsert?: PermissionContextUpsertWithWhereUniqueWithoutPermissionInput | PermissionContextUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: PermissionContextCreateManyPermissionInputEnvelope
    set?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    disconnect?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    delete?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    connect?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    update?: PermissionContextUpdateWithWhereUniqueWithoutPermissionInput | PermissionContextUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: PermissionContextUpdateManyWithWhereWithoutPermissionInput | PermissionContextUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: PermissionContextScalarWhereInput | PermissionContextScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type PermissionContextUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<PermissionContextCreateWithoutPermissionInput, PermissionContextUncheckedCreateWithoutPermissionInput> | PermissionContextCreateWithoutPermissionInput[] | PermissionContextUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: PermissionContextCreateOrConnectWithoutPermissionInput | PermissionContextCreateOrConnectWithoutPermissionInput[]
    upsert?: PermissionContextUpsertWithWhereUniqueWithoutPermissionInput | PermissionContextUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: PermissionContextCreateManyPermissionInputEnvelope
    set?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    disconnect?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    delete?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    connect?: PermissionContextWhereUniqueInput | PermissionContextWhereUniqueInput[]
    update?: PermissionContextUpdateWithWhereUniqueWithoutPermissionInput | PermissionContextUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: PermissionContextUpdateManyWithWhereWithoutPermissionInput | PermissionContextUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: PermissionContextScalarWhereInput | PermissionContextScalarWhereInput[]
  }

  export type RoleCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput
    connect?: RoleWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutRolePermissionsInput = {
    create?: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolePermissionsInput
    connect?: PermissionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGrantedPermissionsInput = {
    create?: XOR<UserCreateWithoutGrantedPermissionsInput, UserUncheckedCreateWithoutGrantedPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGrantedPermissionsInput
    connect?: UserWhereUniqueInput
  }

  export type RoleUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput
    upsert?: RoleUpsertWithoutPermissionsInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutPermissionsInput, RoleUpdateWithoutPermissionsInput>, RoleUncheckedUpdateWithoutPermissionsInput>
  }

  export type PermissionUpdateOneRequiredWithoutRolePermissionsNestedInput = {
    create?: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolePermissionsInput
    upsert?: PermissionUpsertWithoutRolePermissionsInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutRolePermissionsInput, PermissionUpdateWithoutRolePermissionsInput>, PermissionUncheckedUpdateWithoutRolePermissionsInput>
  }

  export type UserUpdateOneWithoutGrantedPermissionsNestedInput = {
    create?: XOR<UserCreateWithoutGrantedPermissionsInput, UserUncheckedCreateWithoutGrantedPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGrantedPermissionsInput
    upsert?: UserUpsertWithoutGrantedPermissionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGrantedPermissionsInput, UserUpdateWithoutGrantedPermissionsInput>, UserUncheckedUpdateWithoutGrantedPermissionsInput>
  }

  export type UserCreateNestedOneWithoutUserRolesInput = {
    create?: XOR<UserCreateWithoutUserRolesInput, UserUncheckedCreateWithoutUserRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRolesInput
    connect?: UserWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutUserRolesInput = {
    create?: XOR<RoleCreateWithoutUserRolesInput, RoleUncheckedCreateWithoutUserRolesInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserRolesInput
    connect?: RoleWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedRolesInput = {
    create?: XOR<UserCreateWithoutAssignedRolesInput, UserUncheckedCreateWithoutAssignedRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedRolesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserRolesNestedInput = {
    create?: XOR<UserCreateWithoutUserRolesInput, UserUncheckedCreateWithoutUserRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRolesInput
    upsert?: UserUpsertWithoutUserRolesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserRolesInput, UserUpdateWithoutUserRolesInput>, UserUncheckedUpdateWithoutUserRolesInput>
  }

  export type RoleUpdateOneRequiredWithoutUserRolesNestedInput = {
    create?: XOR<RoleCreateWithoutUserRolesInput, RoleUncheckedCreateWithoutUserRolesInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserRolesInput
    upsert?: RoleUpsertWithoutUserRolesInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUserRolesInput, RoleUpdateWithoutUserRolesInput>, RoleUncheckedUpdateWithoutUserRolesInput>
  }

  export type UserUpdateOneWithoutAssignedRolesNestedInput = {
    create?: XOR<UserCreateWithoutAssignedRolesInput, UserUncheckedCreateWithoutAssignedRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedRolesInput
    upsert?: UserUpsertWithoutAssignedRolesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedRolesInput, UserUpdateWithoutAssignedRolesInput>, UserUncheckedUpdateWithoutAssignedRolesInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type DispositionCreateNestedManyWithoutCategoryInput = {
    create?: XOR<DispositionCreateWithoutCategoryInput, DispositionUncheckedCreateWithoutCategoryInput> | DispositionCreateWithoutCategoryInput[] | DispositionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: DispositionCreateOrConnectWithoutCategoryInput | DispositionCreateOrConnectWithoutCategoryInput[]
    createMany?: DispositionCreateManyCategoryInputEnvelope
    connect?: DispositionWhereUniqueInput | DispositionWhereUniqueInput[]
  }

  export type DispositionUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<DispositionCreateWithoutCategoryInput, DispositionUncheckedCreateWithoutCategoryInput> | DispositionCreateWithoutCategoryInput[] | DispositionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: DispositionCreateOrConnectWithoutCategoryInput | DispositionCreateOrConnectWithoutCategoryInput[]
    createMany?: DispositionCreateManyCategoryInputEnvelope
    connect?: DispositionWhereUniqueInput | DispositionWhereUniqueInput[]
  }

  export type DispositionUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<DispositionCreateWithoutCategoryInput, DispositionUncheckedCreateWithoutCategoryInput> | DispositionCreateWithoutCategoryInput[] | DispositionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: DispositionCreateOrConnectWithoutCategoryInput | DispositionCreateOrConnectWithoutCategoryInput[]
    upsert?: DispositionUpsertWithWhereUniqueWithoutCategoryInput | DispositionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: DispositionCreateManyCategoryInputEnvelope
    set?: DispositionWhereUniqueInput | DispositionWhereUniqueInput[]
    disconnect?: DispositionWhereUniqueInput | DispositionWhereUniqueInput[]
    delete?: DispositionWhereUniqueInput | DispositionWhereUniqueInput[]
    connect?: DispositionWhereUniqueInput | DispositionWhereUniqueInput[]
    update?: DispositionUpdateWithWhereUniqueWithoutCategoryInput | DispositionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: DispositionUpdateManyWithWhereWithoutCategoryInput | DispositionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: DispositionScalarWhereInput | DispositionScalarWhereInput[]
  }

  export type DispositionUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<DispositionCreateWithoutCategoryInput, DispositionUncheckedCreateWithoutCategoryInput> | DispositionCreateWithoutCategoryInput[] | DispositionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: DispositionCreateOrConnectWithoutCategoryInput | DispositionCreateOrConnectWithoutCategoryInput[]
    upsert?: DispositionUpsertWithWhereUniqueWithoutCategoryInput | DispositionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: DispositionCreateManyCategoryInputEnvelope
    set?: DispositionWhereUniqueInput | DispositionWhereUniqueInput[]
    disconnect?: DispositionWhereUniqueInput | DispositionWhereUniqueInput[]
    delete?: DispositionWhereUniqueInput | DispositionWhereUniqueInput[]
    connect?: DispositionWhereUniqueInput | DispositionWhereUniqueInput[]
    update?: DispositionUpdateWithWhereUniqueWithoutCategoryInput | DispositionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: DispositionUpdateManyWithWhereWithoutCategoryInput | DispositionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: DispositionScalarWhereInput | DispositionScalarWhereInput[]
  }

  export type DispositionCategoryCreateNestedOneWithoutDispositionsInput = {
    create?: XOR<DispositionCategoryCreateWithoutDispositionsInput, DispositionCategoryUncheckedCreateWithoutDispositionsInput>
    connectOrCreate?: DispositionCategoryCreateOrConnectWithoutDispositionsInput
    connect?: DispositionCategoryWhereUniqueInput
  }

  export type DispositionCategoryUpdateOneRequiredWithoutDispositionsNestedInput = {
    create?: XOR<DispositionCategoryCreateWithoutDispositionsInput, DispositionCategoryUncheckedCreateWithoutDispositionsInput>
    connectOrCreate?: DispositionCategoryCreateOrConnectWithoutDispositionsInput
    upsert?: DispositionCategoryUpsertWithoutDispositionsInput
    connect?: DispositionCategoryWhereUniqueInput
    update?: XOR<XOR<DispositionCategoryUpdateToOneWithWhereWithoutDispositionsInput, DispositionCategoryUpdateWithoutDispositionsInput>, DispositionCategoryUncheckedUpdateWithoutDispositionsInput>
  }

  export type UserCreateNestedOneWithoutMfaConfigInput = {
    create?: XOR<UserCreateWithoutMfaConfigInput, UserUncheckedCreateWithoutMfaConfigInput>
    connectOrCreate?: UserCreateOrConnectWithoutMfaConfigInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMfaConfigNestedInput = {
    create?: XOR<UserCreateWithoutMfaConfigInput, UserUncheckedCreateWithoutMfaConfigInput>
    connectOrCreate?: UserCreateOrConnectWithoutMfaConfigInput
    upsert?: UserUpsertWithoutMfaConfigInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMfaConfigInput, UserUpdateWithoutMfaConfigInput>, UserUncheckedUpdateWithoutMfaConfigInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutSecurityEventsInput = {
    create?: XOR<UserCreateWithoutSecurityEventsInput, UserUncheckedCreateWithoutSecurityEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSecurityEventsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutResolvedSecurityEventsInput = {
    create?: XOR<UserCreateWithoutResolvedSecurityEventsInput, UserUncheckedCreateWithoutResolvedSecurityEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutResolvedSecurityEventsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutSecurityEventsNestedInput = {
    create?: XOR<UserCreateWithoutSecurityEventsInput, UserUncheckedCreateWithoutSecurityEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSecurityEventsInput
    upsert?: UserUpsertWithoutSecurityEventsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSecurityEventsInput, UserUpdateWithoutSecurityEventsInput>, UserUncheckedUpdateWithoutSecurityEventsInput>
  }

  export type UserUpdateOneWithoutResolvedSecurityEventsNestedInput = {
    create?: XOR<UserCreateWithoutResolvedSecurityEventsInput, UserUncheckedCreateWithoutResolvedSecurityEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutResolvedSecurityEventsInput
    upsert?: UserUpsertWithoutResolvedSecurityEventsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResolvedSecurityEventsInput, UserUpdateWithoutResolvedSecurityEventsInput>, UserUncheckedUpdateWithoutResolvedSecurityEventsInput>
  }

  export type UserCreateNestedOneWithoutPermissionContextsInput = {
    create?: XOR<UserCreateWithoutPermissionContextsInput, UserUncheckedCreateWithoutPermissionContextsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionContextsInput
    connect?: UserWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutContextsInput = {
    create?: XOR<PermissionCreateWithoutContextsInput, PermissionUncheckedCreateWithoutContextsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutContextsInput
    connect?: PermissionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPermissionContextsNestedInput = {
    create?: XOR<UserCreateWithoutPermissionContextsInput, UserUncheckedCreateWithoutPermissionContextsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionContextsInput
    upsert?: UserUpsertWithoutPermissionContextsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPermissionContextsInput, UserUpdateWithoutPermissionContextsInput>, UserUncheckedUpdateWithoutPermissionContextsInput>
  }

  export type PermissionUpdateOneRequiredWithoutContextsNestedInput = {
    create?: XOR<PermissionCreateWithoutContextsInput, PermissionUncheckedCreateWithoutContextsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutContextsInput
    upsert?: PermissionUpsertWithoutContextsInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutContextsInput, PermissionUpdateWithoutContextsInput>, PermissionUncheckedUpdateWithoutContextsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type AccountActionCreateWithoutAgentInput = {
    id?: string
    actionType: string
    description: string
    details?: string | null
    createdAt?: Date | string
    account: AccountCreateNestedOneWithoutActionsInput
  }

  export type AccountActionUncheckedCreateWithoutAgentInput = {
    id?: string
    accountId: string
    actionType: string
    description: string
    details?: string | null
    createdAt?: Date | string
  }

  export type AccountActionCreateOrConnectWithoutAgentInput = {
    where: AccountActionWhereUniqueInput
    create: XOR<AccountActionCreateWithoutAgentInput, AccountActionUncheckedCreateWithoutAgentInput>
  }

  export type AccountActionCreateManyAgentInputEnvelope = {
    data: AccountActionCreateManyAgentInput | AccountActionCreateManyAgentInput[]
  }

  export type AccountCreateWithoutAssignedAgentInput = {
    id?: string
    accountNumber: string
    firstName: string
    lastName: string
    fullName: string
    email?: string | null
    address1?: string | null
    address2?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    originalAmount: number
    currentBalance: number
    amountPaid?: number
    interestRate?: number | null
    lastPaymentDate?: Date | string | null
    lastPaymentAmount?: number | null
    status?: string
    priority?: string
    assignedDate?: Date | string | null
    preferredContactMethod?: string | null
    bestTimeToCall?: string | null
    timezone?: string | null
    language?: string | null
    daysPastDue?: number
    lastContactDate?: Date | string | null
    nextContactDate?: Date | string | null
    contactAttempts?: number
    doNotCall?: boolean
    disputeFlag?: boolean
    bankruptcyFlag?: boolean
    deceasedFlag?: boolean
    notes?: string | null
    source?: string | null
    batchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    actions?: AccountActionCreateNestedManyWithoutAccountInput
    phoneNumbers?: AccountPhoneCreateNestedManyWithoutAccountInput
    calls?: CallCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutAssignedAgentInput = {
    id?: string
    accountNumber: string
    firstName: string
    lastName: string
    fullName: string
    email?: string | null
    address1?: string | null
    address2?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    originalAmount: number
    currentBalance: number
    amountPaid?: number
    interestRate?: number | null
    lastPaymentDate?: Date | string | null
    lastPaymentAmount?: number | null
    status?: string
    priority?: string
    assignedDate?: Date | string | null
    preferredContactMethod?: string | null
    bestTimeToCall?: string | null
    timezone?: string | null
    language?: string | null
    daysPastDue?: number
    lastContactDate?: Date | string | null
    nextContactDate?: Date | string | null
    contactAttempts?: number
    doNotCall?: boolean
    disputeFlag?: boolean
    bankruptcyFlag?: boolean
    deceasedFlag?: boolean
    notes?: string | null
    source?: string | null
    batchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    actions?: AccountActionUncheckedCreateNestedManyWithoutAccountInput
    phoneNumbers?: AccountPhoneUncheckedCreateNestedManyWithoutAccountInput
    calls?: CallUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutAssignedAgentInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutAssignedAgentInput, AccountUncheckedCreateWithoutAssignedAgentInput>
  }

  export type AccountCreateManyAssignedAgentInputEnvelope = {
    data: AccountCreateManyAssignedAgentInput | AccountCreateManyAssignedAgentInput[]
  }

  export type CallCreateWithoutAgentInput = {
    id?: string
    direction: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status: string
    disposition?: string | null
    notes?: string | null
    followUpDate?: Date | string | null
    amountPromised?: number | null
    amountCollected?: number | null
    recordingPath?: string | null
    callerId?: string | null
    campaignId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accountPhone?: AccountPhoneCreateNestedOneWithoutCallsInput
    account: AccountCreateNestedOneWithoutCallsInput
  }

  export type CallUncheckedCreateWithoutAgentInput = {
    id?: string
    accountId: string
    accountPhoneId?: string | null
    direction: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status: string
    disposition?: string | null
    notes?: string | null
    followUpDate?: Date | string | null
    amountPromised?: number | null
    amountCollected?: number | null
    recordingPath?: string | null
    callerId?: string | null
    campaignId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CallCreateOrConnectWithoutAgentInput = {
    where: CallWhereUniqueInput
    create: XOR<CallCreateWithoutAgentInput, CallUncheckedCreateWithoutAgentInput>
  }

  export type CallCreateManyAgentInputEnvelope = {
    data: CallCreateManyAgentInput | CallCreateManyAgentInput[]
  }

  export type RefreshTokenCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type RefreshTokenCreateOrConnectWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenCreateManyUserInputEnvelope = {
    data: RefreshTokenCreateManyUserInput | RefreshTokenCreateManyUserInput[]
  }

  export type UploadBatchCreateWithoutUploadedByInput = {
    id?: string
    filename: string
    originalFilename: string
    fileSize: number
    mimeType: string
    totalRecords?: number
    processedRecords?: number
    successCount?: number
    errorCount?: number
    skipCount?: number
    duplicateCount?: number
    status?: string
    batchName?: string | null
    skipErrors?: boolean
    updateExisting?: boolean
    processingStarted?: Date | string | null
    processingCompleted?: Date | string | null
    errorLog?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UploadBatchUncheckedCreateWithoutUploadedByInput = {
    id?: string
    filename: string
    originalFilename: string
    fileSize: number
    mimeType: string
    totalRecords?: number
    processedRecords?: number
    successCount?: number
    errorCount?: number
    skipCount?: number
    duplicateCount?: number
    status?: string
    batchName?: string | null
    skipErrors?: boolean
    updateExisting?: boolean
    processingStarted?: Date | string | null
    processingCompleted?: Date | string | null
    errorLog?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UploadBatchCreateOrConnectWithoutUploadedByInput = {
    where: UploadBatchWhereUniqueInput
    create: XOR<UploadBatchCreateWithoutUploadedByInput, UploadBatchUncheckedCreateWithoutUploadedByInput>
  }

  export type UploadBatchCreateManyUploadedByInputEnvelope = {
    data: UploadBatchCreateManyUploadedByInput | UploadBatchCreateManyUploadedByInput[]
  }

  export type RoleCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
    userRoles?: UserRoleCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutCreatedByInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutCreatedByInput, RoleUncheckedCreateWithoutCreatedByInput>
  }

  export type RoleCreateManyCreatedByInputEnvelope = {
    data: RoleCreateManyCreatedByInput | RoleCreateManyCreatedByInput[]
  }

  export type UserRoleCreateWithoutUserInput = {
    id?: string
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    role: RoleCreateNestedOneWithoutUserRolesInput
    assignedBy?: UserCreateNestedOneWithoutAssignedRolesInput
  }

  export type UserRoleUncheckedCreateWithoutUserInput = {
    id?: string
    roleId: string
    assignedAt?: Date | string
    assignedById?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
  }

  export type UserRoleCreateOrConnectWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleCreateManyUserInputEnvelope = {
    data: UserRoleCreateManyUserInput | UserRoleCreateManyUserInput[]
  }

  export type UserRoleCreateWithoutAssignedByInput = {
    id?: string
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    user: UserCreateNestedOneWithoutUserRolesInput
    role: RoleCreateNestedOneWithoutUserRolesInput
  }

  export type UserRoleUncheckedCreateWithoutAssignedByInput = {
    id?: string
    userId: string
    roleId: string
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
  }

  export type UserRoleCreateOrConnectWithoutAssignedByInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutAssignedByInput, UserRoleUncheckedCreateWithoutAssignedByInput>
  }

  export type UserRoleCreateManyAssignedByInputEnvelope = {
    data: UserRoleCreateManyAssignedByInput | UserRoleCreateManyAssignedByInput[]
  }

  export type RolePermissionCreateWithoutGrantedByInput = {
    id?: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    role: RoleCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutRolePermissionsInput
  }

  export type RolePermissionUncheckedCreateWithoutGrantedByInput = {
    id?: string
    roleId: string
    permissionId: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type RolePermissionCreateOrConnectWithoutGrantedByInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutGrantedByInput, RolePermissionUncheckedCreateWithoutGrantedByInput>
  }

  export type RolePermissionCreateManyGrantedByInputEnvelope = {
    data: RolePermissionCreateManyGrantedByInput | RolePermissionCreateManyGrantedByInput[]
  }

  export type AuditLogCreateWithoutActorInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValue?: string | null
    newValue?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutActorInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValue?: string | null
    newValue?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutActorInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput>
  }

  export type AuditLogCreateManyActorInputEnvelope = {
    data: AuditLogCreateManyActorInput | AuditLogCreateManyActorInput[]
  }

  export type UserMFACreateWithoutUserInput = {
    id?: string
    secret: string
    backupCodes?: string | null
    isEnabled?: boolean
    lastUsedAt?: Date | string | null
    setupAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMFAUncheckedCreateWithoutUserInput = {
    id?: string
    secret: string
    backupCodes?: string | null
    isEnabled?: boolean
    lastUsedAt?: Date | string | null
    setupAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserMFACreateOrConnectWithoutUserInput = {
    where: UserMFAWhereUniqueInput
    create: XOR<UserMFACreateWithoutUserInput, UserMFAUncheckedCreateWithoutUserInput>
  }

  export type UserSessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    deviceFingerprint: string
    ipAddress: string
    userAgent: string
    location?: string | null
    riskScore?: number
    isActive?: boolean
    lastActivityAt?: Date | string
    expiresAt: Date | string
    createdAt?: Date | string
    loginMethod?: string | null
    deviceType?: string | null
    browserInfo?: string | null
  }

  export type UserSessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    deviceFingerprint: string
    ipAddress: string
    userAgent: string
    location?: string | null
    riskScore?: number
    isActive?: boolean
    lastActivityAt?: Date | string
    expiresAt: Date | string
    createdAt?: Date | string
    loginMethod?: string | null
    deviceType?: string | null
    browserInfo?: string | null
  }

  export type UserSessionCreateOrConnectWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionCreateManyUserInputEnvelope = {
    data: UserSessionCreateManyUserInput | UserSessionCreateManyUserInput[]
  }

  export type SecurityEventCreateWithoutUserInput = {
    id?: string
    sessionId?: string | null
    eventType: string
    severity: string
    description: string
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    location?: string | null
    riskScore?: number
    isBlocked?: boolean
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    resolvedBy?: UserCreateNestedOneWithoutResolvedSecurityEventsInput
  }

  export type SecurityEventUncheckedCreateWithoutUserInput = {
    id?: string
    sessionId?: string | null
    eventType: string
    severity: string
    description: string
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    location?: string | null
    riskScore?: number
    isBlocked?: boolean
    resolvedAt?: Date | string | null
    resolvedById?: string | null
    createdAt?: Date | string
  }

  export type SecurityEventCreateOrConnectWithoutUserInput = {
    where: SecurityEventWhereUniqueInput
    create: XOR<SecurityEventCreateWithoutUserInput, SecurityEventUncheckedCreateWithoutUserInput>
  }

  export type SecurityEventCreateManyUserInputEnvelope = {
    data: SecurityEventCreateManyUserInput | SecurityEventCreateManyUserInput[]
  }

  export type SecurityEventCreateWithoutResolvedByInput = {
    id?: string
    sessionId?: string | null
    eventType: string
    severity: string
    description: string
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    location?: string | null
    riskScore?: number
    isBlocked?: boolean
    resolvedAt?: Date | string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutSecurityEventsInput
  }

  export type SecurityEventUncheckedCreateWithoutResolvedByInput = {
    id?: string
    userId?: string | null
    sessionId?: string | null
    eventType: string
    severity: string
    description: string
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    location?: string | null
    riskScore?: number
    isBlocked?: boolean
    resolvedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SecurityEventCreateOrConnectWithoutResolvedByInput = {
    where: SecurityEventWhereUniqueInput
    create: XOR<SecurityEventCreateWithoutResolvedByInput, SecurityEventUncheckedCreateWithoutResolvedByInput>
  }

  export type SecurityEventCreateManyResolvedByInputEnvelope = {
    data: SecurityEventCreateManyResolvedByInput | SecurityEventCreateManyResolvedByInput[]
  }

  export type PermissionContextCreateWithoutUserInput = {
    id?: string
    context: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    ipRange?: string | null
    timeRestriction?: string | null
    locationRestriction?: string | null
    deviceRestriction?: string | null
    permission: PermissionCreateNestedOneWithoutContextsInput
  }

  export type PermissionContextUncheckedCreateWithoutUserInput = {
    id?: string
    permissionId: string
    context: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    ipRange?: string | null
    timeRestriction?: string | null
    locationRestriction?: string | null
    deviceRestriction?: string | null
  }

  export type PermissionContextCreateOrConnectWithoutUserInput = {
    where: PermissionContextWhereUniqueInput
    create: XOR<PermissionContextCreateWithoutUserInput, PermissionContextUncheckedCreateWithoutUserInput>
  }

  export type PermissionContextCreateManyUserInputEnvelope = {
    data: PermissionContextCreateManyUserInput | PermissionContextCreateManyUserInput[]
  }

  export type AccountActionUpsertWithWhereUniqueWithoutAgentInput = {
    where: AccountActionWhereUniqueInput
    update: XOR<AccountActionUpdateWithoutAgentInput, AccountActionUncheckedUpdateWithoutAgentInput>
    create: XOR<AccountActionCreateWithoutAgentInput, AccountActionUncheckedCreateWithoutAgentInput>
  }

  export type AccountActionUpdateWithWhereUniqueWithoutAgentInput = {
    where: AccountActionWhereUniqueInput
    data: XOR<AccountActionUpdateWithoutAgentInput, AccountActionUncheckedUpdateWithoutAgentInput>
  }

  export type AccountActionUpdateManyWithWhereWithoutAgentInput = {
    where: AccountActionScalarWhereInput
    data: XOR<AccountActionUpdateManyMutationInput, AccountActionUncheckedUpdateManyWithoutAgentInput>
  }

  export type AccountActionScalarWhereInput = {
    AND?: AccountActionScalarWhereInput | AccountActionScalarWhereInput[]
    OR?: AccountActionScalarWhereInput[]
    NOT?: AccountActionScalarWhereInput | AccountActionScalarWhereInput[]
    id?: StringFilter<"AccountAction"> | string
    accountId?: StringFilter<"AccountAction"> | string
    agentId?: StringFilter<"AccountAction"> | string
    actionType?: StringFilter<"AccountAction"> | string
    description?: StringFilter<"AccountAction"> | string
    details?: StringNullableFilter<"AccountAction"> | string | null
    createdAt?: DateTimeFilter<"AccountAction"> | Date | string
  }

  export type AccountUpsertWithWhereUniqueWithoutAssignedAgentInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutAssignedAgentInput, AccountUncheckedUpdateWithoutAssignedAgentInput>
    create: XOR<AccountCreateWithoutAssignedAgentInput, AccountUncheckedCreateWithoutAssignedAgentInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutAssignedAgentInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutAssignedAgentInput, AccountUncheckedUpdateWithoutAssignedAgentInput>
  }

  export type AccountUpdateManyWithWhereWithoutAssignedAgentInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutAssignedAgentInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    accountNumber?: StringFilter<"Account"> | string
    firstName?: StringFilter<"Account"> | string
    lastName?: StringFilter<"Account"> | string
    fullName?: StringFilter<"Account"> | string
    email?: StringNullableFilter<"Account"> | string | null
    address1?: StringNullableFilter<"Account"> | string | null
    address2?: StringNullableFilter<"Account"> | string | null
    city?: StringNullableFilter<"Account"> | string | null
    state?: StringNullableFilter<"Account"> | string | null
    zipCode?: StringNullableFilter<"Account"> | string | null
    country?: StringNullableFilter<"Account"> | string | null
    originalAmount?: FloatFilter<"Account"> | number
    currentBalance?: FloatFilter<"Account"> | number
    amountPaid?: FloatFilter<"Account"> | number
    interestRate?: FloatNullableFilter<"Account"> | number | null
    lastPaymentDate?: DateTimeNullableFilter<"Account"> | Date | string | null
    lastPaymentAmount?: FloatNullableFilter<"Account"> | number | null
    status?: StringFilter<"Account"> | string
    priority?: StringFilter<"Account"> | string
    assignedAgentId?: StringNullableFilter<"Account"> | string | null
    assignedDate?: DateTimeNullableFilter<"Account"> | Date | string | null
    preferredContactMethod?: StringNullableFilter<"Account"> | string | null
    bestTimeToCall?: StringNullableFilter<"Account"> | string | null
    timezone?: StringNullableFilter<"Account"> | string | null
    language?: StringNullableFilter<"Account"> | string | null
    daysPastDue?: IntFilter<"Account"> | number
    lastContactDate?: DateTimeNullableFilter<"Account"> | Date | string | null
    nextContactDate?: DateTimeNullableFilter<"Account"> | Date | string | null
    contactAttempts?: IntFilter<"Account"> | number
    doNotCall?: BoolFilter<"Account"> | boolean
    disputeFlag?: BoolFilter<"Account"> | boolean
    bankruptcyFlag?: BoolFilter<"Account"> | boolean
    deceasedFlag?: BoolFilter<"Account"> | boolean
    notes?: StringNullableFilter<"Account"> | string | null
    source?: StringNullableFilter<"Account"> | string | null
    batchId?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type CallUpsertWithWhereUniqueWithoutAgentInput = {
    where: CallWhereUniqueInput
    update: XOR<CallUpdateWithoutAgentInput, CallUncheckedUpdateWithoutAgentInput>
    create: XOR<CallCreateWithoutAgentInput, CallUncheckedCreateWithoutAgentInput>
  }

  export type CallUpdateWithWhereUniqueWithoutAgentInput = {
    where: CallWhereUniqueInput
    data: XOR<CallUpdateWithoutAgentInput, CallUncheckedUpdateWithoutAgentInput>
  }

  export type CallUpdateManyWithWhereWithoutAgentInput = {
    where: CallScalarWhereInput
    data: XOR<CallUpdateManyMutationInput, CallUncheckedUpdateManyWithoutAgentInput>
  }

  export type CallScalarWhereInput = {
    AND?: CallScalarWhereInput | CallScalarWhereInput[]
    OR?: CallScalarWhereInput[]
    NOT?: CallScalarWhereInput | CallScalarWhereInput[]
    id?: StringFilter<"Call"> | string
    accountId?: StringFilter<"Call"> | string
    accountPhoneId?: StringNullableFilter<"Call"> | string | null
    agentId?: StringFilter<"Call"> | string
    direction?: StringFilter<"Call"> | string
    startTime?: DateTimeFilter<"Call"> | Date | string
    endTime?: DateTimeNullableFilter<"Call"> | Date | string | null
    duration?: IntNullableFilter<"Call"> | number | null
    status?: StringFilter<"Call"> | string
    disposition?: StringNullableFilter<"Call"> | string | null
    notes?: StringNullableFilter<"Call"> | string | null
    followUpDate?: DateTimeNullableFilter<"Call"> | Date | string | null
    amountPromised?: FloatNullableFilter<"Call"> | number | null
    amountCollected?: FloatNullableFilter<"Call"> | number | null
    recordingPath?: StringNullableFilter<"Call"> | string | null
    callerId?: StringNullableFilter<"Call"> | string | null
    campaignId?: StringNullableFilter<"Call"> | string | null
    createdAt?: DateTimeFilter<"Call"> | Date | string
    updatedAt?: DateTimeFilter<"Call"> | Date | string
  }

  export type RefreshTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    update: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type RefreshTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    data: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
  }

  export type RefreshTokenUpdateManyWithWhereWithoutUserInput = {
    where: RefreshTokenScalarWhereInput
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type RefreshTokenScalarWhereInput = {
    AND?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    OR?: RefreshTokenScalarWhereInput[]
    NOT?: RefreshTokenScalarWhereInput | RefreshTokenScalarWhereInput[]
    id?: StringFilter<"RefreshToken"> | string
    token?: StringFilter<"RefreshToken"> | string
    userId?: StringFilter<"RefreshToken"> | string
    expiresAt?: DateTimeFilter<"RefreshToken"> | Date | string
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
  }

  export type UploadBatchUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: UploadBatchWhereUniqueInput
    update: XOR<UploadBatchUpdateWithoutUploadedByInput, UploadBatchUncheckedUpdateWithoutUploadedByInput>
    create: XOR<UploadBatchCreateWithoutUploadedByInput, UploadBatchUncheckedCreateWithoutUploadedByInput>
  }

  export type UploadBatchUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: UploadBatchWhereUniqueInput
    data: XOR<UploadBatchUpdateWithoutUploadedByInput, UploadBatchUncheckedUpdateWithoutUploadedByInput>
  }

  export type UploadBatchUpdateManyWithWhereWithoutUploadedByInput = {
    where: UploadBatchScalarWhereInput
    data: XOR<UploadBatchUpdateManyMutationInput, UploadBatchUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type UploadBatchScalarWhereInput = {
    AND?: UploadBatchScalarWhereInput | UploadBatchScalarWhereInput[]
    OR?: UploadBatchScalarWhereInput[]
    NOT?: UploadBatchScalarWhereInput | UploadBatchScalarWhereInput[]
    id?: StringFilter<"UploadBatch"> | string
    filename?: StringFilter<"UploadBatch"> | string
    originalFilename?: StringFilter<"UploadBatch"> | string
    fileSize?: IntFilter<"UploadBatch"> | number
    mimeType?: StringFilter<"UploadBatch"> | string
    totalRecords?: IntFilter<"UploadBatch"> | number
    processedRecords?: IntFilter<"UploadBatch"> | number
    successCount?: IntFilter<"UploadBatch"> | number
    errorCount?: IntFilter<"UploadBatch"> | number
    skipCount?: IntFilter<"UploadBatch"> | number
    duplicateCount?: IntFilter<"UploadBatch"> | number
    status?: StringFilter<"UploadBatch"> | string
    uploadedById?: StringFilter<"UploadBatch"> | string
    batchName?: StringNullableFilter<"UploadBatch"> | string | null
    skipErrors?: BoolFilter<"UploadBatch"> | boolean
    updateExisting?: BoolFilter<"UploadBatch"> | boolean
    processingStarted?: DateTimeNullableFilter<"UploadBatch"> | Date | string | null
    processingCompleted?: DateTimeNullableFilter<"UploadBatch"> | Date | string | null
    errorLog?: StringNullableFilter<"UploadBatch"> | string | null
    createdAt?: DateTimeFilter<"UploadBatch"> | Date | string
    updatedAt?: DateTimeFilter<"UploadBatch"> | Date | string
  }

  export type RoleUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: RoleWhereUniqueInput
    update: XOR<RoleUpdateWithoutCreatedByInput, RoleUncheckedUpdateWithoutCreatedByInput>
    create: XOR<RoleCreateWithoutCreatedByInput, RoleUncheckedCreateWithoutCreatedByInput>
  }

  export type RoleUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: RoleWhereUniqueInput
    data: XOR<RoleUpdateWithoutCreatedByInput, RoleUncheckedUpdateWithoutCreatedByInput>
  }

  export type RoleUpdateManyWithWhereWithoutCreatedByInput = {
    where: RoleScalarWhereInput
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type RoleScalarWhereInput = {
    AND?: RoleScalarWhereInput | RoleScalarWhereInput[]
    OR?: RoleScalarWhereInput[]
    NOT?: RoleScalarWhereInput | RoleScalarWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    description?: StringNullableFilter<"Role"> | string | null
    isSystem?: BoolFilter<"Role"> | boolean
    isActive?: BoolFilter<"Role"> | boolean
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    createdById?: StringNullableFilter<"Role"> | string | null
  }

  export type UserRoleUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutUserInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRoleScalarWhereInput = {
    AND?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    OR?: UserRoleScalarWhereInput[]
    NOT?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    id?: StringFilter<"UserRole"> | string
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    assignedAt?: DateTimeFilter<"UserRole"> | Date | string
    assignedById?: StringNullableFilter<"UserRole"> | string | null
    expiresAt?: DateTimeNullableFilter<"UserRole"> | Date | string | null
    isActive?: BoolFilter<"UserRole"> | boolean
  }

  export type UserRoleUpsertWithWhereUniqueWithoutAssignedByInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutAssignedByInput, UserRoleUncheckedUpdateWithoutAssignedByInput>
    create: XOR<UserRoleCreateWithoutAssignedByInput, UserRoleUncheckedCreateWithoutAssignedByInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutAssignedByInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutAssignedByInput, UserRoleUncheckedUpdateWithoutAssignedByInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutAssignedByInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutAssignedByInput>
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutGrantedByInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutGrantedByInput, RolePermissionUncheckedUpdateWithoutGrantedByInput>
    create: XOR<RolePermissionCreateWithoutGrantedByInput, RolePermissionUncheckedCreateWithoutGrantedByInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutGrantedByInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutGrantedByInput, RolePermissionUncheckedUpdateWithoutGrantedByInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutGrantedByInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutGrantedByInput>
  }

  export type RolePermissionScalarWhereInput = {
    AND?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    OR?: RolePermissionScalarWhereInput[]
    NOT?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    id?: StringFilter<"RolePermission"> | string
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    grantedAt?: DateTimeFilter<"RolePermission"> | Date | string
    grantedById?: StringNullableFilter<"RolePermission"> | string | null
    expiresAt?: DateTimeNullableFilter<"RolePermission"> | Date | string | null
  }

  export type AuditLogUpsertWithWhereUniqueWithoutActorInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutActorInput, AuditLogUncheckedUpdateWithoutActorInput>
    create: XOR<AuditLogCreateWithoutActorInput, AuditLogUncheckedCreateWithoutActorInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutActorInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutActorInput, AuditLogUncheckedUpdateWithoutActorInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutActorInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutActorInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    actorId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    oldValue?: StringNullableFilter<"AuditLog"> | string | null
    newValue?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    sessionId?: StringNullableFilter<"AuditLog"> | string | null
    metadata?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type UserMFAUpsertWithoutUserInput = {
    update: XOR<UserMFAUpdateWithoutUserInput, UserMFAUncheckedUpdateWithoutUserInput>
    create: XOR<UserMFACreateWithoutUserInput, UserMFAUncheckedCreateWithoutUserInput>
    where?: UserMFAWhereInput
  }

  export type UserMFAUpdateToOneWithWhereWithoutUserInput = {
    where?: UserMFAWhereInput
    data: XOR<UserMFAUpdateWithoutUserInput, UserMFAUncheckedUpdateWithoutUserInput>
  }

  export type UserMFAUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    backupCodes?: NullableStringFieldUpdateOperationsInput | string | null
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserMFAUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    backupCodes?: NullableStringFieldUpdateOperationsInput | string | null
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    setupAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    update: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    data: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
  }

  export type UserSessionUpdateManyWithWhereWithoutUserInput = {
    where: UserSessionScalarWhereInput
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSessionScalarWhereInput = {
    AND?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    OR?: UserSessionScalarWhereInput[]
    NOT?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    sessionToken?: StringFilter<"UserSession"> | string
    deviceFingerprint?: StringFilter<"UserSession"> | string
    ipAddress?: StringFilter<"UserSession"> | string
    userAgent?: StringFilter<"UserSession"> | string
    location?: StringNullableFilter<"UserSession"> | string | null
    riskScore?: FloatFilter<"UserSession"> | number
    isActive?: BoolFilter<"UserSession"> | boolean
    lastActivityAt?: DateTimeFilter<"UserSession"> | Date | string
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    loginMethod?: StringNullableFilter<"UserSession"> | string | null
    deviceType?: StringNullableFilter<"UserSession"> | string | null
    browserInfo?: StringNullableFilter<"UserSession"> | string | null
  }

  export type SecurityEventUpsertWithWhereUniqueWithoutUserInput = {
    where: SecurityEventWhereUniqueInput
    update: XOR<SecurityEventUpdateWithoutUserInput, SecurityEventUncheckedUpdateWithoutUserInput>
    create: XOR<SecurityEventCreateWithoutUserInput, SecurityEventUncheckedCreateWithoutUserInput>
  }

  export type SecurityEventUpdateWithWhereUniqueWithoutUserInput = {
    where: SecurityEventWhereUniqueInput
    data: XOR<SecurityEventUpdateWithoutUserInput, SecurityEventUncheckedUpdateWithoutUserInput>
  }

  export type SecurityEventUpdateManyWithWhereWithoutUserInput = {
    where: SecurityEventScalarWhereInput
    data: XOR<SecurityEventUpdateManyMutationInput, SecurityEventUncheckedUpdateManyWithoutUserInput>
  }

  export type SecurityEventScalarWhereInput = {
    AND?: SecurityEventScalarWhereInput | SecurityEventScalarWhereInput[]
    OR?: SecurityEventScalarWhereInput[]
    NOT?: SecurityEventScalarWhereInput | SecurityEventScalarWhereInput[]
    id?: StringFilter<"SecurityEvent"> | string
    userId?: StringNullableFilter<"SecurityEvent"> | string | null
    sessionId?: StringNullableFilter<"SecurityEvent"> | string | null
    eventType?: StringFilter<"SecurityEvent"> | string
    severity?: StringFilter<"SecurityEvent"> | string
    description?: StringFilter<"SecurityEvent"> | string
    details?: StringNullableFilter<"SecurityEvent"> | string | null
    ipAddress?: StringNullableFilter<"SecurityEvent"> | string | null
    userAgent?: StringNullableFilter<"SecurityEvent"> | string | null
    location?: StringNullableFilter<"SecurityEvent"> | string | null
    riskScore?: FloatFilter<"SecurityEvent"> | number
    isBlocked?: BoolFilter<"SecurityEvent"> | boolean
    resolvedAt?: DateTimeNullableFilter<"SecurityEvent"> | Date | string | null
    resolvedById?: StringNullableFilter<"SecurityEvent"> | string | null
    createdAt?: DateTimeFilter<"SecurityEvent"> | Date | string
  }

  export type SecurityEventUpsertWithWhereUniqueWithoutResolvedByInput = {
    where: SecurityEventWhereUniqueInput
    update: XOR<SecurityEventUpdateWithoutResolvedByInput, SecurityEventUncheckedUpdateWithoutResolvedByInput>
    create: XOR<SecurityEventCreateWithoutResolvedByInput, SecurityEventUncheckedCreateWithoutResolvedByInput>
  }

  export type SecurityEventUpdateWithWhereUniqueWithoutResolvedByInput = {
    where: SecurityEventWhereUniqueInput
    data: XOR<SecurityEventUpdateWithoutResolvedByInput, SecurityEventUncheckedUpdateWithoutResolvedByInput>
  }

  export type SecurityEventUpdateManyWithWhereWithoutResolvedByInput = {
    where: SecurityEventScalarWhereInput
    data: XOR<SecurityEventUpdateManyMutationInput, SecurityEventUncheckedUpdateManyWithoutResolvedByInput>
  }

  export type PermissionContextUpsertWithWhereUniqueWithoutUserInput = {
    where: PermissionContextWhereUniqueInput
    update: XOR<PermissionContextUpdateWithoutUserInput, PermissionContextUncheckedUpdateWithoutUserInput>
    create: XOR<PermissionContextCreateWithoutUserInput, PermissionContextUncheckedCreateWithoutUserInput>
  }

  export type PermissionContextUpdateWithWhereUniqueWithoutUserInput = {
    where: PermissionContextWhereUniqueInput
    data: XOR<PermissionContextUpdateWithoutUserInput, PermissionContextUncheckedUpdateWithoutUserInput>
  }

  export type PermissionContextUpdateManyWithWhereWithoutUserInput = {
    where: PermissionContextScalarWhereInput
    data: XOR<PermissionContextUpdateManyMutationInput, PermissionContextUncheckedUpdateManyWithoutUserInput>
  }

  export type PermissionContextScalarWhereInput = {
    AND?: PermissionContextScalarWhereInput | PermissionContextScalarWhereInput[]
    OR?: PermissionContextScalarWhereInput[]
    NOT?: PermissionContextScalarWhereInput | PermissionContextScalarWhereInput[]
    id?: StringFilter<"PermissionContext"> | string
    userId?: StringFilter<"PermissionContext"> | string
    permissionId?: StringFilter<"PermissionContext"> | string
    context?: StringFilter<"PermissionContext"> | string
    grantedAt?: DateTimeFilter<"PermissionContext"> | Date | string
    expiresAt?: DateTimeNullableFilter<"PermissionContext"> | Date | string | null
    isActive?: BoolFilter<"PermissionContext"> | boolean
    ipRange?: StringNullableFilter<"PermissionContext"> | string | null
    timeRestriction?: StringNullableFilter<"PermissionContext"> | string | null
    locationRestriction?: StringNullableFilter<"PermissionContext"> | string | null
    deviceRestriction?: StringNullableFilter<"PermissionContext"> | string | null
  }

  export type UserCreateWithoutRefreshTokensInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountCreateNestedManyWithoutAssignedAgentInput
    calls?: CallCreateNestedManyWithoutAgentInput
    uploadBatches?: UploadBatchCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFACreateNestedOneWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRefreshTokensInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionUncheckedCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountUncheckedCreateNestedManyWithoutAssignedAgentInput
    calls?: CallUncheckedCreateNestedManyWithoutAgentInput
    uploadBatches?: UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleUncheckedCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFAUncheckedCreateNestedOneWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventUncheckedCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRefreshTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
  }

  export type UserUpsertWithoutRefreshTokensInput = {
    update: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
    create: XOR<UserCreateWithoutRefreshTokensInput, UserUncheckedCreateWithoutRefreshTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRefreshTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRefreshTokensInput, UserUncheckedUpdateWithoutRefreshTokensInput>
  }

  export type UserUpdateWithoutRefreshTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUpdateManyWithoutAgentNestedInput
    uploadBatches?: UploadBatchUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRefreshTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUncheckedUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUncheckedUpdateManyWithoutAgentNestedInput
    uploadBatches?: UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUncheckedUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUncheckedUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountActionCreateWithoutAccountInput = {
    id?: string
    actionType: string
    description: string
    details?: string | null
    createdAt?: Date | string
    agent: UserCreateNestedOneWithoutAccountActionsInput
  }

  export type AccountActionUncheckedCreateWithoutAccountInput = {
    id?: string
    agentId: string
    actionType: string
    description: string
    details?: string | null
    createdAt?: Date | string
  }

  export type AccountActionCreateOrConnectWithoutAccountInput = {
    where: AccountActionWhereUniqueInput
    create: XOR<AccountActionCreateWithoutAccountInput, AccountActionUncheckedCreateWithoutAccountInput>
  }

  export type AccountActionCreateManyAccountInputEnvelope = {
    data: AccountActionCreateManyAccountInput | AccountActionCreateManyAccountInput[]
  }

  export type AccountPhoneCreateWithoutAccountInput = {
    id?: string
    phoneNumber: string
    phoneType?: string
    isValid?: boolean
    doNotCall?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    calls?: CallCreateNestedManyWithoutAccountPhoneInput
  }

  export type AccountPhoneUncheckedCreateWithoutAccountInput = {
    id?: string
    phoneNumber: string
    phoneType?: string
    isValid?: boolean
    doNotCall?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    calls?: CallUncheckedCreateNestedManyWithoutAccountPhoneInput
  }

  export type AccountPhoneCreateOrConnectWithoutAccountInput = {
    where: AccountPhoneWhereUniqueInput
    create: XOR<AccountPhoneCreateWithoutAccountInput, AccountPhoneUncheckedCreateWithoutAccountInput>
  }

  export type AccountPhoneCreateManyAccountInputEnvelope = {
    data: AccountPhoneCreateManyAccountInput | AccountPhoneCreateManyAccountInput[]
  }

  export type UserCreateWithoutAssignedAccountsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionCreateNestedManyWithoutAgentInput
    calls?: CallCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFACreateNestedOneWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedAccountsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionUncheckedCreateNestedManyWithoutAgentInput
    calls?: CallUncheckedCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleUncheckedCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFAUncheckedCreateNestedOneWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventUncheckedCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedAccountsInput, UserUncheckedCreateWithoutAssignedAccountsInput>
  }

  export type CallCreateWithoutAccountInput = {
    id?: string
    direction: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status: string
    disposition?: string | null
    notes?: string | null
    followUpDate?: Date | string | null
    amountPromised?: number | null
    amountCollected?: number | null
    recordingPath?: string | null
    callerId?: string | null
    campaignId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agent: UserCreateNestedOneWithoutCallsInput
    accountPhone?: AccountPhoneCreateNestedOneWithoutCallsInput
  }

  export type CallUncheckedCreateWithoutAccountInput = {
    id?: string
    accountPhoneId?: string | null
    agentId: string
    direction: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status: string
    disposition?: string | null
    notes?: string | null
    followUpDate?: Date | string | null
    amountPromised?: number | null
    amountCollected?: number | null
    recordingPath?: string | null
    callerId?: string | null
    campaignId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CallCreateOrConnectWithoutAccountInput = {
    where: CallWhereUniqueInput
    create: XOR<CallCreateWithoutAccountInput, CallUncheckedCreateWithoutAccountInput>
  }

  export type CallCreateManyAccountInputEnvelope = {
    data: CallCreateManyAccountInput | CallCreateManyAccountInput[]
  }

  export type AccountActionUpsertWithWhereUniqueWithoutAccountInput = {
    where: AccountActionWhereUniqueInput
    update: XOR<AccountActionUpdateWithoutAccountInput, AccountActionUncheckedUpdateWithoutAccountInput>
    create: XOR<AccountActionCreateWithoutAccountInput, AccountActionUncheckedCreateWithoutAccountInput>
  }

  export type AccountActionUpdateWithWhereUniqueWithoutAccountInput = {
    where: AccountActionWhereUniqueInput
    data: XOR<AccountActionUpdateWithoutAccountInput, AccountActionUncheckedUpdateWithoutAccountInput>
  }

  export type AccountActionUpdateManyWithWhereWithoutAccountInput = {
    where: AccountActionScalarWhereInput
    data: XOR<AccountActionUpdateManyMutationInput, AccountActionUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountPhoneUpsertWithWhereUniqueWithoutAccountInput = {
    where: AccountPhoneWhereUniqueInput
    update: XOR<AccountPhoneUpdateWithoutAccountInput, AccountPhoneUncheckedUpdateWithoutAccountInput>
    create: XOR<AccountPhoneCreateWithoutAccountInput, AccountPhoneUncheckedCreateWithoutAccountInput>
  }

  export type AccountPhoneUpdateWithWhereUniqueWithoutAccountInput = {
    where: AccountPhoneWhereUniqueInput
    data: XOR<AccountPhoneUpdateWithoutAccountInput, AccountPhoneUncheckedUpdateWithoutAccountInput>
  }

  export type AccountPhoneUpdateManyWithWhereWithoutAccountInput = {
    where: AccountPhoneScalarWhereInput
    data: XOR<AccountPhoneUpdateManyMutationInput, AccountPhoneUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountPhoneScalarWhereInput = {
    AND?: AccountPhoneScalarWhereInput | AccountPhoneScalarWhereInput[]
    OR?: AccountPhoneScalarWhereInput[]
    NOT?: AccountPhoneScalarWhereInput | AccountPhoneScalarWhereInput[]
    id?: StringFilter<"AccountPhone"> | string
    accountId?: StringFilter<"AccountPhone"> | string
    phoneNumber?: StringFilter<"AccountPhone"> | string
    phoneType?: StringFilter<"AccountPhone"> | string
    isValid?: BoolFilter<"AccountPhone"> | boolean
    doNotCall?: BoolFilter<"AccountPhone"> | boolean
    notes?: StringNullableFilter<"AccountPhone"> | string | null
    createdAt?: DateTimeFilter<"AccountPhone"> | Date | string
    updatedAt?: DateTimeFilter<"AccountPhone"> | Date | string
  }

  export type UserUpsertWithoutAssignedAccountsInput = {
    update: XOR<UserUpdateWithoutAssignedAccountsInput, UserUncheckedUpdateWithoutAssignedAccountsInput>
    create: XOR<UserCreateWithoutAssignedAccountsInput, UserUncheckedCreateWithoutAssignedAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedAccountsInput, UserUncheckedUpdateWithoutAssignedAccountsInput>
  }

  export type UserUpdateWithoutAssignedAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUpdateManyWithoutAgentNestedInput
    calls?: CallUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUncheckedUpdateManyWithoutAgentNestedInput
    calls?: CallUncheckedUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUncheckedUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUncheckedUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CallUpsertWithWhereUniqueWithoutAccountInput = {
    where: CallWhereUniqueInput
    update: XOR<CallUpdateWithoutAccountInput, CallUncheckedUpdateWithoutAccountInput>
    create: XOR<CallCreateWithoutAccountInput, CallUncheckedCreateWithoutAccountInput>
  }

  export type CallUpdateWithWhereUniqueWithoutAccountInput = {
    where: CallWhereUniqueInput
    data: XOR<CallUpdateWithoutAccountInput, CallUncheckedUpdateWithoutAccountInput>
  }

  export type CallUpdateManyWithWhereWithoutAccountInput = {
    where: CallScalarWhereInput
    data: XOR<CallUpdateManyMutationInput, CallUncheckedUpdateManyWithoutAccountInput>
  }

  export type AccountCreateWithoutPhoneNumbersInput = {
    id?: string
    accountNumber: string
    firstName: string
    lastName: string
    fullName: string
    email?: string | null
    address1?: string | null
    address2?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    originalAmount: number
    currentBalance: number
    amountPaid?: number
    interestRate?: number | null
    lastPaymentDate?: Date | string | null
    lastPaymentAmount?: number | null
    status?: string
    priority?: string
    assignedDate?: Date | string | null
    preferredContactMethod?: string | null
    bestTimeToCall?: string | null
    timezone?: string | null
    language?: string | null
    daysPastDue?: number
    lastContactDate?: Date | string | null
    nextContactDate?: Date | string | null
    contactAttempts?: number
    doNotCall?: boolean
    disputeFlag?: boolean
    bankruptcyFlag?: boolean
    deceasedFlag?: boolean
    notes?: string | null
    source?: string | null
    batchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    actions?: AccountActionCreateNestedManyWithoutAccountInput
    assignedAgent?: UserCreateNestedOneWithoutAssignedAccountsInput
    calls?: CallCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutPhoneNumbersInput = {
    id?: string
    accountNumber: string
    firstName: string
    lastName: string
    fullName: string
    email?: string | null
    address1?: string | null
    address2?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    originalAmount: number
    currentBalance: number
    amountPaid?: number
    interestRate?: number | null
    lastPaymentDate?: Date | string | null
    lastPaymentAmount?: number | null
    status?: string
    priority?: string
    assignedAgentId?: string | null
    assignedDate?: Date | string | null
    preferredContactMethod?: string | null
    bestTimeToCall?: string | null
    timezone?: string | null
    language?: string | null
    daysPastDue?: number
    lastContactDate?: Date | string | null
    nextContactDate?: Date | string | null
    contactAttempts?: number
    doNotCall?: boolean
    disputeFlag?: boolean
    bankruptcyFlag?: boolean
    deceasedFlag?: boolean
    notes?: string | null
    source?: string | null
    batchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    actions?: AccountActionUncheckedCreateNestedManyWithoutAccountInput
    calls?: CallUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutPhoneNumbersInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutPhoneNumbersInput, AccountUncheckedCreateWithoutPhoneNumbersInput>
  }

  export type CallCreateWithoutAccountPhoneInput = {
    id?: string
    direction: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status: string
    disposition?: string | null
    notes?: string | null
    followUpDate?: Date | string | null
    amountPromised?: number | null
    amountCollected?: number | null
    recordingPath?: string | null
    callerId?: string | null
    campaignId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agent: UserCreateNestedOneWithoutCallsInput
    account: AccountCreateNestedOneWithoutCallsInput
  }

  export type CallUncheckedCreateWithoutAccountPhoneInput = {
    id?: string
    accountId: string
    agentId: string
    direction: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status: string
    disposition?: string | null
    notes?: string | null
    followUpDate?: Date | string | null
    amountPromised?: number | null
    amountCollected?: number | null
    recordingPath?: string | null
    callerId?: string | null
    campaignId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CallCreateOrConnectWithoutAccountPhoneInput = {
    where: CallWhereUniqueInput
    create: XOR<CallCreateWithoutAccountPhoneInput, CallUncheckedCreateWithoutAccountPhoneInput>
  }

  export type CallCreateManyAccountPhoneInputEnvelope = {
    data: CallCreateManyAccountPhoneInput | CallCreateManyAccountPhoneInput[]
  }

  export type AccountUpsertWithoutPhoneNumbersInput = {
    update: XOR<AccountUpdateWithoutPhoneNumbersInput, AccountUncheckedUpdateWithoutPhoneNumbersInput>
    create: XOR<AccountCreateWithoutPhoneNumbersInput, AccountUncheckedCreateWithoutPhoneNumbersInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutPhoneNumbersInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutPhoneNumbersInput, AccountUncheckedUpdateWithoutPhoneNumbersInput>
  }

  export type AccountUpdateWithoutPhoneNumbersInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    originalAmount?: FloatFieldUpdateOperationsInput | number
    currentBalance?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    assignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    bestTimeToCall?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    daysPastDue?: IntFieldUpdateOperationsInput | number
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactAttempts?: IntFieldUpdateOperationsInput | number
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    disputeFlag?: BoolFieldUpdateOperationsInput | boolean
    bankruptcyFlag?: BoolFieldUpdateOperationsInput | boolean
    deceasedFlag?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: AccountActionUpdateManyWithoutAccountNestedInput
    assignedAgent?: UserUpdateOneWithoutAssignedAccountsNestedInput
    calls?: CallUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutPhoneNumbersInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    originalAmount?: FloatFieldUpdateOperationsInput | number
    currentBalance?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    bestTimeToCall?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    daysPastDue?: IntFieldUpdateOperationsInput | number
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactAttempts?: IntFieldUpdateOperationsInput | number
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    disputeFlag?: BoolFieldUpdateOperationsInput | boolean
    bankruptcyFlag?: BoolFieldUpdateOperationsInput | boolean
    deceasedFlag?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: AccountActionUncheckedUpdateManyWithoutAccountNestedInput
    calls?: CallUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type CallUpsertWithWhereUniqueWithoutAccountPhoneInput = {
    where: CallWhereUniqueInput
    update: XOR<CallUpdateWithoutAccountPhoneInput, CallUncheckedUpdateWithoutAccountPhoneInput>
    create: XOR<CallCreateWithoutAccountPhoneInput, CallUncheckedCreateWithoutAccountPhoneInput>
  }

  export type CallUpdateWithWhereUniqueWithoutAccountPhoneInput = {
    where: CallWhereUniqueInput
    data: XOR<CallUpdateWithoutAccountPhoneInput, CallUncheckedUpdateWithoutAccountPhoneInput>
  }

  export type CallUpdateManyWithWhereWithoutAccountPhoneInput = {
    where: CallScalarWhereInput
    data: XOR<CallUpdateManyMutationInput, CallUncheckedUpdateManyWithoutAccountPhoneInput>
  }

  export type UserCreateWithoutCallsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountCreateNestedManyWithoutAssignedAgentInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFACreateNestedOneWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCallsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionUncheckedCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountUncheckedCreateNestedManyWithoutAssignedAgentInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleUncheckedCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFAUncheckedCreateNestedOneWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventUncheckedCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCallsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCallsInput, UserUncheckedCreateWithoutCallsInput>
  }

  export type AccountPhoneCreateWithoutCallsInput = {
    id?: string
    phoneNumber: string
    phoneType?: string
    isValid?: boolean
    doNotCall?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    account: AccountCreateNestedOneWithoutPhoneNumbersInput
  }

  export type AccountPhoneUncheckedCreateWithoutCallsInput = {
    id?: string
    accountId: string
    phoneNumber: string
    phoneType?: string
    isValid?: boolean
    doNotCall?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountPhoneCreateOrConnectWithoutCallsInput = {
    where: AccountPhoneWhereUniqueInput
    create: XOR<AccountPhoneCreateWithoutCallsInput, AccountPhoneUncheckedCreateWithoutCallsInput>
  }

  export type AccountCreateWithoutCallsInput = {
    id?: string
    accountNumber: string
    firstName: string
    lastName: string
    fullName: string
    email?: string | null
    address1?: string | null
    address2?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    originalAmount: number
    currentBalance: number
    amountPaid?: number
    interestRate?: number | null
    lastPaymentDate?: Date | string | null
    lastPaymentAmount?: number | null
    status?: string
    priority?: string
    assignedDate?: Date | string | null
    preferredContactMethod?: string | null
    bestTimeToCall?: string | null
    timezone?: string | null
    language?: string | null
    daysPastDue?: number
    lastContactDate?: Date | string | null
    nextContactDate?: Date | string | null
    contactAttempts?: number
    doNotCall?: boolean
    disputeFlag?: boolean
    bankruptcyFlag?: boolean
    deceasedFlag?: boolean
    notes?: string | null
    source?: string | null
    batchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    actions?: AccountActionCreateNestedManyWithoutAccountInput
    phoneNumbers?: AccountPhoneCreateNestedManyWithoutAccountInput
    assignedAgent?: UserCreateNestedOneWithoutAssignedAccountsInput
  }

  export type AccountUncheckedCreateWithoutCallsInput = {
    id?: string
    accountNumber: string
    firstName: string
    lastName: string
    fullName: string
    email?: string | null
    address1?: string | null
    address2?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    originalAmount: number
    currentBalance: number
    amountPaid?: number
    interestRate?: number | null
    lastPaymentDate?: Date | string | null
    lastPaymentAmount?: number | null
    status?: string
    priority?: string
    assignedAgentId?: string | null
    assignedDate?: Date | string | null
    preferredContactMethod?: string | null
    bestTimeToCall?: string | null
    timezone?: string | null
    language?: string | null
    daysPastDue?: number
    lastContactDate?: Date | string | null
    nextContactDate?: Date | string | null
    contactAttempts?: number
    doNotCall?: boolean
    disputeFlag?: boolean
    bankruptcyFlag?: boolean
    deceasedFlag?: boolean
    notes?: string | null
    source?: string | null
    batchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    actions?: AccountActionUncheckedCreateNestedManyWithoutAccountInput
    phoneNumbers?: AccountPhoneUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutCallsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutCallsInput, AccountUncheckedCreateWithoutCallsInput>
  }

  export type UserUpsertWithoutCallsInput = {
    update: XOR<UserUpdateWithoutCallsInput, UserUncheckedUpdateWithoutCallsInput>
    create: XOR<UserCreateWithoutCallsInput, UserUncheckedCreateWithoutCallsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCallsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCallsInput, UserUncheckedUpdateWithoutCallsInput>
  }

  export type UserUpdateWithoutCallsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUpdateManyWithoutAssignedAgentNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCallsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUncheckedUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUncheckedUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUncheckedUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountPhoneUpsertWithoutCallsInput = {
    update: XOR<AccountPhoneUpdateWithoutCallsInput, AccountPhoneUncheckedUpdateWithoutCallsInput>
    create: XOR<AccountPhoneCreateWithoutCallsInput, AccountPhoneUncheckedCreateWithoutCallsInput>
    where?: AccountPhoneWhereInput
  }

  export type AccountPhoneUpdateToOneWithWhereWithoutCallsInput = {
    where?: AccountPhoneWhereInput
    data: XOR<AccountPhoneUpdateWithoutCallsInput, AccountPhoneUncheckedUpdateWithoutCallsInput>
  }

  export type AccountPhoneUpdateWithoutCallsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneRequiredWithoutPhoneNumbersNestedInput
  }

  export type AccountPhoneUncheckedUpdateWithoutCallsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUpsertWithoutCallsInput = {
    update: XOR<AccountUpdateWithoutCallsInput, AccountUncheckedUpdateWithoutCallsInput>
    create: XOR<AccountCreateWithoutCallsInput, AccountUncheckedCreateWithoutCallsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutCallsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutCallsInput, AccountUncheckedUpdateWithoutCallsInput>
  }

  export type AccountUpdateWithoutCallsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    originalAmount?: FloatFieldUpdateOperationsInput | number
    currentBalance?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    assignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    bestTimeToCall?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    daysPastDue?: IntFieldUpdateOperationsInput | number
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactAttempts?: IntFieldUpdateOperationsInput | number
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    disputeFlag?: BoolFieldUpdateOperationsInput | boolean
    bankruptcyFlag?: BoolFieldUpdateOperationsInput | boolean
    deceasedFlag?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: AccountActionUpdateManyWithoutAccountNestedInput
    phoneNumbers?: AccountPhoneUpdateManyWithoutAccountNestedInput
    assignedAgent?: UserUpdateOneWithoutAssignedAccountsNestedInput
  }

  export type AccountUncheckedUpdateWithoutCallsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    originalAmount?: FloatFieldUpdateOperationsInput | number
    currentBalance?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    bestTimeToCall?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    daysPastDue?: IntFieldUpdateOperationsInput | number
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactAttempts?: IntFieldUpdateOperationsInput | number
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    disputeFlag?: BoolFieldUpdateOperationsInput | boolean
    bankruptcyFlag?: BoolFieldUpdateOperationsInput | boolean
    deceasedFlag?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: AccountActionUncheckedUpdateManyWithoutAccountNestedInput
    phoneNumbers?: AccountPhoneUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type UserCreateWithoutAccountActionsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    assignedAccounts?: AccountCreateNestedManyWithoutAssignedAgentInput
    calls?: CallCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFACreateNestedOneWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountActionsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    assignedAccounts?: AccountUncheckedCreateNestedManyWithoutAssignedAgentInput
    calls?: CallUncheckedCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleUncheckedCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFAUncheckedCreateNestedOneWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventUncheckedCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountActionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountActionsInput, UserUncheckedCreateWithoutAccountActionsInput>
  }

  export type AccountCreateWithoutActionsInput = {
    id?: string
    accountNumber: string
    firstName: string
    lastName: string
    fullName: string
    email?: string | null
    address1?: string | null
    address2?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    originalAmount: number
    currentBalance: number
    amountPaid?: number
    interestRate?: number | null
    lastPaymentDate?: Date | string | null
    lastPaymentAmount?: number | null
    status?: string
    priority?: string
    assignedDate?: Date | string | null
    preferredContactMethod?: string | null
    bestTimeToCall?: string | null
    timezone?: string | null
    language?: string | null
    daysPastDue?: number
    lastContactDate?: Date | string | null
    nextContactDate?: Date | string | null
    contactAttempts?: number
    doNotCall?: boolean
    disputeFlag?: boolean
    bankruptcyFlag?: boolean
    deceasedFlag?: boolean
    notes?: string | null
    source?: string | null
    batchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumbers?: AccountPhoneCreateNestedManyWithoutAccountInput
    assignedAgent?: UserCreateNestedOneWithoutAssignedAccountsInput
    calls?: CallCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutActionsInput = {
    id?: string
    accountNumber: string
    firstName: string
    lastName: string
    fullName: string
    email?: string | null
    address1?: string | null
    address2?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    originalAmount: number
    currentBalance: number
    amountPaid?: number
    interestRate?: number | null
    lastPaymentDate?: Date | string | null
    lastPaymentAmount?: number | null
    status?: string
    priority?: string
    assignedAgentId?: string | null
    assignedDate?: Date | string | null
    preferredContactMethod?: string | null
    bestTimeToCall?: string | null
    timezone?: string | null
    language?: string | null
    daysPastDue?: number
    lastContactDate?: Date | string | null
    nextContactDate?: Date | string | null
    contactAttempts?: number
    doNotCall?: boolean
    disputeFlag?: boolean
    bankruptcyFlag?: boolean
    deceasedFlag?: boolean
    notes?: string | null
    source?: string | null
    batchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    phoneNumbers?: AccountPhoneUncheckedCreateNestedManyWithoutAccountInput
    calls?: CallUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutActionsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutActionsInput, AccountUncheckedCreateWithoutActionsInput>
  }

  export type UserUpsertWithoutAccountActionsInput = {
    update: XOR<UserUpdateWithoutAccountActionsInput, UserUncheckedUpdateWithoutAccountActionsInput>
    create: XOR<UserCreateWithoutAccountActionsInput, UserUncheckedCreateWithoutAccountActionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountActionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountActionsInput, UserUncheckedUpdateWithoutAccountActionsInput>
  }

  export type UserUpdateWithoutAccountActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    assignedAccounts?: AccountUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    assignedAccounts?: AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUncheckedUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUncheckedUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUncheckedUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountUpsertWithoutActionsInput = {
    update: XOR<AccountUpdateWithoutActionsInput, AccountUncheckedUpdateWithoutActionsInput>
    create: XOR<AccountCreateWithoutActionsInput, AccountUncheckedCreateWithoutActionsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutActionsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutActionsInput, AccountUncheckedUpdateWithoutActionsInput>
  }

  export type AccountUpdateWithoutActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    originalAmount?: FloatFieldUpdateOperationsInput | number
    currentBalance?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    assignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    bestTimeToCall?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    daysPastDue?: IntFieldUpdateOperationsInput | number
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactAttempts?: IntFieldUpdateOperationsInput | number
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    disputeFlag?: BoolFieldUpdateOperationsInput | boolean
    bankruptcyFlag?: BoolFieldUpdateOperationsInput | boolean
    deceasedFlag?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumbers?: AccountPhoneUpdateManyWithoutAccountNestedInput
    assignedAgent?: UserUpdateOneWithoutAssignedAccountsNestedInput
    calls?: CallUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    originalAmount?: FloatFieldUpdateOperationsInput | number
    currentBalance?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    assignedAgentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    bestTimeToCall?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    daysPastDue?: IntFieldUpdateOperationsInput | number
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactAttempts?: IntFieldUpdateOperationsInput | number
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    disputeFlag?: BoolFieldUpdateOperationsInput | boolean
    bankruptcyFlag?: BoolFieldUpdateOperationsInput | boolean
    deceasedFlag?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumbers?: AccountPhoneUncheckedUpdateManyWithoutAccountNestedInput
    calls?: CallUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type UserCreateWithoutUploadBatchesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountCreateNestedManyWithoutAssignedAgentInput
    calls?: CallCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFACreateNestedOneWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUploadBatchesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionUncheckedCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountUncheckedCreateNestedManyWithoutAssignedAgentInput
    calls?: CallUncheckedCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleUncheckedCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFAUncheckedCreateNestedOneWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventUncheckedCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUploadBatchesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUploadBatchesInput, UserUncheckedCreateWithoutUploadBatchesInput>
  }

  export type UserUpsertWithoutUploadBatchesInput = {
    update: XOR<UserUpdateWithoutUploadBatchesInput, UserUncheckedUpdateWithoutUploadBatchesInput>
    create: XOR<UserCreateWithoutUploadBatchesInput, UserUncheckedCreateWithoutUploadBatchesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUploadBatchesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUploadBatchesInput, UserUncheckedUpdateWithoutUploadBatchesInput>
  }

  export type UserUpdateWithoutUploadBatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUploadBatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUncheckedUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUncheckedUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUncheckedUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUncheckedUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RolePermissionCreateWithoutRoleInput = {
    id?: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    permission: PermissionCreateNestedOneWithoutRolePermissionsInput
    grantedBy?: UserCreateNestedOneWithoutGrantedPermissionsInput
  }

  export type RolePermissionUncheckedCreateWithoutRoleInput = {
    id?: string
    permissionId: string
    grantedAt?: Date | string
    grantedById?: string | null
    expiresAt?: Date | string | null
  }

  export type RolePermissionCreateOrConnectWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionCreateManyRoleInputEnvelope = {
    data: RolePermissionCreateManyRoleInput | RolePermissionCreateManyRoleInput[]
  }

  export type UserRoleCreateWithoutRoleInput = {
    id?: string
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    user: UserCreateNestedOneWithoutUserRolesInput
    assignedBy?: UserCreateNestedOneWithoutAssignedRolesInput
  }

  export type UserRoleUncheckedCreateWithoutRoleInput = {
    id?: string
    userId: string
    assignedAt?: Date | string
    assignedById?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
  }

  export type UserRoleCreateOrConnectWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleCreateManyRoleInputEnvelope = {
    data: UserRoleCreateManyRoleInput | UserRoleCreateManyRoleInput[]
  }

  export type UserCreateWithoutCreatedRolesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountCreateNestedManyWithoutAssignedAgentInput
    calls?: CallCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchCreateNestedManyWithoutUploadedByInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFACreateNestedOneWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedRolesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionUncheckedCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountUncheckedCreateNestedManyWithoutAssignedAgentInput
    calls?: CallUncheckedCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleUncheckedCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFAUncheckedCreateNestedOneWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventUncheckedCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedRolesInput, UserUncheckedCreateWithoutCreatedRolesInput>
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutRoleInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserRoleUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutRoleInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserUpsertWithoutCreatedRolesInput = {
    update: XOR<UserUpdateWithoutCreatedRolesInput, UserUncheckedUpdateWithoutCreatedRolesInput>
    create: XOR<UserCreateWithoutCreatedRolesInput, UserUncheckedCreateWithoutCreatedRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedRolesInput, UserUncheckedUpdateWithoutCreatedRolesInput>
  }

  export type UserUpdateWithoutCreatedRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUpdateManyWithoutUploadedByNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUncheckedUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUncheckedUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUncheckedUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUncheckedUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RolePermissionCreateWithoutPermissionInput = {
    id?: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    role: RoleCreateNestedOneWithoutPermissionsInput
    grantedBy?: UserCreateNestedOneWithoutGrantedPermissionsInput
  }

  export type RolePermissionUncheckedCreateWithoutPermissionInput = {
    id?: string
    roleId: string
    grantedAt?: Date | string
    grantedById?: string | null
    expiresAt?: Date | string | null
  }

  export type RolePermissionCreateOrConnectWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionCreateManyPermissionInputEnvelope = {
    data: RolePermissionCreateManyPermissionInput | RolePermissionCreateManyPermissionInput[]
  }

  export type PermissionContextCreateWithoutPermissionInput = {
    id?: string
    context: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    ipRange?: string | null
    timeRestriction?: string | null
    locationRestriction?: string | null
    deviceRestriction?: string | null
    user: UserCreateNestedOneWithoutPermissionContextsInput
  }

  export type PermissionContextUncheckedCreateWithoutPermissionInput = {
    id?: string
    userId: string
    context: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    ipRange?: string | null
    timeRestriction?: string | null
    locationRestriction?: string | null
    deviceRestriction?: string | null
  }

  export type PermissionContextCreateOrConnectWithoutPermissionInput = {
    where: PermissionContextWhereUniqueInput
    create: XOR<PermissionContextCreateWithoutPermissionInput, PermissionContextUncheckedCreateWithoutPermissionInput>
  }

  export type PermissionContextCreateManyPermissionInputEnvelope = {
    data: PermissionContextCreateManyPermissionInput | PermissionContextCreateManyPermissionInput[]
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type PermissionContextUpsertWithWhereUniqueWithoutPermissionInput = {
    where: PermissionContextWhereUniqueInput
    update: XOR<PermissionContextUpdateWithoutPermissionInput, PermissionContextUncheckedUpdateWithoutPermissionInput>
    create: XOR<PermissionContextCreateWithoutPermissionInput, PermissionContextUncheckedCreateWithoutPermissionInput>
  }

  export type PermissionContextUpdateWithWhereUniqueWithoutPermissionInput = {
    where: PermissionContextWhereUniqueInput
    data: XOR<PermissionContextUpdateWithoutPermissionInput, PermissionContextUncheckedUpdateWithoutPermissionInput>
  }

  export type PermissionContextUpdateManyWithWhereWithoutPermissionInput = {
    where: PermissionContextScalarWhereInput
    data: XOR<PermissionContextUpdateManyMutationInput, PermissionContextUncheckedUpdateManyWithoutPermissionInput>
  }

  export type RoleCreateWithoutPermissionsInput = {
    id?: string
    name: string
    description?: string | null
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userRoles?: UserRoleCreateNestedManyWithoutRoleInput
    createdBy?: UserCreateNestedOneWithoutCreatedRolesInput
  }

  export type RoleUncheckedCreateWithoutPermissionsInput = {
    id?: string
    name: string
    description?: string | null
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutPermissionsInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
  }

  export type PermissionCreateWithoutRolePermissionsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    resource: string
    action: string
    isSystem?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    contexts?: PermissionContextCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateWithoutRolePermissionsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    resource: string
    action: string
    isSystem?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    contexts?: PermissionContextUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionCreateOrConnectWithoutRolePermissionsInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
  }

  export type UserCreateWithoutGrantedPermissionsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountCreateNestedManyWithoutAssignedAgentInput
    calls?: CallCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleCreateNestedManyWithoutAssignedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFACreateNestedOneWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGrantedPermissionsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionUncheckedCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountUncheckedCreateNestedManyWithoutAssignedAgentInput
    calls?: CallUncheckedCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleUncheckedCreateNestedManyWithoutAssignedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFAUncheckedCreateNestedOneWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventUncheckedCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGrantedPermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGrantedPermissionsInput, UserUncheckedCreateWithoutGrantedPermissionsInput>
  }

  export type RoleUpsertWithoutPermissionsInput = {
    update: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
  }

  export type RoleUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRoles?: UserRoleUpdateManyWithoutRoleNestedInput
    createdBy?: UserUpdateOneWithoutCreatedRolesNestedInput
  }

  export type RoleUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    userRoles?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type PermissionUpsertWithoutRolePermissionsInput = {
    update: XOR<PermissionUpdateWithoutRolePermissionsInput, PermissionUncheckedUpdateWithoutRolePermissionsInput>
    create: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutRolePermissionsInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutRolePermissionsInput, PermissionUncheckedUpdateWithoutRolePermissionsInput>
  }

  export type PermissionUpdateWithoutRolePermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contexts?: PermissionContextUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateWithoutRolePermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contexts?: PermissionContextUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type UserUpsertWithoutGrantedPermissionsInput = {
    update: XOR<UserUpdateWithoutGrantedPermissionsInput, UserUncheckedUpdateWithoutGrantedPermissionsInput>
    create: XOR<UserCreateWithoutGrantedPermissionsInput, UserUncheckedCreateWithoutGrantedPermissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGrantedPermissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGrantedPermissionsInput, UserUncheckedUpdateWithoutGrantedPermissionsInput>
  }

  export type UserUpdateWithoutGrantedPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUpdateManyWithoutAssignedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGrantedPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUncheckedUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUncheckedUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUncheckedUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUncheckedUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutUserRolesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountCreateNestedManyWithoutAssignedAgentInput
    calls?: CallCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    assignedRoles?: UserRoleCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFACreateNestedOneWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserRolesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionUncheckedCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountUncheckedCreateNestedManyWithoutAssignedAgentInput
    calls?: CallUncheckedCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    assignedRoles?: UserRoleUncheckedCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFAUncheckedCreateNestedOneWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventUncheckedCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRolesInput, UserUncheckedCreateWithoutUserRolesInput>
  }

  export type RoleCreateWithoutUserRolesInput = {
    id?: string
    name: string
    description?: string | null
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
    createdBy?: UserCreateNestedOneWithoutCreatedRolesInput
  }

  export type RoleUncheckedCreateWithoutUserRolesInput = {
    id?: string
    name: string
    description?: string | null
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutUserRolesInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUserRolesInput, RoleUncheckedCreateWithoutUserRolesInput>
  }

  export type UserCreateWithoutAssignedRolesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountCreateNestedManyWithoutAssignedAgentInput
    calls?: CallCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    grantedPermissions?: RolePermissionCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFACreateNestedOneWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedRolesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionUncheckedCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountUncheckedCreateNestedManyWithoutAssignedAgentInput
    calls?: CallUncheckedCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    grantedPermissions?: RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFAUncheckedCreateNestedOneWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventUncheckedCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedRolesInput, UserUncheckedCreateWithoutAssignedRolesInput>
  }

  export type UserUpsertWithoutUserRolesInput = {
    update: XOR<UserUpdateWithoutUserRolesInput, UserUncheckedUpdateWithoutUserRolesInput>
    create: XOR<UserCreateWithoutUserRolesInput, UserUncheckedCreateWithoutUserRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserRolesInput, UserUncheckedUpdateWithoutUserRolesInput>
  }

  export type UserUpdateWithoutUserRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    assignedRoles?: UserRoleUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUncheckedUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUncheckedUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedRoles?: UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUncheckedUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUncheckedUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoleUpsertWithoutUserRolesInput = {
    update: XOR<RoleUpdateWithoutUserRolesInput, RoleUncheckedUpdateWithoutUserRolesInput>
    create: XOR<RoleCreateWithoutUserRolesInput, RoleUncheckedCreateWithoutUserRolesInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUserRolesInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUserRolesInput, RoleUncheckedUpdateWithoutUserRolesInput>
  }

  export type RoleUpdateWithoutUserRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
    createdBy?: UserUpdateOneWithoutCreatedRolesNestedInput
  }

  export type RoleUncheckedUpdateWithoutUserRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type UserUpsertWithoutAssignedRolesInput = {
    update: XOR<UserUpdateWithoutAssignedRolesInput, UserUncheckedUpdateWithoutAssignedRolesInput>
    create: XOR<UserCreateWithoutAssignedRolesInput, UserUncheckedCreateWithoutAssignedRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedRolesInput, UserUncheckedUpdateWithoutAssignedRolesInput>
  }

  export type UserUpdateWithoutAssignedRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    grantedPermissions?: RolePermissionUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUncheckedUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUncheckedUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    grantedPermissions?: RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUncheckedUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUncheckedUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountCreateNestedManyWithoutAssignedAgentInput
    calls?: CallCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionCreateNestedManyWithoutGrantedByInput
    mfaConfig?: UserMFACreateNestedOneWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionUncheckedCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountUncheckedCreateNestedManyWithoutAssignedAgentInput
    calls?: CallUncheckedCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleUncheckedCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput
    mfaConfig?: UserMFAUncheckedCreateNestedOneWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventUncheckedCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUpdateManyWithoutGrantedByNestedInput
    mfaConfig?: UserMFAUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUncheckedUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUncheckedUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput
    mfaConfig?: UserMFAUncheckedUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUncheckedUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DispositionCreateWithoutCategoryInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    requiresFollowUp?: boolean
    requiresPayment?: boolean
    requiresNotes?: boolean
    isSuccessful?: boolean
    sortOrder?: number
    isActive?: boolean
    usageCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DispositionUncheckedCreateWithoutCategoryInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    requiresFollowUp?: boolean
    requiresPayment?: boolean
    requiresNotes?: boolean
    isSuccessful?: boolean
    sortOrder?: number
    isActive?: boolean
    usageCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DispositionCreateOrConnectWithoutCategoryInput = {
    where: DispositionWhereUniqueInput
    create: XOR<DispositionCreateWithoutCategoryInput, DispositionUncheckedCreateWithoutCategoryInput>
  }

  export type DispositionCreateManyCategoryInputEnvelope = {
    data: DispositionCreateManyCategoryInput | DispositionCreateManyCategoryInput[]
  }

  export type DispositionUpsertWithWhereUniqueWithoutCategoryInput = {
    where: DispositionWhereUniqueInput
    update: XOR<DispositionUpdateWithoutCategoryInput, DispositionUncheckedUpdateWithoutCategoryInput>
    create: XOR<DispositionCreateWithoutCategoryInput, DispositionUncheckedCreateWithoutCategoryInput>
  }

  export type DispositionUpdateWithWhereUniqueWithoutCategoryInput = {
    where: DispositionWhereUniqueInput
    data: XOR<DispositionUpdateWithoutCategoryInput, DispositionUncheckedUpdateWithoutCategoryInput>
  }

  export type DispositionUpdateManyWithWhereWithoutCategoryInput = {
    where: DispositionScalarWhereInput
    data: XOR<DispositionUpdateManyMutationInput, DispositionUncheckedUpdateManyWithoutCategoryInput>
  }

  export type DispositionScalarWhereInput = {
    AND?: DispositionScalarWhereInput | DispositionScalarWhereInput[]
    OR?: DispositionScalarWhereInput[]
    NOT?: DispositionScalarWhereInput | DispositionScalarWhereInput[]
    id?: StringFilter<"Disposition"> | string
    code?: StringFilter<"Disposition"> | string
    name?: StringFilter<"Disposition"> | string
    description?: StringNullableFilter<"Disposition"> | string | null
    categoryId?: StringFilter<"Disposition"> | string
    requiresFollowUp?: BoolFilter<"Disposition"> | boolean
    requiresPayment?: BoolFilter<"Disposition"> | boolean
    requiresNotes?: BoolFilter<"Disposition"> | boolean
    isSuccessful?: BoolFilter<"Disposition"> | boolean
    sortOrder?: IntFilter<"Disposition"> | number
    isActive?: BoolFilter<"Disposition"> | boolean
    usageCount?: IntFilter<"Disposition"> | number
    createdAt?: DateTimeFilter<"Disposition"> | Date | string
    updatedAt?: DateTimeFilter<"Disposition"> | Date | string
  }

  export type DispositionCategoryCreateWithoutDispositionsInput = {
    id?: string
    name: string
    description?: string | null
    color?: string | null
    icon?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DispositionCategoryUncheckedCreateWithoutDispositionsInput = {
    id?: string
    name: string
    description?: string | null
    color?: string | null
    icon?: string | null
    sortOrder?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DispositionCategoryCreateOrConnectWithoutDispositionsInput = {
    where: DispositionCategoryWhereUniqueInput
    create: XOR<DispositionCategoryCreateWithoutDispositionsInput, DispositionCategoryUncheckedCreateWithoutDispositionsInput>
  }

  export type DispositionCategoryUpsertWithoutDispositionsInput = {
    update: XOR<DispositionCategoryUpdateWithoutDispositionsInput, DispositionCategoryUncheckedUpdateWithoutDispositionsInput>
    create: XOR<DispositionCategoryCreateWithoutDispositionsInput, DispositionCategoryUncheckedCreateWithoutDispositionsInput>
    where?: DispositionCategoryWhereInput
  }

  export type DispositionCategoryUpdateToOneWithWhereWithoutDispositionsInput = {
    where?: DispositionCategoryWhereInput
    data: XOR<DispositionCategoryUpdateWithoutDispositionsInput, DispositionCategoryUncheckedUpdateWithoutDispositionsInput>
  }

  export type DispositionCategoryUpdateWithoutDispositionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DispositionCategoryUncheckedUpdateWithoutDispositionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutMfaConfigInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountCreateNestedManyWithoutAssignedAgentInput
    calls?: CallCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMfaConfigInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionUncheckedCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountUncheckedCreateNestedManyWithoutAssignedAgentInput
    calls?: CallUncheckedCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleUncheckedCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventUncheckedCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMfaConfigInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMfaConfigInput, UserUncheckedCreateWithoutMfaConfigInput>
  }

  export type UserUpsertWithoutMfaConfigInput = {
    update: XOR<UserUpdateWithoutMfaConfigInput, UserUncheckedUpdateWithoutMfaConfigInput>
    create: XOR<UserCreateWithoutMfaConfigInput, UserUncheckedCreateWithoutMfaConfigInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMfaConfigInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMfaConfigInput, UserUncheckedUpdateWithoutMfaConfigInput>
  }

  export type UserUpdateWithoutMfaConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMfaConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUncheckedUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUncheckedUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUncheckedUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountCreateNestedManyWithoutAssignedAgentInput
    calls?: CallCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFACreateNestedOneWithoutUserInput
    securityEvents?: SecurityEventCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionUncheckedCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountUncheckedCreateNestedManyWithoutAssignedAgentInput
    calls?: CallUncheckedCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleUncheckedCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFAUncheckedCreateNestedOneWithoutUserInput
    securityEvents?: SecurityEventUncheckedCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUpdateOneWithoutUserNestedInput
    securityEvents?: SecurityEventUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUncheckedUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUncheckedUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUncheckedUpdateOneWithoutUserNestedInput
    securityEvents?: SecurityEventUncheckedUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSecurityEventsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountCreateNestedManyWithoutAssignedAgentInput
    calls?: CallCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFACreateNestedOneWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSecurityEventsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionUncheckedCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountUncheckedCreateNestedManyWithoutAssignedAgentInput
    calls?: CallUncheckedCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleUncheckedCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFAUncheckedCreateNestedOneWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput
    permissionContexts?: PermissionContextUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSecurityEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSecurityEventsInput, UserUncheckedCreateWithoutSecurityEventsInput>
  }

  export type UserCreateWithoutResolvedSecurityEventsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountCreateNestedManyWithoutAssignedAgentInput
    calls?: CallCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFACreateNestedOneWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventCreateNestedManyWithoutUserInput
    permissionContexts?: PermissionContextCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutResolvedSecurityEventsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionUncheckedCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountUncheckedCreateNestedManyWithoutAssignedAgentInput
    calls?: CallUncheckedCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleUncheckedCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFAUncheckedCreateNestedOneWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventUncheckedCreateNestedManyWithoutUserInput
    permissionContexts?: PermissionContextUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutResolvedSecurityEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResolvedSecurityEventsInput, UserUncheckedCreateWithoutResolvedSecurityEventsInput>
  }

  export type UserUpsertWithoutSecurityEventsInput = {
    update: XOR<UserUpdateWithoutSecurityEventsInput, UserUncheckedUpdateWithoutSecurityEventsInput>
    create: XOR<UserCreateWithoutSecurityEventsInput, UserUncheckedCreateWithoutSecurityEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSecurityEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSecurityEventsInput, UserUncheckedUpdateWithoutSecurityEventsInput>
  }

  export type UserUpdateWithoutSecurityEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSecurityEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUncheckedUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUncheckedUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUncheckedUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput
    permissionContexts?: PermissionContextUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutResolvedSecurityEventsInput = {
    update: XOR<UserUpdateWithoutResolvedSecurityEventsInput, UserUncheckedUpdateWithoutResolvedSecurityEventsInput>
    create: XOR<UserCreateWithoutResolvedSecurityEventsInput, UserUncheckedCreateWithoutResolvedSecurityEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResolvedSecurityEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResolvedSecurityEventsInput, UserUncheckedUpdateWithoutResolvedSecurityEventsInput>
  }

  export type UserUpdateWithoutResolvedSecurityEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUpdateManyWithoutUserNestedInput
    permissionContexts?: PermissionContextUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutResolvedSecurityEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUncheckedUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUncheckedUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUncheckedUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUncheckedUpdateManyWithoutUserNestedInput
    permissionContexts?: PermissionContextUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPermissionContextsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountCreateNestedManyWithoutAssignedAgentInput
    calls?: CallCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFACreateNestedOneWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventCreateNestedManyWithoutResolvedByInput
  }

  export type UserUncheckedCreateWithoutPermissionContextsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: string
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerified?: boolean
    emailVerifyToken?: string | null
    emailVerifyExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    failedLoginAttempts?: number
    accountLockedUntil?: Date | string | null
    lastFailedLogin?: Date | string | null
    passwordChangedAt?: Date | string
    mustChangePassword?: boolean
    accountActions?: AccountActionUncheckedCreateNestedManyWithoutAgentInput
    assignedAccounts?: AccountUncheckedCreateNestedManyWithoutAssignedAgentInput
    calls?: CallUncheckedCreateNestedManyWithoutAgentInput
    refreshTokens?: RefreshTokenUncheckedCreateNestedManyWithoutUserInput
    uploadBatches?: UploadBatchUncheckedCreateNestedManyWithoutUploadedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    assignedRoles?: UserRoleUncheckedCreateNestedManyWithoutAssignedByInput
    grantedPermissions?: RolePermissionUncheckedCreateNestedManyWithoutGrantedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutActorInput
    mfaConfig?: UserMFAUncheckedCreateNestedOneWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    securityEvents?: SecurityEventUncheckedCreateNestedManyWithoutUserInput
    resolvedSecurityEvents?: SecurityEventUncheckedCreateNestedManyWithoutResolvedByInput
  }

  export type UserCreateOrConnectWithoutPermissionContextsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPermissionContextsInput, UserUncheckedCreateWithoutPermissionContextsInput>
  }

  export type PermissionCreateWithoutContextsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    resource: string
    action: string
    isSystem?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    rolePermissions?: RolePermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateWithoutContextsInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    category: string
    resource: string
    action: string
    isSystem?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    rolePermissions?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionCreateOrConnectWithoutContextsInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutContextsInput, PermissionUncheckedCreateWithoutContextsInput>
  }

  export type UserUpsertWithoutPermissionContextsInput = {
    update: XOR<UserUpdateWithoutPermissionContextsInput, UserUncheckedUpdateWithoutPermissionContextsInput>
    create: XOR<UserCreateWithoutPermissionContextsInput, UserUncheckedCreateWithoutPermissionContextsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPermissionContextsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPermissionContextsInput, UserUncheckedUpdateWithoutPermissionContextsInput>
  }

  export type UserUpdateWithoutPermissionContextsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUpdateManyWithoutResolvedByNestedInput
  }

  export type UserUncheckedUpdateWithoutPermissionContextsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerifyToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerifyExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    failedLoginAttempts?: IntFieldUpdateOperationsInput | number
    accountLockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastFailedLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordChangedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    accountActions?: AccountActionUncheckedUpdateManyWithoutAgentNestedInput
    assignedAccounts?: AccountUncheckedUpdateManyWithoutAssignedAgentNestedInput
    calls?: CallUncheckedUpdateManyWithoutAgentNestedInput
    refreshTokens?: RefreshTokenUncheckedUpdateManyWithoutUserNestedInput
    uploadBatches?: UploadBatchUncheckedUpdateManyWithoutUploadedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    assignedRoles?: UserRoleUncheckedUpdateManyWithoutAssignedByNestedInput
    grantedPermissions?: RolePermissionUncheckedUpdateManyWithoutGrantedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutActorNestedInput
    mfaConfig?: UserMFAUncheckedUpdateOneWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    securityEvents?: SecurityEventUncheckedUpdateManyWithoutUserNestedInput
    resolvedSecurityEvents?: SecurityEventUncheckedUpdateManyWithoutResolvedByNestedInput
  }

  export type PermissionUpsertWithoutContextsInput = {
    update: XOR<PermissionUpdateWithoutContextsInput, PermissionUncheckedUpdateWithoutContextsInput>
    create: XOR<PermissionCreateWithoutContextsInput, PermissionUncheckedCreateWithoutContextsInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutContextsInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutContextsInput, PermissionUncheckedUpdateWithoutContextsInput>
  }

  export type PermissionUpdateWithoutContextsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rolePermissions?: RolePermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateWithoutContextsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rolePermissions?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type AccountActionCreateManyAgentInput = {
    id?: string
    accountId: string
    actionType: string
    description: string
    details?: string | null
    createdAt?: Date | string
  }

  export type AccountCreateManyAssignedAgentInput = {
    id?: string
    accountNumber: string
    firstName: string
    lastName: string
    fullName: string
    email?: string | null
    address1?: string | null
    address2?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    originalAmount: number
    currentBalance: number
    amountPaid?: number
    interestRate?: number | null
    lastPaymentDate?: Date | string | null
    lastPaymentAmount?: number | null
    status?: string
    priority?: string
    assignedDate?: Date | string | null
    preferredContactMethod?: string | null
    bestTimeToCall?: string | null
    timezone?: string | null
    language?: string | null
    daysPastDue?: number
    lastContactDate?: Date | string | null
    nextContactDate?: Date | string | null
    contactAttempts?: number
    doNotCall?: boolean
    disputeFlag?: boolean
    bankruptcyFlag?: boolean
    deceasedFlag?: boolean
    notes?: string | null
    source?: string | null
    batchId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CallCreateManyAgentInput = {
    id?: string
    accountId: string
    accountPhoneId?: string | null
    direction: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status: string
    disposition?: string | null
    notes?: string | null
    followUpDate?: Date | string | null
    amountPromised?: number | null
    amountCollected?: number | null
    recordingPath?: string | null
    callerId?: string | null
    campaignId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RefreshTokenCreateManyUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type UploadBatchCreateManyUploadedByInput = {
    id?: string
    filename: string
    originalFilename: string
    fileSize: number
    mimeType: string
    totalRecords?: number
    processedRecords?: number
    successCount?: number
    errorCount?: number
    skipCount?: number
    duplicateCount?: number
    status?: string
    batchName?: string | null
    skipErrors?: boolean
    updateExisting?: boolean
    processingStarted?: Date | string | null
    processingCompleted?: Date | string | null
    errorLog?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleCreateManyCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    isSystem?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleCreateManyUserInput = {
    id?: string
    roleId: string
    assignedAt?: Date | string
    assignedById?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
  }

  export type UserRoleCreateManyAssignedByInput = {
    id?: string
    userId: string
    roleId: string
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
  }

  export type RolePermissionCreateManyGrantedByInput = {
    id?: string
    roleId: string
    permissionId: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type AuditLogCreateManyActorInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValue?: string | null
    newValue?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    sessionId?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type UserSessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    deviceFingerprint: string
    ipAddress: string
    userAgent: string
    location?: string | null
    riskScore?: number
    isActive?: boolean
    lastActivityAt?: Date | string
    expiresAt: Date | string
    createdAt?: Date | string
    loginMethod?: string | null
    deviceType?: string | null
    browserInfo?: string | null
  }

  export type SecurityEventCreateManyUserInput = {
    id?: string
    sessionId?: string | null
    eventType: string
    severity: string
    description: string
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    location?: string | null
    riskScore?: number
    isBlocked?: boolean
    resolvedAt?: Date | string | null
    resolvedById?: string | null
    createdAt?: Date | string
  }

  export type SecurityEventCreateManyResolvedByInput = {
    id?: string
    userId?: string | null
    sessionId?: string | null
    eventType: string
    severity: string
    description: string
    details?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    location?: string | null
    riskScore?: number
    isBlocked?: boolean
    resolvedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type PermissionContextCreateManyUserInput = {
    id?: string
    permissionId: string
    context: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    ipRange?: string | null
    timeRestriction?: string | null
    locationRestriction?: string | null
    deviceRestriction?: string | null
  }

  export type AccountActionUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneRequiredWithoutActionsNestedInput
  }

  export type AccountActionUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountActionUncheckedUpdateManyWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUpdateWithoutAssignedAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    originalAmount?: FloatFieldUpdateOperationsInput | number
    currentBalance?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    assignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    bestTimeToCall?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    daysPastDue?: IntFieldUpdateOperationsInput | number
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactAttempts?: IntFieldUpdateOperationsInput | number
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    disputeFlag?: BoolFieldUpdateOperationsInput | boolean
    bankruptcyFlag?: BoolFieldUpdateOperationsInput | boolean
    deceasedFlag?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: AccountActionUpdateManyWithoutAccountNestedInput
    phoneNumbers?: AccountPhoneUpdateManyWithoutAccountNestedInput
    calls?: CallUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutAssignedAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    originalAmount?: FloatFieldUpdateOperationsInput | number
    currentBalance?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    assignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    bestTimeToCall?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    daysPastDue?: IntFieldUpdateOperationsInput | number
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactAttempts?: IntFieldUpdateOperationsInput | number
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    disputeFlag?: BoolFieldUpdateOperationsInput | boolean
    bankruptcyFlag?: BoolFieldUpdateOperationsInput | boolean
    deceasedFlag?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: AccountActionUncheckedUpdateManyWithoutAccountNestedInput
    phoneNumbers?: AccountPhoneUncheckedUpdateManyWithoutAccountNestedInput
    calls?: CallUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateManyWithoutAssignedAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address1?: NullableStringFieldUpdateOperationsInput | string | null
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    originalAmount?: FloatFieldUpdateOperationsInput | number
    currentBalance?: FloatFieldUpdateOperationsInput | number
    amountPaid?: FloatFieldUpdateOperationsInput | number
    interestRate?: NullableFloatFieldUpdateOperationsInput | number | null
    lastPaymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastPaymentAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    assignedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    bestTimeToCall?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    daysPastDue?: IntFieldUpdateOperationsInput | number
    lastContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextContactDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contactAttempts?: IntFieldUpdateOperationsInput | number
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    disputeFlag?: BoolFieldUpdateOperationsInput | boolean
    bankruptcyFlag?: BoolFieldUpdateOperationsInput | boolean
    deceasedFlag?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPromised?: NullableFloatFieldUpdateOperationsInput | number | null
    amountCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    recordingPath?: NullableStringFieldUpdateOperationsInput | string | null
    callerId?: NullableStringFieldUpdateOperationsInput | string | null
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accountPhone?: AccountPhoneUpdateOneWithoutCallsNestedInput
    account?: AccountUpdateOneRequiredWithoutCallsNestedInput
  }

  export type CallUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    accountPhoneId?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPromised?: NullableFloatFieldUpdateOperationsInput | number | null
    amountCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    recordingPath?: NullableStringFieldUpdateOperationsInput | string | null
    callerId?: NullableStringFieldUpdateOperationsInput | string | null
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallUncheckedUpdateManyWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    accountPhoneId?: NullableStringFieldUpdateOperationsInput | string | null
    direction?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPromised?: NullableFloatFieldUpdateOperationsInput | number | null
    amountCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    recordingPath?: NullableStringFieldUpdateOperationsInput | string | null
    callerId?: NullableStringFieldUpdateOperationsInput | string | null
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadBatchUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalFilename?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successCount?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    skipCount?: IntFieldUpdateOperationsInput | number
    duplicateCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    batchName?: NullableStringFieldUpdateOperationsInput | string | null
    skipErrors?: BoolFieldUpdateOperationsInput | boolean
    updateExisting?: BoolFieldUpdateOperationsInput | boolean
    processingStarted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorLog?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadBatchUncheckedUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalFilename?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successCount?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    skipCount?: IntFieldUpdateOperationsInput | number
    duplicateCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    batchName?: NullableStringFieldUpdateOperationsInput | string | null
    skipErrors?: BoolFieldUpdateOperationsInput | boolean
    updateExisting?: BoolFieldUpdateOperationsInput | boolean
    processingStarted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorLog?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadBatchUncheckedUpdateManyWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalFilename?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    totalRecords?: IntFieldUpdateOperationsInput | number
    processedRecords?: IntFieldUpdateOperationsInput | number
    successCount?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    skipCount?: IntFieldUpdateOperationsInput | number
    duplicateCount?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    batchName?: NullableStringFieldUpdateOperationsInput | string | null
    skipErrors?: BoolFieldUpdateOperationsInput | boolean
    updateExisting?: BoolFieldUpdateOperationsInput | boolean
    processingStarted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processingCompleted?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorLog?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
    userRoles?: UserRoleUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isSystem?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: RoleUpdateOneRequiredWithoutUserRolesNestedInput
    assignedBy?: UserUpdateOneWithoutAssignedRolesNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedById?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserRoleUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedById?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserRoleUpdateWithoutAssignedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutUserRolesNestedInput
    role?: RoleUpdateOneRequiredWithoutUserRolesNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutAssignedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserRoleUncheckedUpdateManyWithoutAssignedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolePermissionUpdateWithoutGrantedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: RoleUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutRolePermissionsNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutGrantedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RolePermissionUncheckedUpdateManyWithoutGrantedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuditLogUpdateWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutActorInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValue?: NullableStringFieldUpdateOperationsInput | string | null
    newValue?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastActivityAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginMethod?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableStringFieldUpdateOperationsInput | string | null
    browserInfo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastActivityAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginMethod?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableStringFieldUpdateOperationsInput | string | null
    browserInfo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    deviceFingerprint?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastActivityAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginMethod?: NullableStringFieldUpdateOperationsInput | string | null
    deviceType?: NullableStringFieldUpdateOperationsInput | string | null
    browserInfo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SecurityEventUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedBy?: UserUpdateOneWithoutResolvedSecurityEventsNestedInput
  }

  export type SecurityEventUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecurityEventUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolvedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecurityEventUpdateWithoutResolvedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutSecurityEventsNestedInput
  }

  export type SecurityEventUncheckedUpdateWithoutResolvedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SecurityEventUncheckedUpdateManyWithoutResolvedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    eventType?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    riskScore?: FloatFieldUpdateOperationsInput | number
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionContextUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipRange?: NullableStringFieldUpdateOperationsInput | string | null
    timeRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    locationRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    deviceRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    permission?: PermissionUpdateOneRequiredWithoutContextsNestedInput
  }

  export type PermissionContextUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipRange?: NullableStringFieldUpdateOperationsInput | string | null
    timeRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    locationRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    deviceRestriction?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionContextUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipRange?: NullableStringFieldUpdateOperationsInput | string | null
    timeRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    locationRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    deviceRestriction?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountActionCreateManyAccountInput = {
    id?: string
    agentId: string
    actionType: string
    description: string
    details?: string | null
    createdAt?: Date | string
  }

  export type AccountPhoneCreateManyAccountInput = {
    id?: string
    phoneNumber: string
    phoneType?: string
    isValid?: boolean
    doNotCall?: boolean
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CallCreateManyAccountInput = {
    id?: string
    accountPhoneId?: string | null
    agentId: string
    direction: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status: string
    disposition?: string | null
    notes?: string | null
    followUpDate?: Date | string | null
    amountPromised?: number | null
    amountCollected?: number | null
    recordingPath?: string | null
    callerId?: string | null
    campaignId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountActionUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: UserUpdateOneRequiredWithoutAccountActionsNestedInput
  }

  export type AccountActionUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountActionUncheckedUpdateManyWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    actionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountPhoneUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    calls?: CallUpdateManyWithoutAccountPhoneNestedInput
  }

  export type AccountPhoneUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    calls?: CallUncheckedUpdateManyWithoutAccountPhoneNestedInput
  }

  export type AccountPhoneUncheckedUpdateManyWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneType?: StringFieldUpdateOperationsInput | string
    isValid?: BoolFieldUpdateOperationsInput | boolean
    doNotCall?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPromised?: NullableFloatFieldUpdateOperationsInput | number | null
    amountCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    recordingPath?: NullableStringFieldUpdateOperationsInput | string | null
    callerId?: NullableStringFieldUpdateOperationsInput | string | null
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: UserUpdateOneRequiredWithoutCallsNestedInput
    accountPhone?: AccountPhoneUpdateOneWithoutCallsNestedInput
  }

  export type CallUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountPhoneId?: NullableStringFieldUpdateOperationsInput | string | null
    agentId?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPromised?: NullableFloatFieldUpdateOperationsInput | number | null
    amountCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    recordingPath?: NullableStringFieldUpdateOperationsInput | string | null
    callerId?: NullableStringFieldUpdateOperationsInput | string | null
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallUncheckedUpdateManyWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountPhoneId?: NullableStringFieldUpdateOperationsInput | string | null
    agentId?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPromised?: NullableFloatFieldUpdateOperationsInput | number | null
    amountCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    recordingPath?: NullableStringFieldUpdateOperationsInput | string | null
    callerId?: NullableStringFieldUpdateOperationsInput | string | null
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallCreateManyAccountPhoneInput = {
    id?: string
    accountId: string
    agentId: string
    direction: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    status: string
    disposition?: string | null
    notes?: string | null
    followUpDate?: Date | string | null
    amountPromised?: number | null
    amountCollected?: number | null
    recordingPath?: string | null
    callerId?: string | null
    campaignId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CallUpdateWithoutAccountPhoneInput = {
    id?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPromised?: NullableFloatFieldUpdateOperationsInput | number | null
    amountCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    recordingPath?: NullableStringFieldUpdateOperationsInput | string | null
    callerId?: NullableStringFieldUpdateOperationsInput | string | null
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: UserUpdateOneRequiredWithoutCallsNestedInput
    account?: AccountUpdateOneRequiredWithoutCallsNestedInput
  }

  export type CallUncheckedUpdateWithoutAccountPhoneInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPromised?: NullableFloatFieldUpdateOperationsInput | number | null
    amountCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    recordingPath?: NullableStringFieldUpdateOperationsInput | string | null
    callerId?: NullableStringFieldUpdateOperationsInput | string | null
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CallUncheckedUpdateManyWithoutAccountPhoneInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    agentId?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    disposition?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    followUpDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountPromised?: NullableFloatFieldUpdateOperationsInput | number | null
    amountCollected?: NullableFloatFieldUpdateOperationsInput | number | null
    recordingPath?: NullableStringFieldUpdateOperationsInput | string | null
    callerId?: NullableStringFieldUpdateOperationsInput | string | null
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionCreateManyRoleInput = {
    id?: string
    permissionId: string
    grantedAt?: Date | string
    grantedById?: string | null
    expiresAt?: Date | string | null
  }

  export type UserRoleCreateManyRoleInput = {
    id?: string
    userId: string
    assignedAt?: Date | string
    assignedById?: string | null
    expiresAt?: Date | string | null
    isActive?: boolean
  }

  export type RolePermissionUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permission?: PermissionUpdateOneRequiredWithoutRolePermissionsNestedInput
    grantedBy?: UserUpdateOneWithoutGrantedPermissionsNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedById?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedById?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserRoleUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutUserRolesNestedInput
    assignedBy?: UserUpdateOneWithoutAssignedRolesNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedById?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignedById?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolePermissionCreateManyPermissionInput = {
    id?: string
    roleId: string
    grantedAt?: Date | string
    grantedById?: string | null
    expiresAt?: Date | string | null
  }

  export type PermissionContextCreateManyPermissionInput = {
    id?: string
    userId: string
    context: string
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    ipRange?: string | null
    timeRestriction?: string | null
    locationRestriction?: string | null
    deviceRestriction?: string | null
  }

  export type RolePermissionUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    role?: RoleUpdateOneRequiredWithoutPermissionsNestedInput
    grantedBy?: UserUpdateOneWithoutGrantedPermissionsNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedById?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grantedById?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PermissionContextUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipRange?: NullableStringFieldUpdateOperationsInput | string | null
    timeRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    locationRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    deviceRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPermissionContextsNestedInput
  }

  export type PermissionContextUncheckedUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipRange?: NullableStringFieldUpdateOperationsInput | string | null
    timeRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    locationRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    deviceRestriction?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionContextUncheckedUpdateManyWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipRange?: NullableStringFieldUpdateOperationsInput | string | null
    timeRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    locationRestriction?: NullableStringFieldUpdateOperationsInput | string | null
    deviceRestriction?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DispositionCreateManyCategoryInput = {
    id?: string
    code: string
    name: string
    description?: string | null
    requiresFollowUp?: boolean
    requiresPayment?: boolean
    requiresNotes?: boolean
    isSuccessful?: boolean
    sortOrder?: number
    isActive?: boolean
    usageCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DispositionUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    requiresFollowUp?: BoolFieldUpdateOperationsInput | boolean
    requiresPayment?: BoolFieldUpdateOperationsInput | boolean
    requiresNotes?: BoolFieldUpdateOperationsInput | boolean
    isSuccessful?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DispositionUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    requiresFollowUp?: BoolFieldUpdateOperationsInput | boolean
    requiresPayment?: BoolFieldUpdateOperationsInput | boolean
    requiresNotes?: BoolFieldUpdateOperationsInput | boolean
    isSuccessful?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DispositionUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    requiresFollowUp?: BoolFieldUpdateOperationsInput | boolean
    requiresPayment?: BoolFieldUpdateOperationsInput | boolean
    requiresNotes?: BoolFieldUpdateOperationsInput | boolean
    isSuccessful?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    usageCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountCountOutputTypeDefaultArgs instead
     */
    export type AccountCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountPhoneCountOutputTypeDefaultArgs instead
     */
    export type AccountPhoneCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountPhoneCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionCountOutputTypeDefaultArgs instead
     */
    export type PermissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DispositionCategoryCountOutputTypeDefaultArgs instead
     */
    export type DispositionCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DispositionCategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefreshTokenDefaultArgs instead
     */
    export type RefreshTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefreshTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountPhoneDefaultArgs instead
     */
    export type AccountPhoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountPhoneDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CallDefaultArgs instead
     */
    export type CallArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CallDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountActionDefaultArgs instead
     */
    export type AccountActionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountActionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UploadBatchDefaultArgs instead
     */
    export type UploadBatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UploadBatchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionDefaultArgs instead
     */
    export type PermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RolePermissionDefaultArgs instead
     */
    export type RolePermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RolePermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserRoleDefaultArgs instead
     */
    export type UserRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserRoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DispositionCategoryDefaultArgs instead
     */
    export type DispositionCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DispositionCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DispositionDefaultArgs instead
     */
    export type DispositionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DispositionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserMFADefaultArgs instead
     */
    export type UserMFAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserMFADefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserSessionDefaultArgs instead
     */
    export type UserSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserSessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EncryptionKeyDefaultArgs instead
     */
    export type EncryptionKeyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EncryptionKeyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SecurityEventDefaultArgs instead
     */
    export type SecurityEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SecurityEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionContextDefaultArgs instead
     */
    export type PermissionContextArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionContextDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}